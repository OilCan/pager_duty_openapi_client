=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::EventOrchestrationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EventOrchestrationsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::EventOrchestrationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EventOrchestrationsApi' do
    it 'should create an instance of EventOrchestrationsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::EventOrchestrationsApi)
    end
  end

  # unit tests for create_cache_var_on_global_orch
  # Create a Cache Variable for a Global Event Orchestration
  # Create a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'create_cache_var_on_global_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_cache_var_on_service_orch
  # Create a Cache Variable for a Service Event Orchestration
  # Create a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'create_cache_var_on_service_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_cache_var_on_global_orch
  # Delete a Cache Variable for a Global Event Orchestration
  # Delete a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_cache_var_on_global_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_cache_var_on_service_orch
  # Delete a Cache Variable for a Service Event Orchestration
  # Delete a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_cache_var_on_service_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_orchestration
  # Delete an Orchestration
  # Delete a Global Event Orchestration.  Once deleted, you will no longer be able to ingest events into PagerDuty using this Orchestration&#39;s Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_orchestration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_orchestration_integration
  # Delete an Integration for an Event Orchestration
  # Delete an Integration and its associated Routing Key.  Once deleted, PagerDuty will drop all future events sent to PagerDuty using the Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param integration_id The ID of an Integration.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_orchestration_integration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cache_var_on_global_orch
  # Get a Cache Variable for a Global Event Orchestration
  # Get a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'get_cache_var_on_global_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cache_var_on_service_orch
  # Get a Cache Variable for a Service Event Orchestration
  # Get a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'get_cache_var_on_service_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orch_active_status
  # Get the Service Orchestration active status for a Service
  # Get a Service Orchestration&#39;s active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @return [GetOrchActiveStatus200Response]
  describe 'get_orch_active_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orch_path_global
  # Get the Global Orchestration for an Event Orchestration
  # Get the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [OrchestrationGlobal]
  describe 'get_orch_path_global test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orch_path_router
  # Get the Router for an Event Orchestration
  # Get a Global Orchestration&#39;s Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn&#39;t match any rules, it&#39;ll be sent to service specified in as the &#x60;catch_all&#x60; or the \&quot;Unrouted\&quot; Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [OrchestrationRouter]
  describe 'get_orch_path_router test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orch_path_service
  # Get the Service Orchestration for a Service
  # Get a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include Array of additional Models to include in response.
  # @return [ServiceOrchestration]
  describe 'get_orch_path_service test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orch_path_unrouted
  # Get the Unrouted Orchestration for an Event Orchestration
  # Get a Global Event Orchestration&#39;s Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don&#39;t match any rules in the Global Orchestration&#39;s Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [OrchestrationUnrouted]
  describe 'get_orch_path_unrouted test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orchestration
  # Get an Orchestration
  # Get a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [PostOrchestration201Response]
  describe 'get_orchestration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_orchestration_integration
  # Get an Integration for an Event Orchestration
  # Get an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param integration_id The ID of an Integration.
  # @param [Hash] opts the optional parameters
  # @return [GetOrchestrationIntegration200Response]
  describe 'get_orchestration_integration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_cache_var_on_global_orch
  # List Cache Variables for a Global Event Orchestration
  # List Cache Variables for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [ListCacheVarOnGlobalOrch200Response]
  describe 'list_cache_var_on_global_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_cache_var_on_service_orch
  # List Cache Variables for a Service Event Orchestration
  # List Cache Variables for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @return [ListCacheVarOnGlobalOrch200Response]
  describe 'list_cache_var_on_service_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_event_orchestrations
  # List Event Orchestrations
  # List all Global Event Orchestrations on an Account.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :offset Offset to start pagination search results.
  # @option opts [String] :sort_by Used to specify the field you wish to sort the results on.
  # @return [ListEventOrchestrations200Response]
  describe 'list_event_orchestrations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_orchestration_integrations
  # List Integrations for an Event Orchestration
  # List the Integrations associated with this Event Orchestrations.  You can use a Routing Key from these Integrations to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @return [ListOrchestrationIntegrations200Response]
  describe 'list_orchestration_integrations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for migrate_orchestration_integration
  # Migrate an Integration from one Event Orchestration to another
  # Move an Integration and its Routing Key from the Event Orchestration specified in the request payload, to the Event Orchestration specified in the request URL.  Any future events sent to this Integration&#39;s Routing Key will be processed by this Event Orchestration&#39;s Rules.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [MigrateOrchestrationIntegrationRequest] :migrate_orchestration_integration_request 
  # @return [ListOrchestrationIntegrations200Response]
  describe 'migrate_orchestration_integration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_orchestration
  # Create an Orchestration
  # Create a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param [Hash] opts the optional parameters
  # @option opts [PostOrchestrationRequest] :post_orchestration_request 
  # @return [PostOrchestration201Response]
  describe 'post_orchestration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_orchestration_integration
  # Create an Integration for an Event Orchestration
  # Create an Integration associated with this Event Orchestration.  You can then use the Routing Key from this new Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
  # @return [PostOrchestrationIntegration201Response]
  describe 'post_orchestration_integration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_cache_var_on_global_orch
  # Update a Cache Variable for a Global Event Orchestration
  # Update a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'update_cache_var_on_global_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_cache_var_on_service_orch
  # Update a Cache Variable for a Service Event Orchestration
  # Update a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param cache_variable_id The ID of a Cache Variable.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
  # @return [CreateCacheVarOnGlobalOrch200Response]
  describe 'update_cache_var_on_service_orch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orch_active_status
  # Update the Service Orchestration active status for a Service
  # Update a Service Orchestration&#39;s active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @option opts [Schema] :body Update Service Orchestration&#39;s active status.
  # @return [GetOrchActiveStatus200Response]
  describe 'update_orch_active_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orch_path_global
  # Update the Global Orchestration for an Event Orchestration
  # Update the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [OrchestrationGlobal] :orchestration_global Update Global Orchestration rules. Omitted rules and rule details are deleted.
  # @return [UpdateOrchPathGlobal200Response]
  describe 'update_orch_path_global test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orch_path_router
  # Update the Router for an Event Orchestration
  # Update a Global Orchestration&#39;s Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn&#39;t match any rules, it&#39;ll be sent to service specified in as the &#x60;catch_all&#x60; or the \&quot;Unrouted\&quot; Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [OrchestrationRouter] :orchestration_router Updates to Orchestration Router details. Omitted rules and rule details are deleted.
  # @return [UpdateOrchPathRouter200Response]
  describe 'update_orch_path_router test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orch_path_service
  # Update the Service Orchestration for a Service
  # Update a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param service_id The service ID
  # @param [Hash] opts the optional parameters
  # @option opts [ServiceOrchestration] :service_orchestration Update Service Orchestration rules. Omitted rules and rule details are deleted.
  # @return [UpdateOrchPathService200Response]
  describe 'update_orch_path_service test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orch_path_unrouted
  # Update the Unrouted Orchestration for an Event Orchestration
  # Update a Global Event Orchestration&#39;s Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don&#39;t match any rules in the Global Orchestration&#39;s Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [OrchestrationUnrouted] :orchestration_unrouted Updates to Unrouted Orchestration rules. Omitted rules and rule details are deleted.
  # @return [UpdateOrchPathUnrouted200Response]
  describe 'update_orch_path_unrouted test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orchestration
  # Update an Orchestration
  # Update a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param [Hash] opts the optional parameters
  # @option opts [PostOrchestrationRequest] :post_orchestration_request 
  # @return [PostOrchestration201Response]
  describe 'update_orchestration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_orchestration_integration
  # Update an Integration for an Event Orchestration
  # Update an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of an Event Orchestration.
  # @param integration_id The ID of an Integration.
  # @param [Hash] opts the optional parameters
  # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
  # @return [PostOrchestrationIntegration201Response]
  describe 'update_orchestration_integration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
