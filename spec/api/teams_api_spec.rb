=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for PagerDutyOpenapiClient::TeamsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TeamsApi' do
  before do
    # run before each test
    @api_instance = PagerDutyOpenapiClient::TeamsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TeamsApi' do
    it 'should create an instance of TeamsApi' do
      expect(@api_instance).to be_instance_of(PagerDutyOpenapiClient::TeamsApi)
    end
  end

  # unit tests for create_team
  # Create a team
  # Create a new Team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTeamRequest] :create_team_request The team to be created.
  # @return [CreateTeamRequest]
  describe 'create_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_team_notification_subscriptions
  # Create Team Notification Subscriptions
  # Create new Notification Subscriptions for the given Team.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to subscribe to.
  # @return [CreateBusinessServiceNotificationSubscribers200Response]
  describe 'create_team_notification_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_team
  # Delete a team
  # Remove an existing team.  Succeeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams.  All associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications).  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reassignment_team Team to reassign unresolved incident to. If an unresolved incident exists on both the reassignment team and the team being deleted, a duplicate will not be made. If not supplied, unresolved incidents will be made account-level. 
  # @return [nil]
  describe 'delete_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_team_escalation_policy
  # Remove an escalation policy from a team
  # Remove an escalation policy from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param escalation_policy_id The escalation policy ID on the team.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_team_escalation_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_team_user
  # Remove a user from a team
  # Remove a user from a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param user_id The user ID on the team.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_team_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_team
  # Get a team
  # Get details about an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include Array of additional Models to include in response.
  # @return [CreateTeamRequest]
  describe 'get_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_team_notification_subscriptions
  # List Team Notification Subscriptions
  # Retrieve a list of Notification Subscriptions the given Team has.  &lt;!-- theme: warning --&gt; &gt; Teams must be added through &#x60;POST /teams/{id}/notification_subscriptions&#x60; to be returned from this endpoint.  Scoped OAuth requires: &#x60;subscribers.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @return [GetTeamNotificationSubscriptions200Response]
  describe 'get_team_notification_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_team_users
  # List members of a team
  # Get information about members on a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :offset Offset to start pagination search results.
  # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information. 
  # @option opts [String] :include Array of additional Models to include in response.
  # @return [ListTeamUsers200Response]
  describe 'list_team_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_teams
  # List teams
  # List teams of your PagerDuty account, optionally filtered by a search query.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :offset Offset to start pagination search results.
  # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information. 
  # @option opts [String] :query Filters the result, showing only the records whose name matches the query.
  # @return [ListTeams200Response]
  describe 'list_teams test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_teams_audit_records
  # List audit records for a team
  # The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
  # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
  # @option opts [Time] :since The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours)
  # @option opts [Time] :_until The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;.
  # @return [AuditRecordResponseSchema]
  describe 'list_teams_audit_records test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for remove_team_notification_subscriptions
  # Unsubscribe the given Team from Notifications on the matching Subscribable entities.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to unsubscribe from.
  # @return [RemoveBusinessServiceNotificationSubscriber200Response]
  describe 'remove_team_notification_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_team
  # Update a team
  # Update an existing team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTeamRequest] :create_team_request The team to be updated.
  # @return [CreateTeamRequest]
  describe 'update_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_team_escalation_policy
  # Add an escalation policy to a team
  # Add an escalation policy to a team.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param escalation_policy_id The escalation policy ID on the team.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_team_escalation_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_team_user
  # Add a user to a team
  # Add a user to a team. Attempting to add a user with the &#x60;read_only_user&#x60; role will return a 400 error.  A team is a collection of Users and Escalation Policies that represent a group of people within an organization.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#teams)  Scoped OAuth requires: &#x60;teams.write&#x60; 
  # @param accept The &#x60;Accept&#x60; header is used as a versioning header.
  # @param content_type 
  # @param id The ID of the resource.
  # @param user_id The user ID on the team.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateTeamUserRequest] :update_team_user_request The role of the user on the team.
  # @return [nil]
  describe 'update_team_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
