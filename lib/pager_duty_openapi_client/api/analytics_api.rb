=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module PagerDutyOpenapiClient
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get raw responses from a single incident
    # Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below.  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API. Scoped OAuth requires: `analytics.read` 
    # @param id [String] The ID of the resource.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsIncidentResponsesByIdRequest] :get_analytics_incident_responses_by_id_request Parameters to apply to the dataset.
    # @return [GetAnalyticsIncidentResponsesById200Response]
    def get_analytics_incident_responses_by_id(id, accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_incident_responses_by_id_with_http_info(id, accept, content_type, opts)
      data
    end

    # Get raw responses from a single incident
    # Provides enriched responder data for a single incident.  Example metrics include Time to Respond, Responder Type, and Response Status. See metric definitions below.  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incident responses appear in the Analytics API. Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param id [String] The ID of the resource.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsIncidentResponsesByIdRequest] :get_analytics_incident_responses_by_id_request Parameters to apply to the dataset.
    # @return [Array<(GetAnalyticsIncidentResponsesById200Response, Integer, Hash)>] GetAnalyticsIncidentResponsesById200Response data, response status code and response headers
    def get_analytics_incident_responses_by_id_with_http_info(id, accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_incident_responses_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AnalyticsApi.get_analytics_incident_responses_by_id"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_incident_responses_by_id"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_incident_responses_by_id"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/raw/incidents/{id}/responses'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_analytics_incident_responses_by_id_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsIncidentResponsesById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_incident_responses_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_incident_responses_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get raw data - multiple incidents
    # Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  <!-- theme: info --> > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsIncidentsRequest] :get_analytics_incidents_request Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsIncidents200Response]
    def get_analytics_incidents(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_incidents_with_http_info(accept, content_type, opts)
      data
    end

    # Get raw data - multiple incidents
    # Provides enriched incident data and metrics for multiple incidents.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  &lt;!-- theme: info --&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsIncidentsRequest] :get_analytics_incidents_request Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsIncidents200Response, Integer, Hash)>] GetAnalyticsIncidents200Response data, response status code and response headers
    def get_analytics_incidents_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/raw/incidents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_analytics_incidents_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get raw data - single incident
    # Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param id [String] The ID of the resource.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsRawIncident]
    def get_analytics_incidents_by_id(id, accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_incidents_by_id_with_http_info(id, accept, content_type, opts)
      data
    end

    # Get raw data - single incident
    # Provides enriched incident data and metrics for a single incident.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param id [String] The ID of the resource.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsRawIncident, Integer, Hash)>] AnalyticsRawIncident data, response status code and response headers
    def get_analytics_incidents_by_id_with_http_info(id, accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_incidents_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AnalyticsApi.get_analytics_incidents_by_id"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_incidents_by_id"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_incidents_by_id"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/raw/incidents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalyticsRawIncident'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_incidents_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_incidents_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated incident data
    # Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  <!-- theme: info --> > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsAll200Response]
    def get_analytics_metrics_incidents_all(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_all_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated incident data
    # Provides aggregated enriched metrics for incidents.  The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.  &lt;!-- theme: info --&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsAll200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsAll200Response data, response status code and response headers
    def get_analytics_metrics_incidents_all_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_all ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_all"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_all"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsAll200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated escalation policy data
    # Provides aggregated metrics for incidents aggregated into units of time by escalation policy.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#escalation-policy-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsEscalationPolicy200Response]
    def get_analytics_metrics_incidents_escalation_policy(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_escalation_policy_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated escalation policy data
    # Provides aggregated metrics for incidents aggregated into units of time by escalation policy.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#escalation-policy-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsEscalationPolicy200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsEscalationPolicy200Response data, response status code and response headers
    def get_analytics_metrics_incidents_escalation_policy_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_escalation_policy ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_escalation_policy"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_escalation_policy"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/escalation_policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsEscalationPolicy200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_escalation_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_escalation_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated metrics for all escalation policies
    # Provides aggregated metrics across all escalation policies.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#escalation-policy-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsEscalationPolicy200Response]
    def get_analytics_metrics_incidents_escalation_policy_all(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_escalation_policy_all_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated metrics for all escalation policies
    # Provides aggregated metrics across all escalation policies.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#escalation-policy-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsEscalationPolicy200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsEscalationPolicy200Response data, response status code and response headers
    def get_analytics_metrics_incidents_escalation_policy_all_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_escalation_policy_all ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_escalation_policy_all"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_escalation_policy_all"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/escalation_policies/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsEscalationPolicy200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_escalation_policy_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_escalation_policy_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated service data
    # Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#services-list). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a 'range_start' timestamp.  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsService200Response]
    def get_analytics_metrics_incidents_service(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_service_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated service data
    # Provides aggregated metrics for incidents aggregated into units of time by service.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#services-list). Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#39;range_start&#39; timestamp.  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsService200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsService200Response data, response status code and response headers
    def get_analytics_metrics_incidents_service_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated metrics for all services
    # Provides aggregated metrics across all services.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#services-list).  <!-- theme: info --> > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsService200Response]
    def get_analytics_metrics_incidents_service_all(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_service_all_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated metrics for all services
    # Provides aggregated metrics across all services.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#services-list).  &lt;!-- theme: info --&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsService200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsService200Response data, response status code and response headers
    def get_analytics_metrics_incidents_service_all_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_service_all ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_service_all"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_service_all"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/services/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_service_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_service_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated team data
    # Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#teams-list). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a 'range_start' timestamp.  <!-- theme: info --> > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsService200Response]
    def get_analytics_metrics_incidents_team(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_team_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated team data
    # Provides aggregated metrics for incidents aggregated into units of time by team.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#teams-list). Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a &#39;range_start&#39; timestamp.  &lt;!-- theme: info --&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsService200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsService200Response data, response status code and response headers
    def get_analytics_metrics_incidents_team_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_team ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_team"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_team"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated metrics for all teams
    # Provides aggregated metrics across all teams.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#teams-list).  <!-- theme: info --> > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsIncidentsService200Response]
    def get_analytics_metrics_incidents_team_all(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_incidents_team_all_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated metrics for all teams
    # Provides aggregated metrics across all teams.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#teams-list).  &lt;!-- theme: info --&gt; &gt; A &#x60;team_ids&#x60; or &#x60;service_ids&#x60; filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement. &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsModel] :analytics_model Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsIncidentsService200Response, Integer, Hash)>] GetAnalyticsMetricsIncidentsService200Response data, response status code and response headers
    def get_analytics_metrics_incidents_team_all_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_incidents_team_all ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_incidents_team_all"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_incidents_team_all"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/incidents/teams/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsIncidentsService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_incidents_team_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_incidents_team_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregated metrics for all responders
    # Provides aggregated incident metrics for all selected responders.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#responders-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsResponderFilter] :analytics_responder_filter Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsRespondersAll200Response]
    def get_analytics_metrics_responders_all(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_responders_all_with_http_info(accept, content_type, opts)
      data
    end

    # Get aggregated metrics for all responders
    # Provides aggregated incident metrics for all selected responders.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#responders-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsResponderFilter] :analytics_responder_filter Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsRespondersAll200Response, Integer, Hash)>] GetAnalyticsMetricsRespondersAll200Response data, response status code and response headers
    def get_analytics_metrics_responders_all_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_responders_all ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_responders_all"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_responders_all"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/responders/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_responder_filter'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsRespondersAll200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_responders_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_responders_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get responder data aggregated by team
    # Provides incident metrics aggregated by responder.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#responders-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsResponderFilter] :analytics_responder_filter Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsMetricsRespondersAll200Response]
    def get_analytics_metrics_responders_team(accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_metrics_responders_team_with_http_info(accept, content_type, opts)
      data
    end

    # Get responder data aggregated by team
    # Provides incident metrics aggregated by responder.  Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#responders-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AnalyticsResponderFilter] :analytics_responder_filter Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsMetricsRespondersAll200Response, Integer, Hash)>] GetAnalyticsMetricsRespondersAll200Response data, response status code and response headers
    def get_analytics_metrics_responders_team_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_metrics_responders_team ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_metrics_responders_team"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_metrics_responders_team"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/metrics/responders/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'analytics_responder_filter'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsMetricsRespondersAll200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_metrics_responders_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_metrics_responders_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get raw incidents for a single responder_id
    # Provides enriched incident data and metrics for a specific responder.  Example metrics include Mean Seconds to Resolve, Mean Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  <!-- theme: info --> > **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: `analytics.read` 
    # @param responder_id [String] The ID of the responder.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsResponderIncidentsRequest] :get_analytics_responder_incidents_request Parameters and filters to apply to the dataset.
    # @return [GetAnalyticsResponderIncidents200Response]
    def get_analytics_responder_incidents(responder_id, accept, content_type, opts = {})
      data, _status_code, _headers = get_analytics_responder_incidents_with_http_info(responder_id, accept, content_type, opts)
      data
    end

    # Get raw incidents for a single responder_id
    # Provides enriched incident data and metrics for a specific responder.  Example metrics include Mean Seconds to Resolve, Mean Seconds to Engage, Snoozed Seconds, and Sleep Hour Interruptions. Metric definitions can be found in our [Knowledge Base](https://support.pagerduty.com/docs/insights#incidents-list).  &lt;!-- theme: info --&gt; &gt; **Note:** Analytics data is updated once per day. It takes up to 24 hours before new incidents appear in the Analytics API.  Scoped OAuth requires: &#x60;analytics.read&#x60; 
    # @param responder_id [String] The ID of the responder.
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAnalyticsResponderIncidentsRequest] :get_analytics_responder_incidents_request Parameters and filters to apply to the dataset.
    # @return [Array<(GetAnalyticsResponderIncidents200Response, Integer, Hash)>] GetAnalyticsResponderIncidents200Response data, response status code and response headers
    def get_analytics_responder_incidents_with_http_info(responder_id, accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_analytics_responder_incidents ...'
      end
      # verify the required parameter 'responder_id' is set
      if @api_client.config.client_side_validation && responder_id.nil?
        fail ArgumentError, "Missing the required parameter 'responder_id' when calling AnalyticsApi.get_analytics_responder_incidents"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AnalyticsApi.get_analytics_responder_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsApi.get_analytics_responder_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/analytics/raw/responders/{responder_id}/incidents'.sub('{' + 'responder_id' + '}', CGI.escape(responder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_analytics_responder_incidents_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsResponderIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_analytics_responder_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_responder_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
