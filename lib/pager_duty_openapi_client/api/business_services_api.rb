=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module PagerDutyOpenapiClient
  class BusinessServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Business Service
    # Create a new Business Service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  There is a limit of 5,000 business services per account. If the limit is reached, the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceRequest] :create_business_service_request 
    # @return [CreateBusinessService200Response]
    def create_business_service(accept, content_type, opts = {})
      data, _status_code, _headers = create_business_service_with_http_info(accept, content_type, opts)
      data
    end

    # Create a Business Service
    # Create a new Business Service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  There is a limit of 5,000 business services per account. If the limit is reached, the API will respond with an error.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceRequest] :create_business_service_request 
    # @return [Array<(CreateBusinessService200Response, Integer, Hash)>] CreateBusinessService200Response data, response status code and response headers
    def create_business_service_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.create_business_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.create_business_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling BusinessServicesApi.create_business_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/business_services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_business_service_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.create_business_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#create_business_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Business Service Account Subscription
    # Subscribe your Account to a Business Service.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [CreateBusinessServiceAccountSubscription200Response]
    def create_business_service_account_subscription(accept, id, opts = {})
      data, _status_code, _headers = create_business_service_account_subscription_with_http_info(accept, id, opts)
      data
    end

    # Create Business Service Account Subscription
    # Subscribe your Account to a Business Service.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBusinessServiceAccountSubscription200Response, Integer, Hash)>] CreateBusinessServiceAccountSubscription200Response data, response status code and response headers
    def create_business_service_account_subscription_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.create_business_service_account_subscription ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.create_business_service_account_subscription"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.create_business_service_account_subscription"
      end
      # resource path
      local_var_path = '/business_services/{id}/account_subscription'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessServiceAccountSubscription200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.create_business_service_account_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#create_business_service_account_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Business Service Subscribers
    # Subscribe the given entities to the given Business Service.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to subscribe.
    # @return [CreateBusinessServiceNotificationSubscribers200Response]
    def create_business_service_notification_subscribers(accept, id, opts = {})
      data, _status_code, _headers = create_business_service_notification_subscribers_with_http_info(accept, id, opts)
      data
    end

    # Create Business Service Subscribers
    # Subscribe the given entities to the given Business Service.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to subscribe.
    # @return [Array<(CreateBusinessServiceNotificationSubscribers200Response, Integer, Hash)>] CreateBusinessServiceNotificationSubscribers200Response data, response status code and response headers
    def create_business_service_notification_subscribers_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.create_business_service_notification_subscribers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.create_business_service_notification_subscribers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.create_business_service_notification_subscribers"
      end
      # resource path
      local_var_path = '/business_services/{id}/subscribers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_business_service_notification_subscribers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessServiceNotificationSubscribers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.create_business_service_notification_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#create_business_service_notification_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Business Service
    # Delete an existing Business Service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_business_service(accept, content_type, id, opts = {})
      delete_business_service_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete a Business Service
    # Delete an existing Business Service.  Once the service is deleted, it will not be accessible from the web UI and new incidents won&#39;t be able to be created for this service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_business_service_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.delete_business_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.delete_business_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling BusinessServicesApi.delete_business_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.delete_business_service"
      end
      # resource path
      local_var_path = '/business_services/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.delete_business_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#delete_business_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the account-level priority threshold for Business Service impact
    # Clears the Priority Threshold for the account.  If the priority threshold is cleared, any Incident with a Priority set will be able to impact Business Services. Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_business_service_priority_thresholds(accept, x_early_access, opts = {})
      delete_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts)
      nil
    end

    # Deletes the account-level priority threshold for Business Service impact
    # Clears the Priority Threshold for the account.  If the priority threshold is cleared, any Incident with a Priority set will be able to impact Business Services. Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.delete_business_service_priority_thresholds ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.delete_business_service_priority_thresholds"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.delete_business_service_priority_thresholds"
      end
      # resource path
      local_var_path = '/business_services/priority_thresholds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.delete_business_service_priority_thresholds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#delete_business_service_priority_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Business Service
    # Get details about an existing Business Service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [CreateBusinessService200Response]
    def get_business_service(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_business_service_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get a Business Service
    # Get details about an existing Business Service.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBusinessService200Response, Integer, Hash)>] CreateBusinessService200Response data, response status code and response headers
    def get_business_service_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling BusinessServicesApi.get_business_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.get_business_service"
      end
      # resource path
      local_var_path = '/business_services/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Business Services sorted by impacted status
    # Retrieve a list top-level Business Services sorted by highest Impact with `status` included. When called without the `ids[]` parameter, this endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific set of Business Services, use the `ids[]` parameter. Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_fields Provides access to additional fields such as highest priority per business service and total impacted count
    # @option opts [String] :ids The IDs of the resources.
    # @return [GetBusinessServiceSupportingServiceImpacts200Response]
    def get_business_service_impacts(accept, x_early_access, opts = {})
      data, _status_code, _headers = get_business_service_impacts_with_http_info(accept, x_early_access, opts)
      data
    end

    # List Business Services sorted by impacted status
    # Retrieve a list top-level Business Services sorted by highest Impact with &#x60;status&#x60; included. When called without the &#x60;ids[]&#x60; parameter, this endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific set of Business Services, use the &#x60;ids[]&#x60; parameter. Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_fields Provides access to additional fields such as highest priority per business service and total impacted count
    # @option opts [String] :ids The IDs of the resources.
    # @return [Array<(GetBusinessServiceSupportingServiceImpacts200Response, Integer, Hash)>] GetBusinessServiceSupportingServiceImpacts200Response data, response status code and response headers
    def get_business_service_impacts_with_http_info(accept, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service_impacts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service_impacts"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.get_business_service_impacts"
      end
      allowable_values = ["services.highest_impacting_priority", "total_impacted_count"]
      if @api_client.config.client_side_validation && opts[:'additional_fields'] && !allowable_values.include?(opts[:'additional_fields'])
        fail ArgumentError, "invalid value for \"additional_fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/business_services/impacts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'additional_fields[]'] = opts[:'additional_fields'] if !opts[:'additional_fields'].nil?
      query_params[:'ids[]'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessServiceSupportingServiceImpacts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service_impacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service_impacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the global priority threshold for a Business Service to be considered impacted by an Incident
    # Retrieves the priority threshold information for an account.  Currently, there is a `global_threshold` that can be set for the account.  Incidents that have a priority meeting or exceeding this threshold will be considered impacting on any Business Service that depends on the Service to which the Incident belongs. Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [GetBusinessServicePriorityThresholds200Response]
    def get_business_service_priority_thresholds(accept, x_early_access, opts = {})
      data, _status_code, _headers = get_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts)
      data
    end

    # Get the global priority threshold for a Business Service to be considered impacted by an Incident
    # Retrieves the priority threshold information for an account.  Currently, there is a &#x60;global_threshold&#x60; that can be set for the account.  Incidents that have a priority meeting or exceeding this threshold will be considered impacting on any Business Service that depends on the Service to which the Incident belongs. Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBusinessServicePriorityThresholds200Response, Integer, Hash)>] GetBusinessServicePriorityThresholds200Response data, response status code and response headers
    def get_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service_priority_thresholds ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service_priority_thresholds"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.get_business_service_priority_thresholds"
      end
      # resource path
      local_var_path = '/business_services/priority_thresholds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessServicePriorityThresholds200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service_priority_thresholds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service_priority_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Business Service Subscribers
    # Retrieve a list of Notification Subscribers on the Business Service.  <!-- theme: warning --> > Users must be added through `POST /business_services/{id}/subscribers` to be returned from this endpoint. Scoped OAuth requires: `subscribers.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetBusinessServiceSubscribers200Response]
    def get_business_service_subscribers(accept, id, opts = {})
      data, _status_code, _headers = get_business_service_subscribers_with_http_info(accept, id, opts)
      data
    end

    # List Business Service Subscribers
    # Retrieve a list of Notification Subscribers on the Business Service.  &lt;!-- theme: warning --&gt; &gt; Users must be added through &#x60;POST /business_services/{id}/subscribers&#x60; to be returned from this endpoint. Scoped OAuth requires: &#x60;subscribers.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBusinessServiceSubscribers200Response, Integer, Hash)>] GetBusinessServiceSubscribers200Response data, response status code and response headers
    def get_business_service_subscribers_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service_subscribers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service_subscribers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.get_business_service_subscribers"
      end
      # resource path
      local_var_path = '/business_services/{id}/subscribers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessServiceSubscribers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the supporting Business Services for the given Business Service Id, sorted by impacted status.
    # Retrieve of Business Services that support the given Business Service sorted by highest Impact with `status` included. This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific set of Business Services, use the `ids[]` parameter on the `/business_services/impacts` endpoint. Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_fields Provides access to additional fields such as highest priority per business service and total impacted count
    # @option opts [String] :ids The IDs of the resources.
    # @return [GetBusinessServiceSupportingServiceImpacts200Response]
    def get_business_service_supporting_service_impacts(accept, id, x_early_access, opts = {})
      data, _status_code, _headers = get_business_service_supporting_service_impacts_with_http_info(accept, id, x_early_access, opts)
      data
    end

    # List the supporting Business Services for the given Business Service Id, sorted by impacted status.
    # Retrieve of Business Services that support the given Business Service sorted by highest Impact with &#x60;status&#x60; included. This endpoint does not return an exhaustive list of Business Services but rather provides access to the most impacted up to the limit of 200.  The returned Business Services are sorted first by Impact, secondarily by most recently impacted, and finally by name.  To get impact information about a specific set of Business Services, use the &#x60;ids[]&#x60; parameter on the &#x60;/business_services/impacts&#x60; endpoint. Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_fields Provides access to additional fields such as highest priority per business service and total impacted count
    # @option opts [String] :ids The IDs of the resources.
    # @return [Array<(GetBusinessServiceSupportingServiceImpacts200Response, Integer, Hash)>] GetBusinessServiceSupportingServiceImpacts200Response data, response status code and response headers
    def get_business_service_supporting_service_impacts_with_http_info(accept, id, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service_supporting_service_impacts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service_supporting_service_impacts"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.get_business_service_supporting_service_impacts"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.get_business_service_supporting_service_impacts"
      end
      allowable_values = ["services.highest_impacting_priority", "total_impacted_count"]
      if @api_client.config.client_side_validation && opts[:'additional_fields'] && !allowable_values.include?(opts[:'additional_fields'])
        fail ArgumentError, "invalid value for \"additional_fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/business_services/{id}/supporting_services/impacts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'additional_fields[]'] = opts[:'additional_fields'] if !opts[:'additional_fields'].nil?
      query_params[:'ids[]'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessServiceSupportingServiceImpacts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service_supporting_service_impacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service_supporting_service_impacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Impactors affecting Business Services
    # Retrieve a list of Impactors for the top-level Business Services on the account. Impactors are currently limited to Incidents.  This endpoint does not return an exhaustive list of Impactors but rather provides access to the highest priority Impactors for the Business Services in question up to the limit of 200.  To get Impactors for a specific set of Business Services, use the `ids[]` parameter.  The returned Impactors are sorted first by priority and secondarily by their creation date. Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids The IDs of the resources.
    # @return [GetBusinessServiceTopLevelImpactors200Response]
    def get_business_service_top_level_impactors(accept, x_early_access, opts = {})
      data, _status_code, _headers = get_business_service_top_level_impactors_with_http_info(accept, x_early_access, opts)
      data
    end

    # List Impactors affecting Business Services
    # Retrieve a list of Impactors for the top-level Business Services on the account. Impactors are currently limited to Incidents.  This endpoint does not return an exhaustive list of Impactors but rather provides access to the highest priority Impactors for the Business Services in question up to the limit of 200.  To get Impactors for a specific set of Business Services, use the &#x60;ids[]&#x60; parameter.  The returned Impactors are sorted first by priority and secondarily by their creation date. Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids The IDs of the resources.
    # @return [Array<(GetBusinessServiceTopLevelImpactors200Response, Integer, Hash)>] GetBusinessServiceTopLevelImpactors200Response data, response status code and response headers
    def get_business_service_top_level_impactors_with_http_info(accept, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.get_business_service_top_level_impactors ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.get_business_service_top_level_impactors"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.get_business_service_top_level_impactors"
      end
      # resource path
      local_var_path = '/business_services/impactors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids[]'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBusinessServiceTopLevelImpactors200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.get_business_service_top_level_impactors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#get_business_service_top_level_impactors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Business Services
    # List existing Business Services.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @return [ListBusinessServices200Response]
    def list_business_services(accept, content_type, opts = {})
      data, _status_code, _headers = list_business_services_with_http_info(accept, content_type, opts)
      data
    end

    # List Business Services
    # List existing Business Services.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @return [Array<(ListBusinessServices200Response, Integer, Hash)>] ListBusinessServices200Response data, response status code and response headers
    def list_business_services_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.list_business_services ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.list_business_services"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling BusinessServicesApi.list_business_services"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/business_services'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListBusinessServices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.list_business_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#list_business_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the Account-level priority threshold for Business Service impact.
    # Set the Account-level priority threshold for Business Service. Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [PutBusinessServicePriorityThresholdsRequest] :put_business_service_priority_thresholds_request Set the &#x60;id&#x60; and &#x60;order&#x60; of the global Priority Threshold. These values can be obtained by calling the &#x60;/priorities&#x60; endpoint.  Once set, Incidents must be at or above the specified level in order to impact Business Services.  An exception to this rule is if the Incident has been added to the incident directly using the &#x60;PUT /incidents/{id}/business_services/{business_service_id}/impacts&#x60; endpoint.
    # @return [PutBusinessServicePriorityThresholds200Response]
    def put_business_service_priority_thresholds(accept, x_early_access, opts = {})
      data, _status_code, _headers = put_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts)
      data
    end

    # Set the Account-level priority threshold for Business Service impact.
    # Set the Account-level priority threshold for Business Service. Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [PutBusinessServicePriorityThresholdsRequest] :put_business_service_priority_thresholds_request Set the &#x60;id&#x60; and &#x60;order&#x60; of the global Priority Threshold. These values can be obtained by calling the &#x60;/priorities&#x60; endpoint.  Once set, Incidents must be at or above the specified level in order to impact Business Services.  An exception to this rule is if the Incident has been added to the incident directly using the &#x60;PUT /incidents/{id}/business_services/{business_service_id}/impacts&#x60; endpoint.
    # @return [Array<(PutBusinessServicePriorityThresholds200Response, Integer, Hash)>] PutBusinessServicePriorityThresholds200Response data, response status code and response headers
    def put_business_service_priority_thresholds_with_http_info(accept, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.put_business_service_priority_thresholds ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.put_business_service_priority_thresholds"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling BusinessServicesApi.put_business_service_priority_thresholds"
      end
      # resource path
      local_var_path = '/business_services/priority_thresholds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_business_service_priority_thresholds_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutBusinessServicePriorityThresholds200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.put_business_service_priority_thresholds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#put_business_service_priority_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Business Service Account Subscription
    # Unsubscribe your Account from a Business Service.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_business_service_account_subscription(accept, id, opts = {})
      remove_business_service_account_subscription_with_http_info(accept, id, opts)
      nil
    end

    # Delete Business Service Account Subscription
    # Unsubscribe your Account from a Business Service.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_business_service_account_subscription_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.remove_business_service_account_subscription ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.remove_business_service_account_subscription"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.remove_business_service_account_subscription"
      end
      # resource path
      local_var_path = '/business_services/{id}/account_subscription'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.remove_business_service_account_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#remove_business_service_account_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Business Service Subscribers
    # Unsubscribes the matching Subscribers from a Business Service.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to unsubscribe.
    # @return [RemoveBusinessServiceNotificationSubscriber200Response]
    def remove_business_service_notification_subscriber(accept, id, opts = {})
      data, _status_code, _headers = remove_business_service_notification_subscriber_with_http_info(accept, id, opts)
      data
    end

    # Remove Business Service Subscribers
    # Unsubscribes the matching Subscribers from a Business Service.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to unsubscribe.
    # @return [Array<(RemoveBusinessServiceNotificationSubscriber200Response, Integer, Hash)>] RemoveBusinessServiceNotificationSubscriber200Response data, response status code and response headers
    def remove_business_service_notification_subscriber_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.remove_business_service_notification_subscriber ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.remove_business_service_notification_subscriber"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.remove_business_service_notification_subscriber"
      end
      # resource path
      local_var_path = '/business_services/{id}/unsubscribe'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_business_service_notification_subscribers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RemoveBusinessServiceNotificationSubscriber200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.remove_business_service_notification_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#remove_business_service_notification_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Business Service
    # Update an existing Business Service. NOTE that this endpoint also accepts the PATCH verb.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBusinessServiceRequest] :update_business_service_request 
    # @return [CreateBusinessService200Response]
    def update_business_service(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_business_service_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update a Business Service
    # Update an existing Business Service. NOTE that this endpoint also accepts the PATCH verb.  Business services model capabilities that span multiple technical services and that may be owned by several different teams.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#business-services)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateBusinessServiceRequest] :update_business_service_request 
    # @return [Array<(CreateBusinessService200Response, Integer, Hash)>] CreateBusinessService200Response data, response status code and response headers
    def update_business_service_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessServicesApi.update_business_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling BusinessServicesApi.update_business_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling BusinessServicesApi.update_business_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BusinessServicesApi.update_business_service"
      end
      # resource path
      local_var_path = '/business_services/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_business_service_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BusinessServicesApi.update_business_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessServicesApi#update_business_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
