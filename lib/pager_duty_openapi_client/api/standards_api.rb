=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module PagerDutyOpenapiClient
  class StandardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List a resource's standards scores
    # List standards applied to a specific resource  Scoped OAuth requires: `standards.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] Id of the resource to apply the standards.
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [StandardApplied]
    def list_resource_standards(accept, id, resource_type, opts = {})
      data, _status_code, _headers = list_resource_standards_with_http_info(accept, id, resource_type, opts)
      data
    end

    # List a resource&#39;s standards scores
    # List standards applied to a specific resource  Scoped OAuth requires: &#x60;standards.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] Id of the resource to apply the standards.
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardApplied, Integer, Hash)>] StandardApplied data, response status code and response headers
    def list_resource_standards_with_http_info(accept, id, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StandardsApi.list_resource_standards ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StandardsApi.list_resource_standards"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StandardsApi.list_resource_standards"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling StandardsApi.list_resource_standards"
      end
      # verify enum value
      allowable_values = ["technical_services"]
      if @api_client.config.client_side_validation && !allowable_values.include?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/standards/scores/{resource_type}/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'resource_type' + '}', CGI.escape(resource_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StandardApplied'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StandardsApi.list_resource_standards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardsApi#list_resource_standards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List resources' standards scores
    # List standards applied to a set of resources  Scoped OAuth requires: `standards.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param ids [Array<String>] Ids of resources to apply the standards. Maximum of 100 items
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [ListResourceStandardsManyServices200Response]
    def list_resource_standards_many_services(accept, ids, resource_type, opts = {})
      data, _status_code, _headers = list_resource_standards_many_services_with_http_info(accept, ids, resource_type, opts)
      data
    end

    # List resources&#39; standards scores
    # List standards applied to a set of resources  Scoped OAuth requires: &#x60;standards.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param ids [Array<String>] Ids of resources to apply the standards. Maximum of 100 items
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListResourceStandardsManyServices200Response, Integer, Hash)>] ListResourceStandardsManyServices200Response data, response status code and response headers
    def list_resource_standards_many_services_with_http_info(accept, ids, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StandardsApi.list_resource_standards_many_services ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StandardsApi.list_resource_standards_many_services"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling StandardsApi.list_resource_standards_many_services"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling StandardsApi.list_resource_standards_many_services"
      end
      # verify enum value
      allowable_values = ["technical_services"]
      if @api_client.config.client_side_validation && !allowable_values.include?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/standards/scores/{resource_type}'.sub('{' + 'resource_type' + '}', CGI.escape(resource_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListResourceStandardsManyServices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StandardsApi.list_resource_standards_many_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardsApi#list_resource_standards_many_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Standards
    # Get all standards of an account.  Scoped OAuth requires: `standards.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @option opts [String] :resource_type 
    # @return [ListStandards200Response]
    def list_standards(accept, opts = {})
      data, _status_code, _headers = list_standards_with_http_info(accept, opts)
      data
    end

    # List Standards
    # Get all standards of an account.  Scoped OAuth requires: &#x60;standards.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @option opts [String] :resource_type 
    # @return [Array<(ListStandards200Response, Integer, Hash)>] ListStandards200Response data, response status code and response headers
    def list_standards_with_http_info(accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StandardsApi.list_standards ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StandardsApi.list_standards"
      end
      allowable_values = ["technical_service"]
      if @api_client.config.client_side_validation && opts[:'resource_type'] && !allowable_values.include?(opts[:'resource_type'])
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/standards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStandards200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StandardsApi.list_standards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardsApi#list_standards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a standard
    # Updates a standard  Scoped OAuth requires: `standards.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] Id of the standard
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStandardRequest] :update_standard_request 
    # @return [Standard]
    def update_standard(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_standard_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update a standard
    # Updates a standard  Scoped OAuth requires: &#x60;standards.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] Id of the standard
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStandardRequest] :update_standard_request 
    # @return [Array<(Standard, Integer, Hash)>] Standard data, response status code and response headers
    def update_standard_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StandardsApi.update_standard ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StandardsApi.update_standard"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling StandardsApi.update_standard"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StandardsApi.update_standard"
      end
      # resource path
      local_var_path = '/standards/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_standard_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Standard'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StandardsApi.update_standard",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardsApi#update_standard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
