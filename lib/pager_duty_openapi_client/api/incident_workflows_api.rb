=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module PagerDutyOpenapiClient
  class IncidentWorkflowsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Associate a Trigger and Service
    # Associate a Service with an existing Incident Workflow Trigger  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [AssociateServiceToIncidentWorkflowTriggerRequest] :associate_service_to_incident_workflow_trigger_request 
    # @return [CreateIncidentWorkflowTriggerRequest]
    def associate_service_to_incident_workflow_trigger(accept, content_type, id, opts = {})
      data, _status_code, _headers = associate_service_to_incident_workflow_trigger_with_http_info(accept, content_type, id, opts)
      data
    end

    # Associate a Trigger and Service
    # Associate a Service with an existing Incident Workflow Trigger  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [AssociateServiceToIncidentWorkflowTriggerRequest] :associate_service_to_incident_workflow_trigger_request 
    # @return [Array<(CreateIncidentWorkflowTriggerRequest, Integer, Hash)>] CreateIncidentWorkflowTriggerRequest data, response status code and response headers
    def associate_service_to_incident_workflow_trigger_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.associate_service_to_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.associate_service_to_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.associate_service_to_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.associate_service_to_incident_workflow_trigger"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers/{id}/services'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'associate_service_to_incident_workflow_trigger_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentWorkflowTriggerRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.associate_service_to_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#associate_service_to_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start an Incident Workflow Instance
    # Start an Instance of an Incident Workflow. Sometimes referred to as \"triggering a workflow on an incident.\"  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows:instances.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowInstanceRequest] :create_incident_workflow_instance_request 
    # @return [CreateIncidentWorkflowInstance201Response]
    def create_incident_workflow_instance(accept, content_type, id, opts = {})
      data, _status_code, _headers = create_incident_workflow_instance_with_http_info(accept, content_type, id, opts)
      data
    end

    # Start an Incident Workflow Instance
    # Start an Instance of an Incident Workflow. Sometimes referred to as \&quot;triggering a workflow on an incident.\&quot;  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows:instances.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowInstanceRequest] :create_incident_workflow_instance_request 
    # @return [Array<(CreateIncidentWorkflowInstance201Response, Integer, Hash)>] CreateIncidentWorkflowInstance201Response data, response status code and response headers
    def create_incident_workflow_instance_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.create_incident_workflow_instance ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.create_incident_workflow_instance"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.create_incident_workflow_instance"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.create_incident_workflow_instance"
      end
      # resource path
      local_var_path = '/incident_workflows/{id}/instances'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_workflow_instance_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentWorkflowInstance201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.create_incident_workflow_instance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#create_incident_workflow_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Trigger
    # Create new Incident Workflow Trigger  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowTriggerRequest] :create_incident_workflow_trigger_request 
    # @return [CreateIncidentWorkflowTriggerRequest]
    def create_incident_workflow_trigger(accept, content_type, opts = {})
      data, _status_code, _headers = create_incident_workflow_trigger_with_http_info(accept, content_type, opts)
      data
    end

    # Create a Trigger
    # Create new Incident Workflow Trigger  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowTriggerRequest] :create_incident_workflow_trigger_request 
    # @return [Array<(CreateIncidentWorkflowTriggerRequest, Integer, Hash)>] CreateIncidentWorkflowTriggerRequest data, response status code and response headers
    def create_incident_workflow_trigger_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.create_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.create_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.create_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_workflow_trigger_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentWorkflowTriggerRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.create_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#create_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Incident Workflow
    # Delete an existing Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_incident_workflow(accept, content_type, id, opts = {})
      delete_incident_workflow_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete an Incident Workflow
    # Delete an existing Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_incident_workflow_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.delete_incident_workflow ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.delete_incident_workflow"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.delete_incident_workflow"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.delete_incident_workflow"
      end
      # resource path
      local_var_path = '/incident_workflows/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.delete_incident_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#delete_incident_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Trigger
    # Delete an existing Incident Workflow Trigger  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_incident_workflow_trigger(accept, content_type, id, opts = {})
      delete_incident_workflow_trigger_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete a Trigger
    # Delete an existing Incident Workflow Trigger  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_incident_workflow_trigger_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.delete_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.delete_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.delete_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.delete_incident_workflow_trigger"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.delete_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#delete_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dissociate a Trigger and Service
    # Remove a an existing Service from an Incident Workflow Trigger  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param trigger_id [String] Identifier for the Trigger
    # @param service_id [String] Identifier for the Service
    # @param [Hash] opts the optional parameters
    # @return [CreateIncidentWorkflowTriggerRequest]
    def delete_service_from_incident_workflow_trigger(accept, content_type, trigger_id, service_id, opts = {})
      data, _status_code, _headers = delete_service_from_incident_workflow_trigger_with_http_info(accept, content_type, trigger_id, service_id, opts)
      data
    end

    # Dissociate a Trigger and Service
    # Remove a an existing Service from an Incident Workflow Trigger  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param trigger_id [String] Identifier for the Trigger
    # @param service_id [String] Identifier for the Service
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateIncidentWorkflowTriggerRequest, Integer, Hash)>] CreateIncidentWorkflowTriggerRequest data, response status code and response headers
    def delete_service_from_incident_workflow_trigger_with_http_info(accept, content_type, trigger_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'trigger_id' is set
      if @api_client.config.client_side_validation && trigger_id.nil?
        fail ArgumentError, "Missing the required parameter 'trigger_id' when calling IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers/{trigger_id}/services/{service_id}'.sub('{' + 'trigger_id' + '}', CGI.escape(trigger_id.to_s)).sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentWorkflowTriggerRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.delete_service_from_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#delete_service_from_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Incident Workflow
    # Get an existing Incident Workflow An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [PostIncidentWorkflowRequest]
    def get_incident_workflow(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_incident_workflow_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Incident Workflow
    # Get an existing Incident Workflow An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostIncidentWorkflowRequest, Integer, Hash)>] PostIncidentWorkflowRequest data, response status code and response headers
    def get_incident_workflow_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.get_incident_workflow ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.get_incident_workflow"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.get_incident_workflow"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.get_incident_workflow"
      end
      # resource path
      local_var_path = '/incident_workflows/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostIncidentWorkflowRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.get_incident_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#get_incident_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Action
    # Get an Incident Workflow Action  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentWorkflowAction200Response]
    def get_incident_workflow_action(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_incident_workflow_action_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Action
    # Get an Incident Workflow Action  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentWorkflowAction200Response, Integer, Hash)>] GetIncidentWorkflowAction200Response data, response status code and response headers
    def get_incident_workflow_action_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.get_incident_workflow_action ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.get_incident_workflow_action"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.get_incident_workflow_action"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.get_incident_workflow_action"
      end
      # resource path
      local_var_path = '/incident_workflows/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentWorkflowAction200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.get_incident_workflow_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#get_incident_workflow_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Trigger
    # Retrieve an existing Incident Workflows Trigger  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentWorkflowTrigger200Response]
    def get_incident_workflow_trigger(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_incident_workflow_trigger_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get a Trigger
    # Retrieve an existing Incident Workflows Trigger  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentWorkflowTrigger200Response, Integer, Hash)>] GetIncidentWorkflowTrigger200Response data, response status code and response headers
    def get_incident_workflow_trigger_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.get_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.get_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.get_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.get_incident_workflow_trigger"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentWorkflowTrigger200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.get_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#get_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Actions
    # List Incident Workflow Actions  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :keyword If provided, only show actions tagged with the specified keyword
    # @return [ListIncidentWorkflowActions200Response]
    def list_incident_workflow_actions(accept, content_type, opts = {})
      data, _status_code, _headers = list_incident_workflow_actions_with_http_info(accept, content_type, opts)
      data
    end

    # List Actions
    # List Incident Workflow Actions  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :keyword If provided, only show actions tagged with the specified keyword
    # @return [Array<(ListIncidentWorkflowActions200Response, Integer, Hash)>] ListIncidentWorkflowActions200Response data, response status code and response headers
    def list_incident_workflow_actions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.list_incident_workflow_actions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.list_incident_workflow_actions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.list_incident_workflow_actions"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incident_workflows/actions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'keyword'] = opts[:'keyword'] if !opts[:'keyword'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentWorkflowActions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.list_incident_workflow_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#list_incident_workflow_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Triggers
    # List existing Incident Workflow Triggers  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workflow_id If provided, only show triggers configured to start the given workflow. Useful for listing all services associated with the given workflow
    # @option opts [String] :incident_id If provided, only show triggers configured on the service of the given incident. Useful for finding manual triggers that are configured on the service for a specific incident. Cannot be specified if &#x60;service_id&#x60; is provided.
    # @option opts [String] :service_id If provided, only show triggers configured for incidents in the given service. Useful for listing all workflows associated with the given service. Cannot be specified if &#x60;incident_id&#x60; is provided.
    # @option opts [String] :trigger_type If provided, only show triggers of the given type. For example “manual” to search for manual triggers
    # @option opts [String] :workflow_name_contains If provided, only show triggers configured to start workflows whose name contain the provided value.
    # @option opts [String] :sort_by If provided, returns triggers sorted by the specified property.
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @return [ListIncidentWorkflowTriggers200Response]
    def list_incident_workflow_triggers(accept, content_type, opts = {})
      data, _status_code, _headers = list_incident_workflow_triggers_with_http_info(accept, content_type, opts)
      data
    end

    # List Triggers
    # List existing Incident Workflow Triggers  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workflow_id If provided, only show triggers configured to start the given workflow. Useful for listing all services associated with the given workflow
    # @option opts [String] :incident_id If provided, only show triggers configured on the service of the given incident. Useful for finding manual triggers that are configured on the service for a specific incident. Cannot be specified if &#x60;service_id&#x60; is provided.
    # @option opts [String] :service_id If provided, only show triggers configured for incidents in the given service. Useful for listing all workflows associated with the given service. Cannot be specified if &#x60;incident_id&#x60; is provided.
    # @option opts [String] :trigger_type If provided, only show triggers of the given type. For example “manual” to search for manual triggers
    # @option opts [String] :workflow_name_contains If provided, only show triggers configured to start workflows whose name contain the provided value.
    # @option opts [String] :sort_by If provided, returns triggers sorted by the specified property.
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @return [Array<(ListIncidentWorkflowTriggers200Response, Integer, Hash)>] ListIncidentWorkflowTriggers200Response data, response status code and response headers
    def list_incident_workflow_triggers_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.list_incident_workflow_triggers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.list_incident_workflow_triggers"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.list_incident_workflow_triggers"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["manual", "conditional"]
      if @api_client.config.client_side_validation && opts[:'trigger_type'] && !allowable_values.include?(opts[:'trigger_type'])
        fail ArgumentError, "invalid value for \"trigger_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["workflow_id", "workflow_id asc", "workflow_id desc", "workflow_name", "workflow_name asc", "workflow_name desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workflow_id'] = opts[:'workflow_id'] if !opts[:'workflow_id'].nil?
      query_params[:'incident_id'] = opts[:'incident_id'] if !opts[:'incident_id'].nil?
      query_params[:'service_id'] = opts[:'service_id'] if !opts[:'service_id'].nil?
      query_params[:'trigger_type'] = opts[:'trigger_type'] if !opts[:'trigger_type'].nil?
      query_params[:'workflow_name_contains'] = opts[:'workflow_name_contains'] if !opts[:'workflow_name_contains'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentWorkflowTriggers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.list_incident_workflow_triggers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#list_incident_workflow_triggers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Incident Workflows
    # List existing Incident Workflows.  This is the best method to use to list all Incident Workflows in your account. If your use case requires listing Incident Workflows associated with a particular Service, you can use the \"List Triggers\" method to find Incident Workflows configured to start for Incidents in a given Service.  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :query Filters the result, showing only the records whose name matches the query.
    # @option opts [String] :include Array of additional details to include.
    # @return [ListIncidentWorkflows200Response]
    def list_incident_workflows(accept, content_type, opts = {})
      data, _status_code, _headers = list_incident_workflows_with_http_info(accept, content_type, opts)
      data
    end

    # List Incident Workflows
    # List existing Incident Workflows.  This is the best method to use to list all Incident Workflows in your account. If your use case requires listing Incident Workflows associated with a particular Service, you can use the \&quot;List Triggers\&quot; method to find Incident Workflows configured to start for Incidents in a given Service.  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :query Filters the result, showing only the records whose name matches the query.
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(ListIncidentWorkflows200Response, Integer, Hash)>] ListIncidentWorkflows200Response data, response status code and response headers
    def list_incident_workflows_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.list_incident_workflows ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.list_incident_workflows"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.list_incident_workflows"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["steps", "team"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incident_workflows'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentWorkflows200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.list_incident_workflows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#list_incident_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Incident Workflow
    # Create a new Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostIncidentWorkflowRequest] :post_incident_workflow_request 
    # @return [PostIncidentWorkflowRequest]
    def post_incident_workflow(accept, content_type, opts = {})
      data, _status_code, _headers = post_incident_workflow_with_http_info(accept, content_type, opts)
      data
    end

    # Create an Incident Workflow
    # Create a new Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostIncidentWorkflowRequest] :post_incident_workflow_request 
    # @return [Array<(PostIncidentWorkflowRequest, Integer, Hash)>] PostIncidentWorkflowRequest data, response status code and response headers
    def post_incident_workflow_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.post_incident_workflow ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.post_incident_workflow"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.post_incident_workflow"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incident_workflows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_incident_workflow_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostIncidentWorkflowRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.post_incident_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#post_incident_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Incident Workflow
    # Update an Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [PostIncidentWorkflowRequest] :post_incident_workflow_request 
    # @return [PostIncidentWorkflowRequest]
    def put_incident_workflow(accept, content_type, id, opts = {})
      data, _status_code, _headers = put_incident_workflow_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update an Incident Workflow
    # Update an Incident Workflow  An Incident Workflow is a sequence of configurable Steps and associated Triggers that can execute automated Actions for a given Incident.  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [PostIncidentWorkflowRequest] :post_incident_workflow_request 
    # @return [Array<(PostIncidentWorkflowRequest, Integer, Hash)>] PostIncidentWorkflowRequest data, response status code and response headers
    def put_incident_workflow_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.put_incident_workflow ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.put_incident_workflow"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.put_incident_workflow"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.put_incident_workflow"
      end
      # resource path
      local_var_path = '/incident_workflows/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_incident_workflow_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostIncidentWorkflowRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.put_incident_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#put_incident_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Trigger
    # Update an existing Incident Workflow Trigger  Scoped OAuth requires: `incident_workflows.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowTriggerRequest] :create_incident_workflow_trigger_request 
    # @return [CreateIncidentWorkflowTriggerRequest]
    def update_incident_workflow_trigger(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_incident_workflow_trigger_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update a Trigger
    # Update an existing Incident Workflow Trigger  Scoped OAuth requires: &#x60;incident_workflows.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentWorkflowTriggerRequest] :create_incident_workflow_trigger_request 
    # @return [Array<(CreateIncidentWorkflowTriggerRequest, Integer, Hash)>] CreateIncidentWorkflowTriggerRequest data, response status code and response headers
    def update_incident_workflow_trigger_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentWorkflowsApi.update_incident_workflow_trigger ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentWorkflowsApi.update_incident_workflow_trigger"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentWorkflowsApi.update_incident_workflow_trigger"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentWorkflowsApi.update_incident_workflow_trigger"
      end
      # resource path
      local_var_path = '/incident_workflows/triggers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_workflow_trigger_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentWorkflowTriggerRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentWorkflowsApi.update_incident_workflow_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentWorkflowsApi#update_incident_workflow_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
