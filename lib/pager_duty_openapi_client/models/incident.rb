=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module PagerDutyOpenapiClient
  class Incident
    # The number of the incident. This is unique across your account.
    attr_accessor :incident_number

    # A succinct description of the nature, symptoms, cause, or effect of the incident.
    attr_accessor :title

    # The time the incident was first triggered.
    attr_accessor :created_at

    # The time the incident was last modified.
    attr_accessor :updated_at

    # The current status of the incident.
    attr_accessor :status

    # The incident's de-duplication key.
    attr_accessor :incident_key

    attr_accessor :service

    # List of all assignments for this incident. This list will be empty if the `Incident.status` is `resolved`. Returns a user reference for each assignment. Full user definitions will be returned if the `include[]=assignees` query parameter is provided.
    attr_accessor :assignments

    # How the current incident assignments were decided.  Note that `direct_assignment` incidents will not escalate up the attached `escalation_policy`
    attr_accessor :assigned_via

    # The time the status of the incident last changed. If the incident is not currently acknowledged or resolved, this will be the incident's `updated_at`.
    attr_accessor :last_status_change_at

    # The time the incident became \"resolved\" or `null` if the incident is not resolved.
    attr_accessor :resolved_at

    attr_accessor :first_trigger_log_entry

    attr_accessor :alert_counts

    # Whether the incident is mergeable. Only incidents that have alerts, or that are manually created can be merged.
    attr_accessor :is_mergeable

    attr_accessor :escalation_policy

    # The teams involved in the incidentâ€™s lifecycle. If the `include[]=teams` query parameter is provided, the full team definitions will be returned.
    attr_accessor :teams

    # The list of pending_actions on the incident. A pending_action object contains a type of action which can be escalate, unacknowledge, resolve or urgency_change. A pending_action object contains at, the time at which the action will take place. An urgency_change pending_action will contain to, the urgency that the incident will change to.
    attr_accessor :pending_actions

    # List of all acknowledgements for this incident. This list will be empty if the `Incident.status` is `resolved` or `triggered`. If the `include[]=acknowledgers` query parameter is provided, the full user or service definitions will be returned for each acknowledgement entry.
    attr_accessor :acknowledgements

    attr_accessor :alert_grouping

    attr_accessor :last_status_change_by

    attr_accessor :priority

    attr_accessor :resolve_reason

    # The conference bridge information attached to the incident. Only returned if the `include[]=conference_bridge` query parameter is provided.
    attr_accessor :conference_bridge

    # The responders on the incident. Only returned if the account has access to the [responder requests](https://support.pagerduty.com/docs/add-responders) feature.
    attr_accessor :incidents_responders

    # Previous responder requests made on this incident. Only returned if the account has access to the [responder requests](https://support.pagerduty.com/docs/add-responders) feature.
    attr_accessor :responder_requests

    # The current urgency of the incident.
    attr_accessor :urgency

    # The additional incident body details. Only returned if the `include[]=body` query parameter is provided.
    attr_accessor :body

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'incident_number' => :'incident_number',
        :'title' => :'title',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'status' => :'status',
        :'incident_key' => :'incident_key',
        :'service' => :'service',
        :'assignments' => :'assignments',
        :'assigned_via' => :'assigned_via',
        :'last_status_change_at' => :'last_status_change_at',
        :'resolved_at' => :'resolved_at',
        :'first_trigger_log_entry' => :'first_trigger_log_entry',
        :'alert_counts' => :'alert_counts',
        :'is_mergeable' => :'is_mergeable',
        :'escalation_policy' => :'escalation_policy',
        :'teams' => :'teams',
        :'pending_actions' => :'pending_actions',
        :'acknowledgements' => :'acknowledgements',
        :'alert_grouping' => :'alert_grouping',
        :'last_status_change_by' => :'last_status_change_by',
        :'priority' => :'priority',
        :'resolve_reason' => :'resolve_reason',
        :'conference_bridge' => :'conference_bridge',
        :'incidents_responders' => :'incidents_responders',
        :'responder_requests' => :'responder_requests',
        :'urgency' => :'urgency',
        :'body' => :'body'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'incident_number' => :'Integer',
        :'title' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'status' => :'String',
        :'incident_key' => :'String',
        :'service' => :'IncidentAllOfService',
        :'assignments' => :'Array<Assignment>',
        :'assigned_via' => :'String',
        :'last_status_change_at' => :'Time',
        :'resolved_at' => :'Time',
        :'first_trigger_log_entry' => :'IncidentAllOfFirstTriggerLogEntry',
        :'alert_counts' => :'AlertCount',
        :'is_mergeable' => :'Boolean',
        :'escalation_policy' => :'IncidentAllOfEscalationPolicy',
        :'teams' => :'Array<IncidentAllOfTeams>',
        :'pending_actions' => :'Array<IncidentAction>',
        :'acknowledgements' => :'Array<Acknowledgement>',
        :'alert_grouping' => :'IncidentAllOfAlertGrouping',
        :'last_status_change_by' => :'IncidentAllOfLastStatusChangeBy',
        :'priority' => :'Priority',
        :'resolve_reason' => :'ResolveReason',
        :'conference_bridge' => :'ConferenceBridge',
        :'incidents_responders' => :'Array<IncidentsRespondersReference>',
        :'responder_requests' => :'Array<ResponderRequest>',
        :'urgency' => :'String',
        :'body' => :'IncidentBody'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Model0'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PagerDutyOpenapiClient::Incident` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PagerDutyOpenapiClient::Incident`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'incident_number')
        self.incident_number = attributes[:'incident_number']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'incident_key')
        self.incident_key = attributes[:'incident_key']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'assignments')
        if (value = attributes[:'assignments']).is_a?(Array)
          self.assignments = value
        end
      end

      if attributes.key?(:'assigned_via')
        self.assigned_via = attributes[:'assigned_via']
      end

      if attributes.key?(:'last_status_change_at')
        self.last_status_change_at = attributes[:'last_status_change_at']
      end

      if attributes.key?(:'resolved_at')
        self.resolved_at = attributes[:'resolved_at']
      end

      if attributes.key?(:'first_trigger_log_entry')
        self.first_trigger_log_entry = attributes[:'first_trigger_log_entry']
      end

      if attributes.key?(:'alert_counts')
        self.alert_counts = attributes[:'alert_counts']
      end

      if attributes.key?(:'is_mergeable')
        self.is_mergeable = attributes[:'is_mergeable']
      end

      if attributes.key?(:'escalation_policy')
        self.escalation_policy = attributes[:'escalation_policy']
      end

      if attributes.key?(:'teams')
        if (value = attributes[:'teams']).is_a?(Array)
          self.teams = value
        end
      end

      if attributes.key?(:'pending_actions')
        if (value = attributes[:'pending_actions']).is_a?(Array)
          self.pending_actions = value
        end
      end

      if attributes.key?(:'acknowledgements')
        if (value = attributes[:'acknowledgements']).is_a?(Array)
          self.acknowledgements = value
        end
      end

      if attributes.key?(:'alert_grouping')
        self.alert_grouping = attributes[:'alert_grouping']
      end

      if attributes.key?(:'last_status_change_by')
        self.last_status_change_by = attributes[:'last_status_change_by']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'resolve_reason')
        self.resolve_reason = attributes[:'resolve_reason']
      end

      if attributes.key?(:'conference_bridge')
        self.conference_bridge = attributes[:'conference_bridge']
      end

      if attributes.key?(:'incidents_responders')
        if (value = attributes[:'incidents_responders']).is_a?(Array)
          self.incidents_responders = value
        end
      end

      if attributes.key?(:'responder_requests')
        if (value = attributes[:'responder_requests']).is_a?(Array)
          self.responder_requests = value
        end
      end

      if attributes.key?(:'urgency')
        self.urgency = attributes[:'urgency']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["triggered", "acknowledged", "resolved"])
      return false unless status_validator.valid?(@status)
      assigned_via_validator = EnumAttributeValidator.new('String', ["escalation_policy", "direct_assignment"])
      return false unless assigned_via_validator.valid?(@assigned_via)
      urgency_validator = EnumAttributeValidator.new('String', ["high", "low"])
      return false unless urgency_validator.valid?(@urgency)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["triggered", "acknowledged", "resolved"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] assigned_via Object to be assigned
    def assigned_via=(assigned_via)
      validator = EnumAttributeValidator.new('String', ["escalation_policy", "direct_assignment"])
      unless validator.valid?(assigned_via)
        fail ArgumentError, "invalid value for \"assigned_via\", must be one of #{validator.allowable_values}."
      end
      @assigned_via = assigned_via
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] urgency Object to be assigned
    def urgency=(urgency)
      validator = EnumAttributeValidator.new('String', ["high", "low"])
      unless validator.valid?(urgency)
        fail ArgumentError, "invalid value for \"urgency\", must be one of #{validator.allowable_values}."
      end
      @urgency = urgency
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          incident_number == o.incident_number &&
          title == o.title &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          status == o.status &&
          incident_key == o.incident_key &&
          service == o.service &&
          assignments == o.assignments &&
          assigned_via == o.assigned_via &&
          last_status_change_at == o.last_status_change_at &&
          resolved_at == o.resolved_at &&
          first_trigger_log_entry == o.first_trigger_log_entry &&
          alert_counts == o.alert_counts &&
          is_mergeable == o.is_mergeable &&
          escalation_policy == o.escalation_policy &&
          teams == o.teams &&
          pending_actions == o.pending_actions &&
          acknowledgements == o.acknowledgements &&
          alert_grouping == o.alert_grouping &&
          last_status_change_by == o.last_status_change_by &&
          priority == o.priority &&
          resolve_reason == o.resolve_reason &&
          conference_bridge == o.conference_bridge &&
          incidents_responders == o.incidents_responders &&
          responder_requests == o.responder_requests &&
          urgency == o.urgency &&
          body == o.body
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [incident_number, title, created_at, updated_at, status, incident_key, service, assignments, assigned_via, last_status_change_at, resolved_at, first_trigger_log_entry, alert_counts, is_mergeable, escalation_policy, teams, pending_actions, acknowledgements, alert_grouping, last_status_change_by, priority, resolve_reason, conference_bridge, incidents_responders, responder_requests, urgency, body].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PagerDutyOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
