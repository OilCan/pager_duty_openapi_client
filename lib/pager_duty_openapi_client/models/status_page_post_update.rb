=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module PagerDutyOpenapiClient
  # An update for a Post.
  class StatusPagePostUpdate
    # The ID of the Post Update.
    attr_accessor :id

    # The path to which the Post Update resource is accessible.
    attr_accessor :_self

    attr_accessor :post

    # The message of the Post Update.
    attr_accessor :message

    # The status of the Post Updates to retrieve.
    attr_accessor :reviewed_status

    attr_accessor :status

    attr_accessor :severity

    # Impacted services represent the status page services affected by a post update, and its impact.
    attr_accessor :impacted_services

    # The frequency of the next Post Update in milliseconds.
    attr_accessor :update_frequency_ms

    # Determines if the subscribers should be notified of the Post Update.
    attr_accessor :notify_subscribers

    # The date and time the Post Update was reported.
    attr_accessor :reported_at

    # The type of the object returned by the API - in this case, a Status Page Post Update.
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'_self' => :'self',
        :'post' => :'post',
        :'message' => :'message',
        :'reviewed_status' => :'reviewed_status',
        :'status' => :'status',
        :'severity' => :'severity',
        :'impacted_services' => :'impacted_services',
        :'update_frequency_ms' => :'update_frequency_ms',
        :'notify_subscribers' => :'notify_subscribers',
        :'reported_at' => :'reported_at',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'_self' => :'String',
        :'post' => :'StatusPagePostUpdatePost',
        :'message' => :'String',
        :'reviewed_status' => :'String',
        :'status' => :'StatusPagePostUpdateStatus',
        :'severity' => :'StatusPagePostUpdateSeverity',
        :'impacted_services' => :'Array<StatusPagePostUpdateImpact>',
        :'update_frequency_ms' => :'Integer',
        :'notify_subscribers' => :'Boolean',
        :'reported_at' => :'Time',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'update_frequency_ms',
        :'reported_at',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PagerDutyOpenapiClient::StatusPagePostUpdate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PagerDutyOpenapiClient::StatusPagePostUpdate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.key?(:'post')
        self.post = attributes[:'post']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'reviewed_status')
        self.reviewed_status = attributes[:'reviewed_status']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'impacted_services')
        if (value = attributes[:'impacted_services']).is_a?(Array)
          self.impacted_services = value
        end
      end

      if attributes.key?(:'update_frequency_ms')
        self.update_frequency_ms = attributes[:'update_frequency_ms']
      end

      if attributes.key?(:'notify_subscribers')
        self.notify_subscribers = attributes[:'notify_subscribers']
      end

      if attributes.key?(:'reported_at')
        self.reported_at = attributes[:'reported_at']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@impacted_services.nil? && @impacted_services.length < 0
        invalid_properties.push('invalid value for "impacted_services", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      reviewed_status_validator = EnumAttributeValidator.new('String', ["approved", "not_reviewed"])
      return false unless reviewed_status_validator.valid?(@reviewed_status)
      return false if !@impacted_services.nil? && @impacted_services.length < 0
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reviewed_status Object to be assigned
    def reviewed_status=(reviewed_status)
      validator = EnumAttributeValidator.new('String', ["approved", "not_reviewed"])
      unless validator.valid?(reviewed_status)
        fail ArgumentError, "invalid value for \"reviewed_status\", must be one of #{validator.allowable_values}."
      end
      @reviewed_status = reviewed_status
    end

    # Custom attribute writer method with validation
    # @param [Object] impacted_services Value to be assigned
    def impacted_services=(impacted_services)
      if impacted_services.nil?
        fail ArgumentError, 'impacted_services cannot be nil'
      end

      if impacted_services.length < 0
        fail ArgumentError, 'invalid value for "impacted_services", number of items must be greater than or equal to 0.'
      end

      @impacted_services = impacted_services
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          _self == o._self &&
          post == o.post &&
          message == o.message &&
          reviewed_status == o.reviewed_status &&
          status == o.status &&
          severity == o.severity &&
          impacted_services == o.impacted_services &&
          update_frequency_ms == o.update_frequency_ms &&
          notify_subscribers == o.notify_subscribers &&
          reported_at == o.reported_at &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, _self, post, message, reviewed_status, status, severity, impacted_services, update_frequency_ms, notify_subscribers, reported_at, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PagerDutyOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
