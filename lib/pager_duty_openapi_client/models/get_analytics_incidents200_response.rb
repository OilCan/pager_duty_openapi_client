=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module PagerDutyOpenapiClient
  class GetAnalyticsIncidents200Response
    # Cursor to identify the first object in the response.
    attr_accessor :first

    # Cursor to identify the last object in the response.
    attr_accessor :last

    # Number of results to include in the batch.
    attr_accessor :limit

    # Indicates if there are more resources available than were returned.
    attr_accessor :more

    # The order in which the results were sorted;  asc for ascending, desc for descending.
    attr_accessor :order

    # The column that was used for ordering the results.
    attr_accessor :order_by

    attr_accessor :filters

    # The time zone that the results are in.
    attr_accessor :time_zone

    attr_accessor :data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'first' => :'first',
        :'last' => :'last',
        :'limit' => :'limit',
        :'more' => :'more',
        :'order' => :'order',
        :'order_by' => :'order_by',
        :'filters' => :'filters',
        :'time_zone' => :'time_zone',
        :'data' => :'data'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'first' => :'String',
        :'last' => :'String',
        :'limit' => :'Integer',
        :'more' => :'Boolean',
        :'order' => :'String',
        :'order_by' => :'String',
        :'filters' => :'GetAnalyticsIncidents200ResponseFilters',
        :'time_zone' => :'String',
        :'data' => :'Array<AnalyticsRawIncident>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PagerDutyOpenapiClient::GetAnalyticsIncidents200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PagerDutyOpenapiClient::GetAnalyticsIncidents200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'first')
        self.first = attributes[:'first']
      else
        self.first = nil
      end

      if attributes.key?(:'last')
        self.last = attributes[:'last']
      else
        self.last = nil
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      else
        self.limit = nil
      end

      if attributes.key?(:'more')
        self.more = attributes[:'more']
      else
        self.more = nil
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      else
        self.order = nil
      end

      if attributes.key?(:'order_by')
        self.order_by = attributes[:'order_by']
      else
        self.order_by = nil
      end

      if attributes.key?(:'filters')
        self.filters = attributes[:'filters']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      else
        self.time_zone = nil
      end

      if attributes.key?(:'data')
        if (value = attributes[:'data']).is_a?(Array)
          self.data = value
        end
      else
        self.data = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @first.nil?
        invalid_properties.push('invalid value for "first", first cannot be nil.')
      end

      if @last.nil?
        invalid_properties.push('invalid value for "last", last cannot be nil.')
      end

      if @limit.nil?
        invalid_properties.push('invalid value for "limit", limit cannot be nil.')
      end

      if @more.nil?
        invalid_properties.push('invalid value for "more", more cannot be nil.')
      end

      if @order.nil?
        invalid_properties.push('invalid value for "order", order cannot be nil.')
      end

      if @order_by.nil?
        invalid_properties.push('invalid value for "order_by", order_by cannot be nil.')
      end

      if @time_zone.nil?
        invalid_properties.push('invalid value for "time_zone", time_zone cannot be nil.')
      end

      if @data.nil?
        invalid_properties.push('invalid value for "data", data cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @first.nil?
      return false if @last.nil?
      return false if @limit.nil?
      return false if @more.nil?
      return false if @order.nil?
      order_validator = EnumAttributeValidator.new('String', ["asc", "desc"])
      return false unless order_validator.valid?(@order)
      return false if @order_by.nil?
      order_by_validator = EnumAttributeValidator.new('String', ["created_at", "seconds_to_resolve"])
      return false unless order_by_validator.valid?(@order_by)
      return false if @time_zone.nil?
      return false if @data.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order Object to be assigned
    def order=(order)
      validator = EnumAttributeValidator.new('String', ["asc", "desc"])
      unless validator.valid?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{validator.allowable_values}."
      end
      @order = order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order_by Object to be assigned
    def order_by=(order_by)
      validator = EnumAttributeValidator.new('String', ["created_at", "seconds_to_resolve"])
      unless validator.valid?(order_by)
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{validator.allowable_values}."
      end
      @order_by = order_by
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first == o.first &&
          last == o.last &&
          limit == o.limit &&
          more == o.more &&
          order == o.order &&
          order_by == o.order_by &&
          filters == o.filters &&
          time_zone == o.time_zone &&
          data == o.data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [first, last, limit, more, order, order_by, filters, time_zone, data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PagerDutyOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
