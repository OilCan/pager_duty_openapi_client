=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module PagerDutyOpenapiClient
  class AnalyticsRawResponderIncidents
    # Timestamp of when the incident was created.
    attr_accessor :incident_created_at

    # The incident description.
    attr_accessor :incident_description

    # Incident ID
    attr_accessor :incident_id

    # The PagerDuty incident number.
    attr_accessor :incident_number

    # ID of the incident's priority level.
    attr_accessor :incident_priority_id

    # The user-provided short name of the priority.
    attr_accessor :incident_priority_name

    # The numerical value used to sort priorities. Higher values are higher priority.
    attr_accessor :incident_priority_order

    # Notification level
    attr_accessor :incident_urgency

    # Mean time from this user being assigned to an incident until this user acknowledges the incident.
    attr_accessor :mean_time_to_acknowledge_seconds

    # ID of the responder.
    attr_accessor :responder_id

    # Name of the responder.
    attr_accessor :responder_name

    # ID of the service that the incident triggered on.
    attr_accessor :service_id

    # Name of the service that the incident triggered on.
    attr_accessor :service_name

    # ID of the team that owns the related service.
    attr_accessor :service_team_id

    # Name of the team that owns the related service.
    attr_accessor :service_team_name

    # Total acknowledgements from the responder on the incident.
    attr_accessor :total_acknowledgements

    # Total number of unique interruptions during business hours; 8am-6pm Mon-Fri, based on the user’s time zone.
    attr_accessor :total_business_hour_interruptions

    # Total engaged time across all responders for incidents. Engaged time is measured from the time a user engages with an incident (by acknowledging or accepting a responder request) until the incident is resolved. This may include periods in which the incidents were snoozed.
    attr_accessor :total_engaged_seconds

    # Total number of unique interruptions for the responder during the incident.
    attr_accessor :total_interruptions

    # Total times the responder was manually escalated away from the incident.
    attr_accessor :total_manual_escalations_from

    # Total times the responder was manually escalated to the incident.
    attr_accessor :total_manual_escalations_to

    # Total number of unique interruptions during off hours; 6pm-10pm Mon-Fri and all day Sat-Sun, based on the user’s time zone.
    attr_accessor :total_off_hour_interruptions

    # Total times the responder was reassigned away from the incident.
    attr_accessor :total_reassignments_from

    # Total times the responder was reassigned to the incident.
    attr_accessor :total_reassignments_to

    # Total number of unique interruptions during sleep hours; 10pm-8am every day, based on the user’s time zone.
    attr_accessor :total_sleep_hour_interruptions

    # Total times the responder was escalated away from the incident due to timeout.
    attr_accessor :total_timeout_escalations_from

    # Total times the responder was escalated to the incident due to timeout.
    attr_accessor :total_timeout_escalations_to

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'incident_created_at' => :'incident_created_at',
        :'incident_description' => :'incident_description',
        :'incident_id' => :'incident_id',
        :'incident_number' => :'incident_number',
        :'incident_priority_id' => :'incident_priority_id',
        :'incident_priority_name' => :'incident_priority_name',
        :'incident_priority_order' => :'incident_priority_order',
        :'incident_urgency' => :'incident_urgency',
        :'mean_time_to_acknowledge_seconds' => :'mean_time_to_acknowledge_seconds',
        :'responder_id' => :'responder_id',
        :'responder_name' => :'responder_name',
        :'service_id' => :'service_id',
        :'service_name' => :'service_name',
        :'service_team_id' => :'service_team_id',
        :'service_team_name' => :'service_team_name',
        :'total_acknowledgements' => :'total_acknowledgements',
        :'total_business_hour_interruptions' => :'total_business_hour_interruptions',
        :'total_engaged_seconds' => :'total_engaged_seconds',
        :'total_interruptions' => :'total_interruptions',
        :'total_manual_escalations_from' => :'total_manual_escalations_from',
        :'total_manual_escalations_to' => :'total_manual_escalations_to',
        :'total_off_hour_interruptions' => :'total_off_hour_interruptions',
        :'total_reassignments_from' => :'total_reassignments_from',
        :'total_reassignments_to' => :'total_reassignments_to',
        :'total_sleep_hour_interruptions' => :'total_sleep_hour_interruptions',
        :'total_timeout_escalations_from' => :'total_timeout_escalations_from',
        :'total_timeout_escalations_to' => :'total_timeout_escalations_to'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'incident_created_at' => :'String',
        :'incident_description' => :'String',
        :'incident_id' => :'String',
        :'incident_number' => :'Integer',
        :'incident_priority_id' => :'String',
        :'incident_priority_name' => :'String',
        :'incident_priority_order' => :'Integer',
        :'incident_urgency' => :'String',
        :'mean_time_to_acknowledge_seconds' => :'Integer',
        :'responder_id' => :'String',
        :'responder_name' => :'String',
        :'service_id' => :'String',
        :'service_name' => :'String',
        :'service_team_id' => :'String',
        :'service_team_name' => :'String',
        :'total_acknowledgements' => :'Integer',
        :'total_business_hour_interruptions' => :'Integer',
        :'total_engaged_seconds' => :'Integer',
        :'total_interruptions' => :'Integer',
        :'total_manual_escalations_from' => :'Integer',
        :'total_manual_escalations_to' => :'Integer',
        :'total_off_hour_interruptions' => :'String',
        :'total_reassignments_from' => :'Integer',
        :'total_reassignments_to' => :'Integer',
        :'total_sleep_hour_interruptions' => :'Integer',
        :'total_timeout_escalations_from' => :'Integer',
        :'total_timeout_escalations_to' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'incident_priority_id',
        :'incident_priority_name',
        :'incident_priority_order',
        :'service_team_id',
        :'service_team_name',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PagerDutyOpenapiClient::AnalyticsRawResponderIncidents` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PagerDutyOpenapiClient::AnalyticsRawResponderIncidents`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'incident_created_at')
        self.incident_created_at = attributes[:'incident_created_at']
      end

      if attributes.key?(:'incident_description')
        self.incident_description = attributes[:'incident_description']
      end

      if attributes.key?(:'incident_id')
        self.incident_id = attributes[:'incident_id']
      end

      if attributes.key?(:'incident_number')
        self.incident_number = attributes[:'incident_number']
      end

      if attributes.key?(:'incident_priority_id')
        self.incident_priority_id = attributes[:'incident_priority_id']
      end

      if attributes.key?(:'incident_priority_name')
        self.incident_priority_name = attributes[:'incident_priority_name']
      end

      if attributes.key?(:'incident_priority_order')
        self.incident_priority_order = attributes[:'incident_priority_order']
      end

      if attributes.key?(:'incident_urgency')
        self.incident_urgency = attributes[:'incident_urgency']
      end

      if attributes.key?(:'mean_time_to_acknowledge_seconds')
        self.mean_time_to_acknowledge_seconds = attributes[:'mean_time_to_acknowledge_seconds']
      end

      if attributes.key?(:'responder_id')
        self.responder_id = attributes[:'responder_id']
      end

      if attributes.key?(:'responder_name')
        self.responder_name = attributes[:'responder_name']
      end

      if attributes.key?(:'service_id')
        self.service_id = attributes[:'service_id']
      end

      if attributes.key?(:'service_name')
        self.service_name = attributes[:'service_name']
      end

      if attributes.key?(:'service_team_id')
        self.service_team_id = attributes[:'service_team_id']
      end

      if attributes.key?(:'service_team_name')
        self.service_team_name = attributes[:'service_team_name']
      end

      if attributes.key?(:'total_acknowledgements')
        self.total_acknowledgements = attributes[:'total_acknowledgements']
      end

      if attributes.key?(:'total_business_hour_interruptions')
        self.total_business_hour_interruptions = attributes[:'total_business_hour_interruptions']
      end

      if attributes.key?(:'total_engaged_seconds')
        self.total_engaged_seconds = attributes[:'total_engaged_seconds']
      end

      if attributes.key?(:'total_interruptions')
        self.total_interruptions = attributes[:'total_interruptions']
      end

      if attributes.key?(:'total_manual_escalations_from')
        self.total_manual_escalations_from = attributes[:'total_manual_escalations_from']
      end

      if attributes.key?(:'total_manual_escalations_to')
        self.total_manual_escalations_to = attributes[:'total_manual_escalations_to']
      end

      if attributes.key?(:'total_off_hour_interruptions')
        self.total_off_hour_interruptions = attributes[:'total_off_hour_interruptions']
      end

      if attributes.key?(:'total_reassignments_from')
        self.total_reassignments_from = attributes[:'total_reassignments_from']
      end

      if attributes.key?(:'total_reassignments_to')
        self.total_reassignments_to = attributes[:'total_reassignments_to']
      end

      if attributes.key?(:'total_sleep_hour_interruptions')
        self.total_sleep_hour_interruptions = attributes[:'total_sleep_hour_interruptions']
      end

      if attributes.key?(:'total_timeout_escalations_from')
        self.total_timeout_escalations_from = attributes[:'total_timeout_escalations_from']
      end

      if attributes.key?(:'total_timeout_escalations_to')
        self.total_timeout_escalations_to = attributes[:'total_timeout_escalations_to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          incident_created_at == o.incident_created_at &&
          incident_description == o.incident_description &&
          incident_id == o.incident_id &&
          incident_number == o.incident_number &&
          incident_priority_id == o.incident_priority_id &&
          incident_priority_name == o.incident_priority_name &&
          incident_priority_order == o.incident_priority_order &&
          incident_urgency == o.incident_urgency &&
          mean_time_to_acknowledge_seconds == o.mean_time_to_acknowledge_seconds &&
          responder_id == o.responder_id &&
          responder_name == o.responder_name &&
          service_id == o.service_id &&
          service_name == o.service_name &&
          service_team_id == o.service_team_id &&
          service_team_name == o.service_team_name &&
          total_acknowledgements == o.total_acknowledgements &&
          total_business_hour_interruptions == o.total_business_hour_interruptions &&
          total_engaged_seconds == o.total_engaged_seconds &&
          total_interruptions == o.total_interruptions &&
          total_manual_escalations_from == o.total_manual_escalations_from &&
          total_manual_escalations_to == o.total_manual_escalations_to &&
          total_off_hour_interruptions == o.total_off_hour_interruptions &&
          total_reassignments_from == o.total_reassignments_from &&
          total_reassignments_to == o.total_reassignments_to &&
          total_sleep_hour_interruptions == o.total_sleep_hour_interruptions &&
          total_timeout_escalations_from == o.total_timeout_escalations_from &&
          total_timeout_escalations_to == o.total_timeout_escalations_to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [incident_created_at, incident_description, incident_id, incident_number, incident_priority_id, incident_priority_name, incident_priority_order, incident_urgency, mean_time_to_acknowledge_seconds, responder_id, responder_name, service_id, service_name, service_team_id, service_team_name, total_acknowledgements, total_business_hour_interruptions, total_engaged_seconds, total_interruptions, total_manual_escalations_from, total_manual_escalations_to, total_off_hour_interruptions, total_reassignments_from, total_reassignments_to, total_sleep_hour_interruptions, total_timeout_escalations_from, total_timeout_escalations_to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PagerDutyOpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
