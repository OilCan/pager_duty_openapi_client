=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class AutomationActionsProcessAutomationJobAction
    attr_accessor :name

    attr_accessor :description

    attr_accessor :action_type

    attr_accessor :action_classification

    attr_accessor :runner

    attr_accessor :runner_type

    attr_accessor :services

    attr_accessor :privileges

    attr_accessor :metadata

    # The date/time
    attr_accessor :creation_time

    # The date/time
    attr_accessor :modify_time

    # The date/time
    attr_accessor :last_run

    attr_accessor :last_run_by

    attr_accessor :action_data_reference

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'action_type' => :'action_type',
        :'action_classification' => :'action_classification',
        :'runner' => :'runner',
        :'runner_type' => :'runner_type',
        :'services' => :'services',
        :'privileges' => :'privileges',
        :'metadata' => :'metadata',
        :'creation_time' => :'creation_time',
        :'modify_time' => :'modify_time',
        :'last_run' => :'last_run',
        :'last_run_by' => :'last_run_by',
        :'action_data_reference' => :'action_data_reference'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'action_type' => :'Schema',
        :'action_classification' => :'AutomationActionsActionClassificationEnum',
        :'runner' => :'String',
        :'runner_type' => :'AutomationActionsRunnerTypeEnum',
        :'services' => :'Array<ServiceReference>',
        :'privileges' => :'AutomationActionsUserPermissions',
        :'metadata' => :'Object',
        :'creation_time' => :'Time',
        :'modify_time' => :'Time',
        :'last_run' => :'Time',
        :'last_run_by' => :'AutomationActionsAbstractActionAllOfLastRunBy',
        :'action_data_reference' => :'AutomationActionsProcessAutomationJobActionDataReference'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'action_classification',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'AutomationActionsAbstractAction'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AutomationActionsProcessAutomationJobAction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AutomationActionsProcessAutomationJobAction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'action_type')
        self.action_type = attributes[:'action_type']
      else
        self.action_type = nil
      end

      if attributes.key?(:'action_classification')
        self.action_classification = attributes[:'action_classification']
      end

      if attributes.key?(:'runner')
        self.runner = attributes[:'runner']
      end

      if attributes.key?(:'runner_type')
        self.runner_type = attributes[:'runner_type']
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'privileges')
        self.privileges = attributes[:'privileges']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      else
        self.creation_time = nil
      end

      if attributes.key?(:'modify_time')
        self.modify_time = attributes[:'modify_time']
      else
        self.modify_time = nil
      end

      if attributes.key?(:'last_run')
        self.last_run = attributes[:'last_run']
      end

      if attributes.key?(:'last_run_by')
        self.last_run_by = attributes[:'last_run_by']
      end

      if attributes.key?(:'action_data_reference')
        self.action_data_reference = attributes[:'action_data_reference']
      else
        self.action_data_reference = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @action_type.nil?
        invalid_properties.push('invalid value for "action_type", action_type cannot be nil.')
      end

      if !@runner.nil? && @runner.to_s.length > 36
        invalid_properties.push('invalid value for "runner", the character length must be smaller than or equal to 36.')
      end

      if @creation_time.nil?
        invalid_properties.push('invalid value for "creation_time", creation_time cannot be nil.')
      end

      if @modify_time.nil?
        invalid_properties.push('invalid value for "modify_time", modify_time cannot be nil.')
      end

      if @action_data_reference.nil?
        invalid_properties.push('invalid value for "action_data_reference", action_data_reference cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @action_type.nil?
      return false if !@runner.nil? && @runner.to_s.length > 36
      return false if @creation_time.nil?
      return false if @modify_time.nil?
      return false if @action_data_reference.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] runner Value to be assigned
    def runner=(runner)
      if runner.nil?
        fail ArgumentError, 'runner cannot be nil'
      end

      if runner.to_s.length > 36
        fail ArgumentError, 'invalid value for "runner", the character length must be smaller than or equal to 36.'
      end

      @runner = runner
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          action_type == o.action_type &&
          action_classification == o.action_classification &&
          runner == o.runner &&
          runner_type == o.runner_type &&
          services == o.services &&
          privileges == o.privileges &&
          metadata == o.metadata &&
          creation_time == o.creation_time &&
          modify_time == o.modify_time &&
          last_run == o.last_run &&
          last_run_by == o.last_run_by &&
          action_data_reference == o.action_data_reference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, description, action_type, action_classification, runner, runner_type, services, privileges, metadata, creation_time, modify_time, last_run, last_run_by, action_data_reference].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
