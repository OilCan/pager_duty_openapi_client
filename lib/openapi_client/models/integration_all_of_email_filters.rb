=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class IntegrationAllOfEmailFilters
    attr_accessor :subject_mode

    # Specify if subject_mode is set to match or no-match
    attr_accessor :subject_regex

    attr_accessor :body_mode

    # Specify if body_mode is set to match or no-match
    attr_accessor :body_regex

    attr_accessor :from_email_mode

    # Specify if from_email_mode is set to match or no-match
    attr_accessor :from_email_regex

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subject_mode' => :'subject_mode',
        :'subject_regex' => :'subject_regex',
        :'body_mode' => :'body_mode',
        :'body_regex' => :'body_regex',
        :'from_email_mode' => :'from_email_mode',
        :'from_email_regex' => :'from_email_regex'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subject_mode' => :'String',
        :'subject_regex' => :'String',
        :'body_mode' => :'String',
        :'body_regex' => :'String',
        :'from_email_mode' => :'String',
        :'from_email_regex' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::IntegrationAllOfEmailFilters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::IntegrationAllOfEmailFilters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subject_mode')
        self.subject_mode = attributes[:'subject_mode']
      else
        self.subject_mode = nil
      end

      if attributes.key?(:'subject_regex')
        self.subject_regex = attributes[:'subject_regex']
      end

      if attributes.key?(:'body_mode')
        self.body_mode = attributes[:'body_mode']
      else
        self.body_mode = nil
      end

      if attributes.key?(:'body_regex')
        self.body_regex = attributes[:'body_regex']
      end

      if attributes.key?(:'from_email_mode')
        self.from_email_mode = attributes[:'from_email_mode']
      else
        self.from_email_mode = nil
      end

      if attributes.key?(:'from_email_regex')
        self.from_email_regex = attributes[:'from_email_regex']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subject_mode.nil?
        invalid_properties.push('invalid value for "subject_mode", subject_mode cannot be nil.')
      end

      if @body_mode.nil?
        invalid_properties.push('invalid value for "body_mode", body_mode cannot be nil.')
      end

      if @from_email_mode.nil?
        invalid_properties.push('invalid value for "from_email_mode", from_email_mode cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subject_mode.nil?
      subject_mode_validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      return false unless subject_mode_validator.valid?(@subject_mode)
      return false if @body_mode.nil?
      body_mode_validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      return false unless body_mode_validator.valid?(@body_mode)
      return false if @from_email_mode.nil?
      from_email_mode_validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      return false unless from_email_mode_validator.valid?(@from_email_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subject_mode Object to be assigned
    def subject_mode=(subject_mode)
      validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      unless validator.valid?(subject_mode)
        fail ArgumentError, "invalid value for \"subject_mode\", must be one of #{validator.allowable_values}."
      end
      @subject_mode = subject_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] body_mode Object to be assigned
    def body_mode=(body_mode)
      validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      unless validator.valid?(body_mode)
        fail ArgumentError, "invalid value for \"body_mode\", must be one of #{validator.allowable_values}."
      end
      @body_mode = body_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_email_mode Object to be assigned
    def from_email_mode=(from_email_mode)
      validator = EnumAttributeValidator.new('String', ["match", "no-match", "always"])
      unless validator.valid?(from_email_mode)
        fail ArgumentError, "invalid value for \"from_email_mode\", must be one of #{validator.allowable_values}."
      end
      @from_email_mode = from_email_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subject_mode == o.subject_mode &&
          subject_regex == o.subject_regex &&
          body_mode == o.body_mode &&
          body_regex == o.body_regex &&
          from_email_mode == o.from_email_mode &&
          from_email_regex == o.from_email_regex
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subject_mode, subject_regex, body_mode, body_regex, from_email_mode, from_email_regex].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
