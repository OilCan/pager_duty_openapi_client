=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class AnalyticsRawIncident
    # The IDs of the users who acknowledged the incident.
    attr_accessor :acknowledged_user_ids

    # The names of the users who acknowledged the incident.
    attr_accessor :acknowledged_user_names

    # Total count of acknowledgements in the incident.
    attr_accessor :acknowledgement_count

    # Total number of responders who either acknowledged the incident or accepted a responder request.
    attr_accessor :active_user_count

    # The IDs of the users who were assigned the incident.
    attr_accessor :assigned_user_ids

    # The names of the users who were assigned the incident.
    attr_accessor :assigned_user_names

    # Total count of instances where responders were assigned an incident (including through reassignment or escalation).
    attr_accessor :assignment_count

    # Whether or not the incident resolved automatically, either via an integration  or [auto-resolved in PagerDuty](https://support.pagerduty.com/docs/configurable-service-settings#auto-resolution).
    attr_accessor :auto_resolved

    # Total number of unique interruptions during business hours; 8am-6pm Mon-Fri, based on the user’s time zone.
    attr_accessor :business_hour_interruptions

    # Timestamp of when the incident was created.
    attr_accessor :created_at

    # The incident description
    attr_accessor :description

    # Total engaged time across all responders for this incident.  Engaged time is measured from the time a user engages with an incident (by acknowledging or accepting a responder request) until the incident is resolved.  This may include periods in which the incidents were snoozed.
    attr_accessor :engaged_seconds

    # Total number of users who engaged (acknowledged, accepted responder request) in the incident.
    attr_accessor :engaged_user_count

    # Total count of instances where an incident is escalated between responders assigned to an escalation policy.
    attr_accessor :escalation_count

    # ID of the escalation policy the incident was assigned to.
    attr_accessor :escalation_policy_id

    # Name of the escalation policy the incident was assigned to.
    attr_accessor :escalation_policy_name

    # Incident ID
    attr_accessor :id

    # The PagerDuty incident number.
    attr_accessor :incident_number

    # The IDs of the users who either acknowledged the incident or accepted a responder request.
    attr_accessor :joined_user_ids

    # The names of the users who either acknowledged the incident or accepted a responder request.
    attr_accessor :joined_user_names

    # An incident is classified as a [major incident](https://support.pagerduty.com/docs/operational-reviews#major-incidents) if it has one of the two highest priorities, or if multiple responders are added and acknowledge the incident.
    attr_accessor :major

    # Total count of manual escalations in the incident.
    attr_accessor :manual_escalation_count

    # Total number of unique interruptions during off hours; 6pm-10pm Mon-Fri and all day Sat-Sun, based on the user’s time zone.
    attr_accessor :off_hour_interruptions

    # ID of the incident's priority level.
    attr_accessor :priority_id

    # The user-provided short name of the priority.
    attr_accessor :priority_name

    # The numerical value used to sort priorities. Higher values are higher priority.
    attr_accessor :priority_order

    # Total count of reassignments in the incident.
    attr_accessor :reassignment_count

    # Timestamp of when the incident was resolved.
    attr_accessor :resolved_at

    # ID of the user who resolved the incident.
    attr_accessor :resolved_by_user_id

    # Name of the user who resolved the incident.
    attr_accessor :resolved_by_user_name

    # A measure of *people response time*. This metric measures the time from the first user engagement (acknowledge or responder accept) to the last. This metric is only used for incidents with **multiple responders**; for incidents with one or no engaged users, this value is null.
    attr_accessor :seconds_to_engage

    # Time between the start of an incident, and the first responder to acknowledge.
    attr_accessor :seconds_to_first_ack

    # Time between the start of an incident, and the last additional responder to acknowledge. If an incident has one or no responders, the value will be null.
    attr_accessor :seconds_to_mobilize

    # Time from when an incident was triggered until it was resolved.
    attr_accessor :seconds_to_resolve

    # ID of the service that the incident triggered on.
    attr_accessor :service_id

    # Name of the service that the incident triggered on.
    attr_accessor :service_name

    # Total number of unique interruptions during sleep hours; 10pm-8am every day, based on the user’s time zone.
    attr_accessor :sleep_hour_interruptions

    # Total seconds the incident has been snoozed for.
    attr_accessor :snoozed_seconds

    # The incident status. Can be one of `triggered`, `acknowledged`, or `resolved`.
    attr_accessor :status

    # ID of the team the incident was assigned to.
    attr_accessor :team_id

    # Name of the team the incident was assigned to.
    attr_accessor :team_name

    # Total count of timeout escalations in the incident.
    attr_accessor :timeout_escalation_count

    # Total number of unique interruptions in the incident.
    attr_accessor :total_interruptions

    # Total number of notifications sent for the incident.
    attr_accessor :total_notifications

    # Notification level
    attr_accessor :urgency

    # The total response effort in seconds, [as defined by the user](https://support.pagerduty.com/docs/editing-incidents#edit-incident-duration).
    attr_accessor :user_defined_effort_seconds

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'acknowledged_user_ids' => :'acknowledged_user_ids',
        :'acknowledged_user_names' => :'acknowledged_user_names',
        :'acknowledgement_count' => :'acknowledgement_count',
        :'active_user_count' => :'active_user_count',
        :'assigned_user_ids' => :'assigned_user_ids',
        :'assigned_user_names' => :'assigned_user_names',
        :'assignment_count' => :'assignment_count',
        :'auto_resolved' => :'auto_resolved',
        :'business_hour_interruptions' => :'business_hour_interruptions',
        :'created_at' => :'created_at',
        :'description' => :'description',
        :'engaged_seconds' => :'engaged_seconds',
        :'engaged_user_count' => :'engaged_user_count',
        :'escalation_count' => :'escalation_count',
        :'escalation_policy_id' => :'escalation_policy_id',
        :'escalation_policy_name' => :'escalation_policy_name',
        :'id' => :'id',
        :'incident_number' => :'incident_number',
        :'joined_user_ids' => :'joined_user_ids',
        :'joined_user_names' => :'joined_user_names',
        :'major' => :'major',
        :'manual_escalation_count' => :'manual_escalation_count',
        :'off_hour_interruptions' => :'off_hour_interruptions',
        :'priority_id' => :'priority_id',
        :'priority_name' => :'priority_name',
        :'priority_order' => :'priority_order',
        :'reassignment_count' => :'reassignment_count',
        :'resolved_at' => :'resolved_at',
        :'resolved_by_user_id' => :'resolved_by_user_id',
        :'resolved_by_user_name' => :'resolved_by_user_name',
        :'seconds_to_engage' => :'seconds_to_engage',
        :'seconds_to_first_ack' => :'seconds_to_first_ack',
        :'seconds_to_mobilize' => :'seconds_to_mobilize',
        :'seconds_to_resolve' => :'seconds_to_resolve',
        :'service_id' => :'service_id',
        :'service_name' => :'service_name',
        :'sleep_hour_interruptions' => :'sleep_hour_interruptions',
        :'snoozed_seconds' => :'snoozed_seconds',
        :'status' => :'status',
        :'team_id' => :'team_id',
        :'team_name' => :'team_name',
        :'timeout_escalation_count' => :'timeout_escalation_count',
        :'total_interruptions' => :'total_interruptions',
        :'total_notifications' => :'total_notifications',
        :'urgency' => :'urgency',
        :'user_defined_effort_seconds' => :'user_defined_effort_seconds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'acknowledged_user_ids' => :'Array<String>',
        :'acknowledged_user_names' => :'Array<String>',
        :'acknowledgement_count' => :'Integer',
        :'active_user_count' => :'Integer',
        :'assigned_user_ids' => :'Array<String>',
        :'assigned_user_names' => :'Array<String>',
        :'assignment_count' => :'Integer',
        :'auto_resolved' => :'Boolean',
        :'business_hour_interruptions' => :'Integer',
        :'created_at' => :'String',
        :'description' => :'String',
        :'engaged_seconds' => :'Integer',
        :'engaged_user_count' => :'Integer',
        :'escalation_count' => :'Integer',
        :'escalation_policy_id' => :'String',
        :'escalation_policy_name' => :'String',
        :'id' => :'String',
        :'incident_number' => :'Integer',
        :'joined_user_ids' => :'Array<String>',
        :'joined_user_names' => :'Array<String>',
        :'major' => :'Boolean',
        :'manual_escalation_count' => :'Integer',
        :'off_hour_interruptions' => :'Integer',
        :'priority_id' => :'String',
        :'priority_name' => :'String',
        :'priority_order' => :'Integer',
        :'reassignment_count' => :'Integer',
        :'resolved_at' => :'String',
        :'resolved_by_user_id' => :'String',
        :'resolved_by_user_name' => :'String',
        :'seconds_to_engage' => :'Integer',
        :'seconds_to_first_ack' => :'Integer',
        :'seconds_to_mobilize' => :'Integer',
        :'seconds_to_resolve' => :'Integer',
        :'service_id' => :'String',
        :'service_name' => :'String',
        :'sleep_hour_interruptions' => :'Integer',
        :'snoozed_seconds' => :'Integer',
        :'status' => :'String',
        :'team_id' => :'String',
        :'team_name' => :'String',
        :'timeout_escalation_count' => :'Integer',
        :'total_interruptions' => :'Integer',
        :'total_notifications' => :'Integer',
        :'urgency' => :'String',
        :'user_defined_effort_seconds' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'priority_id',
        :'priority_name',
        :'priority_order',
        :'team_id',
        :'team_name',
        :'user_defined_effort_seconds'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AnalyticsRawIncident` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AnalyticsRawIncident`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'acknowledged_user_ids')
        if (value = attributes[:'acknowledged_user_ids']).is_a?(Array)
          self.acknowledged_user_ids = value
        end
      end

      if attributes.key?(:'acknowledged_user_names')
        if (value = attributes[:'acknowledged_user_names']).is_a?(Array)
          self.acknowledged_user_names = value
        end
      end

      if attributes.key?(:'acknowledgement_count')
        self.acknowledgement_count = attributes[:'acknowledgement_count']
      end

      if attributes.key?(:'active_user_count')
        self.active_user_count = attributes[:'active_user_count']
      end

      if attributes.key?(:'assigned_user_ids')
        if (value = attributes[:'assigned_user_ids']).is_a?(Array)
          self.assigned_user_ids = value
        end
      end

      if attributes.key?(:'assigned_user_names')
        if (value = attributes[:'assigned_user_names']).is_a?(Array)
          self.assigned_user_names = value
        end
      end

      if attributes.key?(:'assignment_count')
        self.assignment_count = attributes[:'assignment_count']
      end

      if attributes.key?(:'auto_resolved')
        self.auto_resolved = attributes[:'auto_resolved']
      end

      if attributes.key?(:'business_hour_interruptions')
        self.business_hour_interruptions = attributes[:'business_hour_interruptions']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'engaged_seconds')
        self.engaged_seconds = attributes[:'engaged_seconds']
      end

      if attributes.key?(:'engaged_user_count')
        self.engaged_user_count = attributes[:'engaged_user_count']
      end

      if attributes.key?(:'escalation_count')
        self.escalation_count = attributes[:'escalation_count']
      end

      if attributes.key?(:'escalation_policy_id')
        self.escalation_policy_id = attributes[:'escalation_policy_id']
      end

      if attributes.key?(:'escalation_policy_name')
        self.escalation_policy_name = attributes[:'escalation_policy_name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'incident_number')
        self.incident_number = attributes[:'incident_number']
      end

      if attributes.key?(:'joined_user_ids')
        if (value = attributes[:'joined_user_ids']).is_a?(Array)
          self.joined_user_ids = value
        end
      end

      if attributes.key?(:'joined_user_names')
        if (value = attributes[:'joined_user_names']).is_a?(Array)
          self.joined_user_names = value
        end
      end

      if attributes.key?(:'major')
        self.major = attributes[:'major']
      end

      if attributes.key?(:'manual_escalation_count')
        self.manual_escalation_count = attributes[:'manual_escalation_count']
      end

      if attributes.key?(:'off_hour_interruptions')
        self.off_hour_interruptions = attributes[:'off_hour_interruptions']
      end

      if attributes.key?(:'priority_id')
        self.priority_id = attributes[:'priority_id']
      end

      if attributes.key?(:'priority_name')
        self.priority_name = attributes[:'priority_name']
      end

      if attributes.key?(:'priority_order')
        self.priority_order = attributes[:'priority_order']
      end

      if attributes.key?(:'reassignment_count')
        self.reassignment_count = attributes[:'reassignment_count']
      end

      if attributes.key?(:'resolved_at')
        self.resolved_at = attributes[:'resolved_at']
      end

      if attributes.key?(:'resolved_by_user_id')
        self.resolved_by_user_id = attributes[:'resolved_by_user_id']
      end

      if attributes.key?(:'resolved_by_user_name')
        self.resolved_by_user_name = attributes[:'resolved_by_user_name']
      end

      if attributes.key?(:'seconds_to_engage')
        self.seconds_to_engage = attributes[:'seconds_to_engage']
      end

      if attributes.key?(:'seconds_to_first_ack')
        self.seconds_to_first_ack = attributes[:'seconds_to_first_ack']
      end

      if attributes.key?(:'seconds_to_mobilize')
        self.seconds_to_mobilize = attributes[:'seconds_to_mobilize']
      end

      if attributes.key?(:'seconds_to_resolve')
        self.seconds_to_resolve = attributes[:'seconds_to_resolve']
      end

      if attributes.key?(:'service_id')
        self.service_id = attributes[:'service_id']
      end

      if attributes.key?(:'service_name')
        self.service_name = attributes[:'service_name']
      end

      if attributes.key?(:'sleep_hour_interruptions')
        self.sleep_hour_interruptions = attributes[:'sleep_hour_interruptions']
      end

      if attributes.key?(:'snoozed_seconds')
        self.snoozed_seconds = attributes[:'snoozed_seconds']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'team_id')
        self.team_id = attributes[:'team_id']
      end

      if attributes.key?(:'team_name')
        self.team_name = attributes[:'team_name']
      end

      if attributes.key?(:'timeout_escalation_count')
        self.timeout_escalation_count = attributes[:'timeout_escalation_count']
      end

      if attributes.key?(:'total_interruptions')
        self.total_interruptions = attributes[:'total_interruptions']
      end

      if attributes.key?(:'total_notifications')
        self.total_notifications = attributes[:'total_notifications']
      end

      if attributes.key?(:'urgency')
        self.urgency = attributes[:'urgency']
      end

      if attributes.key?(:'user_defined_effort_seconds')
        self.user_defined_effort_seconds = attributes[:'user_defined_effort_seconds']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          acknowledged_user_ids == o.acknowledged_user_ids &&
          acknowledged_user_names == o.acknowledged_user_names &&
          acknowledgement_count == o.acknowledgement_count &&
          active_user_count == o.active_user_count &&
          assigned_user_ids == o.assigned_user_ids &&
          assigned_user_names == o.assigned_user_names &&
          assignment_count == o.assignment_count &&
          auto_resolved == o.auto_resolved &&
          business_hour_interruptions == o.business_hour_interruptions &&
          created_at == o.created_at &&
          description == o.description &&
          engaged_seconds == o.engaged_seconds &&
          engaged_user_count == o.engaged_user_count &&
          escalation_count == o.escalation_count &&
          escalation_policy_id == o.escalation_policy_id &&
          escalation_policy_name == o.escalation_policy_name &&
          id == o.id &&
          incident_number == o.incident_number &&
          joined_user_ids == o.joined_user_ids &&
          joined_user_names == o.joined_user_names &&
          major == o.major &&
          manual_escalation_count == o.manual_escalation_count &&
          off_hour_interruptions == o.off_hour_interruptions &&
          priority_id == o.priority_id &&
          priority_name == o.priority_name &&
          priority_order == o.priority_order &&
          reassignment_count == o.reassignment_count &&
          resolved_at == o.resolved_at &&
          resolved_by_user_id == o.resolved_by_user_id &&
          resolved_by_user_name == o.resolved_by_user_name &&
          seconds_to_engage == o.seconds_to_engage &&
          seconds_to_first_ack == o.seconds_to_first_ack &&
          seconds_to_mobilize == o.seconds_to_mobilize &&
          seconds_to_resolve == o.seconds_to_resolve &&
          service_id == o.service_id &&
          service_name == o.service_name &&
          sleep_hour_interruptions == o.sleep_hour_interruptions &&
          snoozed_seconds == o.snoozed_seconds &&
          status == o.status &&
          team_id == o.team_id &&
          team_name == o.team_name &&
          timeout_escalation_count == o.timeout_escalation_count &&
          total_interruptions == o.total_interruptions &&
          total_notifications == o.total_notifications &&
          urgency == o.urgency &&
          user_defined_effort_seconds == o.user_defined_effort_seconds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acknowledged_user_ids, acknowledged_user_names, acknowledgement_count, active_user_count, assigned_user_ids, assigned_user_names, assignment_count, auto_resolved, business_hour_interruptions, created_at, description, engaged_seconds, engaged_user_count, escalation_count, escalation_policy_id, escalation_policy_name, id, incident_number, joined_user_ids, joined_user_names, major, manual_escalation_count, off_hour_interruptions, priority_id, priority_name, priority_order, reassignment_count, resolved_at, resolved_by_user_id, resolved_by_user_name, seconds_to_engage, seconds_to_first_ack, seconds_to_mobilize, seconds_to_resolve, service_id, service_name, sleep_hour_interruptions, snoozed_seconds, status, team_id, team_name, timeout_escalation_count, total_interruptions, total_notifications, urgency, user_defined_effort_seconds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
