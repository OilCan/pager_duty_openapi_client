=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class CustomFieldsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Field
    # Create a new Field, along with the Field Options if provided. An account may have up to 10 Fields.  Scoped OAuth requires: `custom_fields.write` 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomFieldsFieldRequest] :create_custom_fields_field_request 
    # @return [CreateCustomFieldsFieldRequest]
    def create_custom_fields_field(opts = {})
      data, _status_code, _headers = create_custom_fields_field_with_http_info(opts)
      data
    end

    # Create a Field
    # Create a new Field, along with the Field Options if provided. An account may have up to 10 Fields.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomFieldsFieldRequest] :create_custom_fields_field_request 
    # @return [Array<(CreateCustomFieldsFieldRequest, Integer, Hash)>] CreateCustomFieldsFieldRequest data, response status code and response headers
    def create_custom_fields_field_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.create_custom_fields_field ...'
      end
      # resource path
      local_var_path = '/incidents/custom_fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_custom_fields_field_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomFieldsFieldRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.create_custom_fields_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#create_custom_fields_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Field Option
    # Create a new Field Option. Field Options may only be created for Fields that have `field_options`. A Field may have no more than 10 enabled options.  Scoped OAuth requires: `custom_fields.write` 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomFieldsFieldOptionRequest] :create_custom_fields_field_option_request 
    # @return [CreateCustomFieldsFieldOptionRequest]
    def create_custom_fields_field_option(field_id, opts = {})
      data, _status_code, _headers = create_custom_fields_field_option_with_http_info(field_id, opts)
      data
    end

    # Create a Field Option
    # Create a new Field Option. Field Options may only be created for Fields that have &#x60;field_options&#x60;. A Field may have no more than 10 enabled options.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomFieldsFieldOptionRequest] :create_custom_fields_field_option_request 
    # @return [Array<(CreateCustomFieldsFieldOptionRequest, Integer, Hash)>] CreateCustomFieldsFieldOptionRequest data, response status code and response headers
    def create_custom_fields_field_option_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.create_custom_fields_field_option ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.create_custom_fields_field_option"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}/field_options'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_custom_fields_field_option_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomFieldsFieldOptionRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.create_custom_fields_field_option",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#create_custom_fields_field_option\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Field
    # Delete a Field. Fields may not be deleted if they are used by a Field Schema.  Scoped OAuth requires: `custom_fields.write` 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_custom_fields_field(field_id, opts = {})
      delete_custom_fields_field_with_http_info(field_id, opts)
      nil
    end

    # Delete a Field
    # Delete a Field. Fields may not be deleted if they are used by a Field Schema.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_custom_fields_field_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.delete_custom_fields_field ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.delete_custom_fields_field"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.delete_custom_fields_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#delete_custom_fields_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Field Option
    # Delete a Field Option.  Scoped OAuth requires: `custom_fields.write` 
    # @param field_id [String] The ID of the field.
    # @param field_option_id [String] The ID of the field option.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_custom_fields_field_option(field_id, field_option_id, opts = {})
      delete_custom_fields_field_option_with_http_info(field_id, field_option_id, opts)
      nil
    end

    # Delete a Field Option
    # Delete a Field Option.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param field_id [String] The ID of the field.
    # @param field_option_id [String] The ID of the field option.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_custom_fields_field_option_with_http_info(field_id, field_option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.delete_custom_fields_field_option ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.delete_custom_fields_field_option"
      end
      # verify the required parameter 'field_option_id' is set
      if @api_client.config.client_side_validation && field_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_option_id' when calling CustomFieldsApi.delete_custom_fields_field_option"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}/field_options/{field_option_id}'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s)).sub('{' + 'field_option_id' + '}', CGI.escape(field_option_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.delete_custom_fields_field_option",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#delete_custom_fields_field_option\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Field
    # Show detailed information about a field.  Scoped OAuth requires: `custom_fields.read` 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [CreateCustomFieldsFieldRequest]
    def get_custom_fields_field(field_id, opts = {})
      data, _status_code, _headers = get_custom_fields_field_with_http_info(field_id, opts)
      data
    end

    # Get a Field
    # Show detailed information about a field.  Scoped OAuth requires: &#x60;custom_fields.read&#x60; 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(CreateCustomFieldsFieldRequest, Integer, Hash)>] CreateCustomFieldsFieldRequest data, response status code and response headers
    def get_custom_fields_field_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.get_custom_fields_field ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.get_custom_fields_field"
      end
      allowable_values = ["field_options"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomFieldsFieldRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.get_custom_fields_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#get_custom_fields_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Field Options
    # List all enabled Field Options for a Field.  Scoped OAuth requires: `custom_fields.read` 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @return [ListCustomFieldsFieldOptions200Response]
    def list_custom_fields_field_options(field_id, opts = {})
      data, _status_code, _headers = list_custom_fields_field_options_with_http_info(field_id, opts)
      data
    end

    # List Field Options
    # List all enabled Field Options for a Field.  Scoped OAuth requires: &#x60;custom_fields.read&#x60; 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCustomFieldsFieldOptions200Response, Integer, Hash)>] ListCustomFieldsFieldOptions200Response data, response status code and response headers
    def list_custom_fields_field_options_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.list_custom_fields_field_options ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.list_custom_fields_field_options"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}/field_options'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCustomFieldsFieldOptions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.list_custom_fields_field_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#list_custom_fields_field_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Fields
    # List fields.  Scoped OAuth requires: `custom_fields.read` 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [ListCustomFieldsFields200Response]
    def list_custom_fields_fields(opts = {})
      data, _status_code, _headers = list_custom_fields_fields_with_http_info(opts)
      data
    end

    # List Fields
    # List fields.  Scoped OAuth requires: &#x60;custom_fields.read&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(ListCustomFieldsFields200Response, Integer, Hash)>] ListCustomFieldsFields200Response data, response status code and response headers
    def list_custom_fields_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.list_custom_fields_fields ...'
      end
      allowable_values = ["field_options"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/custom_fields'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCustomFieldsFields200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.list_custom_fields_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#list_custom_fields_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Field
    # Update a field.  Scoped OAuth requires: `custom_fields.write` 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomFieldsFieldRequest] :update_custom_fields_field_request 
    # @return [UpdateCustomFieldsField200Response]
    def update_custom_fields_field(field_id, opts = {})
      data, _status_code, _headers = update_custom_fields_field_with_http_info(field_id, opts)
      data
    end

    # Update a Field
    # Update a field.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param field_id [String] The ID of the field.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomFieldsFieldRequest] :update_custom_fields_field_request 
    # @return [Array<(UpdateCustomFieldsField200Response, Integer, Hash)>] UpdateCustomFieldsField200Response data, response status code and response headers
    def update_custom_fields_field_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.update_custom_fields_field ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.update_custom_fields_field"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_custom_fields_field_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomFieldsField200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.update_custom_fields_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#update_custom_fields_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Field Option
    # Update Field Option for a Field.  Scoped OAuth requires: `custom_fields.write` 
    # @param field_id [String] The ID of the field.
    # @param field_option_id [String] The ID of the field option.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomFieldsFieldOptionRequest] :update_custom_fields_field_option_request 
    # @return [CreateCustomFieldsFieldOptionRequest]
    def update_custom_fields_field_option(field_id, field_option_id, opts = {})
      data, _status_code, _headers = update_custom_fields_field_option_with_http_info(field_id, field_option_id, opts)
      data
    end

    # Update a Field Option
    # Update Field Option for a Field.  Scoped OAuth requires: &#x60;custom_fields.write&#x60; 
    # @param field_id [String] The ID of the field.
    # @param field_option_id [String] The ID of the field option.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomFieldsFieldOptionRequest] :update_custom_fields_field_option_request 
    # @return [Array<(CreateCustomFieldsFieldOptionRequest, Integer, Hash)>] CreateCustomFieldsFieldOptionRequest data, response status code and response headers
    def update_custom_fields_field_option_with_http_info(field_id, field_option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.update_custom_fields_field_option ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling CustomFieldsApi.update_custom_fields_field_option"
      end
      # verify the required parameter 'field_option_id' is set
      if @api_client.config.client_side_validation && field_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_option_id' when calling CustomFieldsApi.update_custom_fields_field_option"
      end
      # resource path
      local_var_path = '/incidents/custom_fields/{field_id}/field_options/{field_option_id}'.sub('{' + 'field_id' + '}', CGI.escape(field_id.to_s)).sub('{' + 'field_option_id' + '}', CGI.escape(field_option_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_custom_fields_field_option_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomFieldsFieldOptionRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CustomFieldsApi.update_custom_fields_field_option",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#update_custom_fields_field_option\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
