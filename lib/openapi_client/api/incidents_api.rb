=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class IncidentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an Incident
    # Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write`  This API operation has operation specific rate limits. See the [Rate Limits](https://developer.pagerduty.com/docs/72d3b724589e3-rest-api-rate-limits) page for more information. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentRequest] :create_incident_request 
    # @return [CreateIncident201Response]
    def create_incident(accept, content_type, from, opts = {})
      data, _status_code, _headers = create_incident_with_http_info(accept, content_type, from, opts)
      data
    end

    # Create an Incident
    # Create an incident synchronously without a corresponding event from a monitoring service.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60;  This API operation has operation specific rate limits. See the [Rate Limits](https://developer.pagerduty.com/docs/72d3b724589e3-rest-api-rate-limits) page for more information. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentRequest] :create_incident_request 
    # @return [Array<(CreateIncident201Response, Integer, Hash)>] CreateIncident201Response data, response status code and response headers
    def create_incident_with_http_info(accept, content_type, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.create_incident"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.create_incident"
      end
      # resource path
      local_var_path = '/incidents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncident201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a note on an incident
    # Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentNoteRequest] :create_incident_note_request 
    # @return [CreateIncidentNote200Response]
    def create_incident_note(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = create_incident_note_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Create a note on an incident
    # Create a new note for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 2000 notes can be added to an incident.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentNoteRequest] :create_incident_note_request 
    # @return [Array<(CreateIncidentNote200Response, Integer, Hash)>] CreateIncidentNote200Response data, response status code and response headers
    def create_incident_note_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident_note ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident_note"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.create_incident_note"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.create_incident_note"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.create_incident_note"
      end
      # resource path
      local_var_path = '/incidents/{id}/notes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_note_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentNote200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident_note",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Notification Subscribers
    # Subscribe the given entities to Incident Status Update Notifications.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to subscribe.
    # @return [CreateBusinessServiceNotificationSubscribers200Response]
    def create_incident_notification_subscribers(accept, id, opts = {})
      data, _status_code, _headers = create_incident_notification_subscribers_with_http_info(accept, id, opts)
      data
    end

    # Add Notification Subscribers
    # Subscribe the given entities to Incident Status Update Notifications.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to subscribe.
    # @return [Array<(CreateBusinessServiceNotificationSubscribers200Response, Integer, Hash)>] CreateBusinessServiceNotificationSubscribers200Response data, response status code and response headers
    def create_incident_notification_subscribers_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident_notification_subscribers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident_notification_subscribers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.create_incident_notification_subscribers"
      end
      # resource path
      local_var_path = '/incidents/{id}/status_updates/subscribers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_business_service_notification_subscribers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessServiceNotificationSubscribers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident_notification_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident_notification_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a responder request for an incident
    # Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentResponderRequestRequest] :create_incident_responder_request_request 
    # @return [CreateIncidentResponderRequest200Response]
    def create_incident_responder_request(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = create_incident_responder_request_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Create a responder request for an incident
    # Send a new responder request for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentResponderRequestRequest] :create_incident_responder_request_request 
    # @return [Array<(CreateIncidentResponderRequest200Response, Integer, Hash)>] CreateIncidentResponderRequest200Response data, response status code and response headers
    def create_incident_responder_request_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident_responder_request ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident_responder_request"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.create_incident_responder_request"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.create_incident_responder_request"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.create_incident_responder_request"
      end
      # resource path
      local_var_path = '/incidents/{id}/responder_requests'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_responder_request_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentResponderRequest200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident_responder_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident_responder_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Snooze an incident
    # Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentSnoozeRequest] :create_incident_snooze_request 
    # @return [CreateIncident201Response]
    def create_incident_snooze(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = create_incident_snooze_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Snooze an incident
    # Snooze an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentSnoozeRequest] :create_incident_snooze_request 
    # @return [Array<(CreateIncident201Response, Integer, Hash)>] CreateIncident201Response data, response status code and response headers
    def create_incident_snooze_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident_snooze ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident_snooze"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.create_incident_snooze"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.create_incident_snooze"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.create_incident_snooze"
      end
      # resource path
      local_var_path = '/incidents/{id}/snooze'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_snooze_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncident201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident_snooze",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident_snooze\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a status update on an incident
    # Create a new status update for the specified incident. Optionally pass `subject` and `html_message` properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentStatusUpdateRequest] :create_incident_status_update_request 
    # @return [CreateIncidentStatusUpdate200Response]
    def create_incident_status_update(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = create_incident_status_update_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Create a status update on an incident
    # Create a new status update for the specified incident. Optionally pass &#x60;subject&#x60; and &#x60;html_message&#x60; properties in the request body to override the email notification that gets sent.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateIncidentStatusUpdateRequest] :create_incident_status_update_request 
    # @return [Array<(CreateIncidentStatusUpdate200Response, Integer, Hash)>] CreateIncidentStatusUpdate200Response data, response status code and response headers
    def create_incident_status_update_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.create_incident_status_update ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.create_incident_status_update"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.create_incident_status_update"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.create_incident_status_update"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.create_incident_status_update"
      end
      # resource path
      local_var_path = '/incidents/{id}/status_updates'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_incident_status_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncidentStatusUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.create_incident_status_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#create_incident_status_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an incident
    # Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [CreateIncident201Response]
    def get_incident(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_incident_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an incident
    # Show detailed information about an incident. Accepts either an incident id, or an incident number.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(CreateIncident201Response, Integer, Hash)>] CreateIncident201Response data, response status code and response headers
    def get_incident_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_incident ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_incident"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.get_incident"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_incident"
      end
      allowable_values = ["acknowledgers", "agents", "assignees", "conference_bridge", "custom_fields", "escalation_policies", "first_trigger_log_entries", "priorities", "services", "teams", "users"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIncident201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_incident",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an alert
    # Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param alert_id [String] The id of the alert to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentAlert200Response]
    def get_incident_alert(accept, content_type, id, alert_id, opts = {})
      data, _status_code, _headers = get_incident_alert_with_http_info(accept, content_type, id, alert_id, opts)
      data
    end

    # Get an alert
    # Show detailed information about an alert. Accepts an alert id.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param alert_id [String] The id of the alert to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentAlert200Response, Integer, Hash)>] GetIncidentAlert200Response data, response status code and response headers
    def get_incident_alert_with_http_info(accept, content_type, id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_incident_alert ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_incident_alert"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.get_incident_alert"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_incident_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling IncidentsApi.get_incident_alert"
      end
      # resource path
      local_var_path = '/incidents/{id}/alerts/{alert_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentAlert200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_incident_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_incident_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Custom Field Values
    # Get custom field values for an incident.  <!-- theme: warning -->  Scoped OAuth requires: `incidents.read` 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentFieldValues200Response]
    def get_incident_field_values(id, opts = {})
      data, _status_code, _headers = get_incident_field_values_with_http_info(id, opts)
      data
    end

    # Get Custom Field Values
    # Get custom field values for an incident.  &lt;!-- theme: warning --&gt;  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentFieldValues200Response, Integer, Hash)>] GetIncidentFieldValues200Response data, response status code and response headers
    def get_incident_field_values_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_incident_field_values ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_incident_field_values"
      end
      # resource path
      local_var_path = '/incidents/{id}/custom_fields/values'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentFieldValues200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_incident_field_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_incident_field_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Business Services impacted by the given Incident
    # Retrieve a list of Business Services that are being impacted by the given Incident. Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentImpactedBusinessServices200Response]
    def get_incident_impacted_business_services(accept, id, x_early_access, opts = {})
      data, _status_code, _headers = get_incident_impacted_business_services_with_http_info(accept, id, x_early_access, opts)
      data
    end

    # List Business Services impacted by the given Incident
    # Retrieve a list of Business Services that are being impacted by the given Incident. Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentImpactedBusinessServices200Response, Integer, Hash)>] GetIncidentImpactedBusinessServices200Response data, response status code and response headers
    def get_incident_impacted_business_services_with_http_info(accept, id, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_incident_impacted_business_services ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_incident_impacted_business_services"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_incident_impacted_business_services"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling IncidentsApi.get_incident_impacted_business_services"
      end
      # resource path
      local_var_path = '/incidents/{id}/business_services/impacts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentImpactedBusinessServices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_incident_impacted_business_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_incident_impacted_business_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Notification Subscribers
    # Retrieve a list of Notification Subscribers on the Incident.  <!-- theme: warning --> > Users must be added through `POST /incident/{id}/status_updates/subscribers` to be returned from this endpoint. Scoped OAuth requires: `subscribers.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetIncidentNotificationSubscribers200Response]
    def get_incident_notification_subscribers(accept, id, opts = {})
      data, _status_code, _headers = get_incident_notification_subscribers_with_http_info(accept, id, opts)
      data
    end

    # List Notification Subscribers
    # Retrieve a list of Notification Subscribers on the Incident.  &lt;!-- theme: warning --&gt; &gt; Users must be added through &#x60;POST /incident/{id}/status_updates/subscribers&#x60; to be returned from this endpoint. Scoped OAuth requires: &#x60;subscribers.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncidentNotificationSubscribers200Response, Integer, Hash)>] GetIncidentNotificationSubscribers200Response data, response status code and response headers
    def get_incident_notification_subscribers_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_incident_notification_subscribers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_incident_notification_subscribers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_incident_notification_subscribers"
      end
      # resource path
      local_var_path = '/incidents/{id}/status_updates/subscribers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentNotificationSubscribers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_incident_notification_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_incident_notification_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Outlier Incident
    # Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since The start of the date range over which you want to search.
    # @option opts [String] :additional_details Array of additional attributes to any of the returned incidents for related incidents.
    # @return [GetOutlierIncident200Response]
    def get_outlier_incident(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_outlier_incident_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get Outlier Incident
    # Gets Outlier Incident information for a given Incident on its Service.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#outlier-incident)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since The start of the date range over which you want to search.
    # @option opts [String] :additional_details Array of additional attributes to any of the returned incidents for related incidents.
    # @return [Array<(GetOutlierIncident200Response, Integer, Hash)>] GetOutlierIncident200Response data, response status code and response headers
    def get_outlier_incident_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_outlier_incident ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_outlier_incident"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.get_outlier_incident"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_outlier_incident"
      end
      allowable_values = ["incident"]
      if @api_client.config.client_side_validation && opts[:'additional_details'] && !allowable_values.include?(opts[:'additional_details'])
        fail ArgumentError, "invalid value for \"additional_details\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/{id}/outlier_incident'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'additional_details[]'] = opts[:'additional_details'] if !opts[:'additional_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOutlierIncident200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_outlier_incident",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_outlier_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Past Incidents
    # Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to be returned in the response. (default to 5)
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (default to false)
    # @return [GetPastIncidents200Response]
    def get_past_incidents(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_past_incidents_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get Past Incidents
    # Past Incidents returns Incidents within the past 6 months that have similar metadata and were generated on the same Service as the parent Incident. By default, 5 Past Incidents are returned. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#past_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to be returned in the response. (default to 5)
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in the response body is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated with the total number of Past Incidents.  (default to false)
    # @return [Array<(GetPastIncidents200Response, Integer, Hash)>] GetPastIncidents200Response data, response status code and response headers
    def get_past_incidents_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_past_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_past_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.get_past_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_past_incidents"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 999
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IncidentsApi.get_past_incidents, must be smaller than or equal to 999.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IncidentsApi.get_past_incidents, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/incidents/{id}/past_incidents'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPastIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_past_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_past_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Related Incidents
    # Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_details Array of additional attributes to any of the returned incidents for related incidents.
    # @return [GetRelatedIncidents200Response]
    def get_related_incidents(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_related_incidents_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get Related Incidents
    # Returns the 20 most recent Related Incidents that are impacting other Responders and Services. Note: This feature is currently available as part of the Event Intelligence package or Digital Operations plan only.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#related_incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_details Array of additional attributes to any of the returned incidents for related incidents.
    # @return [Array<(GetRelatedIncidents200Response, Integer, Hash)>] GetRelatedIncidents200Response data, response status code and response headers
    def get_related_incidents_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.get_related_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.get_related_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.get_related_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.get_related_incidents"
      end
      allowable_values = ["incident"]
      if @api_client.config.client_side_validation && opts[:'additional_details'] && !allowable_values.include?(opts[:'additional_details'])
        fail ArgumentError, "invalid value for \"additional_details\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/{id}/related_incidents'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'additional_details[]'] = opts[:'additional_details'] if !opts[:'additional_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRelatedIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.get_related_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#get_related_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List alerts for an incident
    # List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :alert_key Alert de-duplication key.
    # @option opts [String] :statuses Return only alerts with the given statuses. (More status codes may be introduced in the future.)
    # @option opts [String] :sort_by Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending.
    # @option opts [String] :include Array of additional details to include.
    # @return [ListIncidentAlerts200Response]
    def list_incident_alerts(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_incident_alerts_with_http_info(accept, content_type, id, opts)
      data
    end

    # List alerts for an incident
    # List alerts for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :alert_key Alert de-duplication key.
    # @option opts [String] :statuses Return only alerts with the given statuses. (More status codes may be introduced in the future.)
    # @option opts [String] :sort_by Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending.
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(ListIncidentAlerts200Response, Integer, Hash)>] ListIncidentAlerts200Response data, response status code and response headers
    def list_incident_alerts_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.list_incident_alerts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.list_incident_alerts"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.list_incident_alerts"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.list_incident_alerts"
      end
      allowable_values = ["triggered", "resolved"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !allowable_values.include?(opts[:'statuses'])
        fail ArgumentError, "invalid value for \"statuses\", must be one of #{allowable_values}"
      end
      allowable_values = ["created_at", "resolved_at", "created_at:asc", "created_at:desc", "resolved_at:asc", "resolved_at:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["services", "first_trigger_log_entries", "incidents"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/{id}/alerts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?
      query_params[:'alert_key'] = opts[:'alert_key'] if !opts[:'alert_key'].nil?
      query_params[:'statuses[]'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentAlerts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.list_incident_alerts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#list_incident_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List log entries for an incident
    # List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :time_zone Time zone in which results will be rendered. This will default to the account time zone.
    # @option opts [Time] :since The start of the date range over which you want to search.
    # @option opts [Time] :_until The end of the date range over which you want to search.
    # @option opts [Boolean] :is_overview If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (default to false)
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [ListIncidentLogEntries200Response]
    def list_incident_log_entries(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_incident_log_entries_with_http_info(accept, content_type, id, opts)
      data
    end

    # List log entries for an incident
    # List log entries for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  A Log Entry are a record of all events on your account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :time_zone Time zone in which results will be rendered. This will default to the account time zone.
    # @option opts [Time] :since The start of the date range over which you want to search.
    # @option opts [Time] :_until The end of the date range over which you want to search.
    # @option opts [Boolean] :is_overview If &#x60;true&#x60;, will return a subset of log entries that show only the most important changes to the incident. (default to false)
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [Array<(ListIncidentLogEntries200Response, Integer, Hash)>] ListIncidentLogEntries200Response data, response status code and response headers
    def list_incident_log_entries_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.list_incident_log_entries ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.list_incident_log_entries"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.list_incident_log_entries"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.list_incident_log_entries"
      end
      allowable_values = ["incidents", "services", "channels", "teams"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents/{id}/log_entries'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?
      query_params[:'time_zone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'is_overview'] = opts[:'is_overview'] if !opts[:'is_overview'].nil?
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentLogEntries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.list_incident_log_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#list_incident_log_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List notes for an incident
    # List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [ListIncidentNotes200Response]
    def list_incident_notes(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_incident_notes_with_http_info(accept, content_type, id, opts)
      data
    end

    # List notes for an incident
    # List existing notes for the specified incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListIncidentNotes200Response, Integer, Hash)>] ListIncidentNotes200Response data, response status code and response headers
    def list_incident_notes_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.list_incident_notes ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.list_incident_notes"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.list_incident_notes"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.list_incident_notes"
      end
      # resource path
      local_var_path = '/incidents/{id}/notes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentNotes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.list_incident_notes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#list_incident_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List incidents
    # List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page. Maximum of 10000.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :date_range When set to all, the since and until parameters and defaults are ignored.
    # @option opts [String] :incident_key Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key.
    # @option opts [Array<String>] :service_ids Returns only the incidents associated with the passed service(s). This expects one or more service IDs.
    # @option opts [Array<String>] :team_ids An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter.
    # @option opts [Array<String>] :user_ids Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user.
    # @option opts [String] :urgencies Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this.
    # @option opts [String] :time_zone Time zone in which results will be rendered. This will default to the account time zone.
    # @option opts [String] :statuses Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.)
    # @option opts [Array<String>] :sort_by Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency.
    # @option opts [String] :include Array of additional details to include.
    # @option opts [String] :since The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month.
    # @option opts [String] :_until The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month.
    # @return [ListIncidents200Response]
    def list_incidents(accept, content_type, opts = {})
      data, _status_code, _headers = list_incidents_with_http_info(accept, content_type, opts)
      data
    end

    # List incidents
    # List existing incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page. Maximum of 10000.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :date_range When set to all, the since and until parameters and defaults are ignored.
    # @option opts [String] :incident_key Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key.
    # @option opts [Array<String>] :service_ids Returns only the incidents associated with the passed service(s). This expects one or more service IDs.
    # @option opts [Array<String>] :team_ids An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter.
    # @option opts [Array<String>] :user_ids Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user.
    # @option opts [String] :urgencies Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the &#x60;urgencies&#x60; ability to do this.
    # @option opts [String] :time_zone Time zone in which results will be rendered. This will default to the account time zone.
    # @option opts [String] :statuses Return only incidents with the given statuses. To query multiple statuses, pass &#x60;statuses[]&#x60; more than once, for example: &#x60;https://api.pagerduty.com/incidents?statuses[]&#x3D;triggered&amp;statuses[]&#x3D;acknowledged&#x60;. (More status codes may be introduced in the future.)
    # @option opts [Array<String>] :sort_by Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the &#x60;urgencies&#x60; ability to sort by the urgency.
    # @option opts [String] :include Array of additional details to include.
    # @option opts [String] :since The start of the date range over which you want to search. Maximum range is 6 months and default is 1 month.
    # @option opts [String] :_until The end of the date range over which you want to search. Maximum range is 6 months and default is 1 month.
    # @return [Array<(ListIncidents200Response, Integer, Hash)>] ListIncidents200Response data, response status code and response headers
    def list_incidents_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.list_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.list_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.list_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["all"]
      if @api_client.config.client_side_validation && opts[:'date_range'] && !allowable_values.include?(opts[:'date_range'])
        fail ArgumentError, "invalid value for \"date_range\", must be one of #{allowable_values}"
      end
      allowable_values = ["high", "low"]
      if @api_client.config.client_side_validation && opts[:'urgencies'] && !allowable_values.include?(opts[:'urgencies'])
        fail ArgumentError, "invalid value for \"urgencies\", must be one of #{allowable_values}"
      end
      allowable_values = ["triggered", "acknowledged", "resolved"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !allowable_values.include?(opts[:'statuses'])
        fail ArgumentError, "invalid value for \"statuses\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'sort_by'].nil? && opts[:'sort_by'].length > 2
        fail ArgumentError, 'invalid value for "opts[:"sort_by"]" when calling IncidentsApi.list_incidents, number of items must be less than or equal to 2.'
      end

      allowable_values = ["acknowledgers", "agents", "assignees", "conference_bridge", "escalation_policies", "first_trigger_log_entries", "priorities", "services", "teams", "users"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/incidents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?
      query_params[:'date_range'] = opts[:'date_range'] if !opts[:'date_range'].nil?
      query_params[:'incident_key'] = opts[:'incident_key'] if !opts[:'incident_key'].nil?
      query_params[:'service_ids[]'] = @api_client.build_collection_param(opts[:'service_ids'], :multi) if !opts[:'service_ids'].nil?
      query_params[:'team_ids[]'] = @api_client.build_collection_param(opts[:'team_ids'], :multi) if !opts[:'team_ids'].nil?
      query_params[:'user_ids[]'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'urgencies[]'] = opts[:'urgencies'] if !opts[:'urgencies'].nil?
      query_params[:'time_zone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?
      query_params[:'statuses[]'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.list_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#list_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge incidents
    # Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [MergeIncidentsRequest] :merge_incidents_request 
    # @return [MergeIncidents200Response]
    def merge_incidents(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = merge_incidents_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Merge incidents
    # Merge a list of source incidents into this incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [MergeIncidentsRequest] :merge_incidents_request 
    # @return [Array<(MergeIncidents200Response, Integer, Hash)>] MergeIncidents200Response data, response status code and response headers
    def merge_incidents_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.merge_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.merge_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.merge_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.merge_incidents"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.merge_incidents"
      end
      # resource path
      local_var_path = '/incidents/{id}/merge'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'merge_incidents_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MergeIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.merge_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#merge_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manually change an Incident's Impact on a Business Service.
    # Change Impact of an Incident on a Business Service. Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param business_service_id [String] The business service ID.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [PutIncidentManualBusinessServiceAssociationRequest] :put_incident_manual_business_service_association_request The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident.  The &#x60;not_impacted&#x60; relation will remove the Incident&#39;s Impact from the specified Business Service.  The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service.
    # @return [PutIncidentManualBusinessServiceAssociation200Response]
    def put_incident_manual_business_service_association(accept, id, business_service_id, x_early_access, opts = {})
      data, _status_code, _headers = put_incident_manual_business_service_association_with_http_info(accept, id, business_service_id, x_early_access, opts)
      data
    end

    # Manually change an Incident&#39;s Impact on a Business Service.
    # Change Impact of an Incident on a Business Service. Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param business_service_id [String] The business service ID.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header with the value &#x60;business-impact-early-access&#x60;. Do not use this endpoint in production, as it may change!
    # @param [Hash] opts the optional parameters
    # @option opts [PutIncidentManualBusinessServiceAssociationRequest] :put_incident_manual_business_service_association_request The &#x60;impacted&#x60; relation will cause the Business Service and any Services that it supports to become impacted by this incident.  The &#x60;not_impacted&#x60; relation will remove the Incident&#39;s Impact from the specified Business Service.  The effect of adding or removing Impact to a Business Service in this way will also change the propagation of Impact to other Services supported by that Business Service.
    # @return [Array<(PutIncidentManualBusinessServiceAssociation200Response, Integer, Hash)>] PutIncidentManualBusinessServiceAssociation200Response data, response status code and response headers
    def put_incident_manual_business_service_association_with_http_info(accept, id, business_service_id, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.put_incident_manual_business_service_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.put_incident_manual_business_service_association"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.put_incident_manual_business_service_association"
      end
      # verify the required parameter 'business_service_id' is set
      if @api_client.config.client_side_validation && business_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_service_id' when calling IncidentsApi.put_incident_manual_business_service_association"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling IncidentsApi.put_incident_manual_business_service_association"
      end
      # resource path
      local_var_path = '/incidents/{id}/business_services/{business_service_id}/impacts'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'business_service_id' + '}', CGI.escape(business_service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_incident_manual_business_service_association_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutIncidentManualBusinessServiceAssociation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.put_incident_manual_business_service_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#put_incident_manual_business_service_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Notification Subscriber
    # Unsubscribes the matching Subscribers from Incident Status Update Notifications.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to unsubscribe.
    # @return [RemoveBusinessServiceNotificationSubscriber200Response]
    def remove_incident_notification_subscribers(accept, id, opts = {})
      data, _status_code, _headers = remove_incident_notification_subscribers_with_http_info(accept, id, opts)
      data
    end

    # Remove Notification Subscriber
    # Unsubscribes the matching Subscribers from Incident Status Update Notifications.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBusinessServiceNotificationSubscribersRequest] :create_business_service_notification_subscribers_request The entities to unsubscribe.
    # @return [Array<(RemoveBusinessServiceNotificationSubscriber200Response, Integer, Hash)>] RemoveBusinessServiceNotificationSubscriber200Response data, response status code and response headers
    def remove_incident_notification_subscribers_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.remove_incident_notification_subscribers ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.remove_incident_notification_subscribers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.remove_incident_notification_subscribers"
      end
      # resource path
      local_var_path = '/incidents/{id}/status_updates/unsubscribe'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_business_service_notification_subscribers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RemoveBusinessServiceNotificationSubscriber200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.remove_incident_notification_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#remove_incident_notification_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Custom Field Values
    # Set custom field values for an incident.  Scoped OAuth requires: `incidents.write` 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [SetIncidentFieldValuesRequest] :set_incident_field_values_request 
    # @return [GetIncidentFieldValues200Response]
    def set_incident_field_values(id, opts = {})
      data, _status_code, _headers = set_incident_field_values_with_http_info(id, opts)
      data
    end

    # Update Custom Field Values
    # Set custom field values for an incident.  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [SetIncidentFieldValuesRequest] :set_incident_field_values_request 
    # @return [Array<(GetIncidentFieldValues200Response, Integer, Hash)>] GetIncidentFieldValues200Response data, response status code and response headers
    def set_incident_field_values_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.set_incident_field_values ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.set_incident_field_values"
      end
      # resource path
      local_var_path = '/incidents/{id}/custom_fields/values'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_incident_field_values_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentFieldValues200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.set_incident_field_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#set_incident_field_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an incident
    # Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateIncidentRequest] :update_incident_request 
    # @return [UpdateIncident200Response]
    def update_incident(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = update_incident_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Update an incident
    # Acknowledge, resolve, escalate or reassign an incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateIncidentRequest] :update_incident_request 
    # @return [Array<(UpdateIncident200Response, Integer, Hash)>] UpdateIncident200Response data, response status code and response headers
    def update_incident_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.update_incident ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.update_incident"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.update_incident"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.update_incident"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.update_incident"
      end
      # resource path
      local_var_path = '/incidents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_incident_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateIncident200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.update_incident",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#update_incident\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an alert
    # Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param alert_id [String] The id of the alert to retrieve.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [GetIncidentAlert200Response] :get_incident_alert200_response The parameters of the alert to update.
    # @return [GetIncidentAlert200Response]
    def update_incident_alert(accept, content_type, id, alert_id, from, opts = {})
      data, _status_code, _headers = update_incident_alert_with_http_info(accept, content_type, id, alert_id, from, opts)
      data
    end

    # Update an alert
    # Resolve an alert or associate an alert with a new parent incident.  An incident represents a problem or an issue that needs to be addressed and resolved.  When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param alert_id [String] The id of the alert to retrieve.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [GetIncidentAlert200Response] :get_incident_alert200_response The parameters of the alert to update.
    # @return [Array<(GetIncidentAlert200Response, Integer, Hash)>] GetIncidentAlert200Response data, response status code and response headers
    def update_incident_alert_with_http_info(accept, content_type, id, alert_id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.update_incident_alert ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.update_incident_alert"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.update_incident_alert"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.update_incident_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling IncidentsApi.update_incident_alert"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.update_incident_alert"
      end
      # resource path
      local_var_path = '/incidents/{id}/alerts/{alert_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_incident_alert200_response'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetIncidentAlert200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.update_incident_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#update_incident_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage alerts
    # Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [UpdateIncidentAlertsRequest] :update_incident_alerts_request 
    # @return [ListIncidentAlerts200Response]
    def update_incident_alerts(accept, content_type, id, from, opts = {})
      data, _status_code, _headers = update_incident_alerts_with_http_info(accept, content_type, id, from, opts)
      data
    end

    # Manage alerts
    # Resolve multiple alerts or associate them with different incidents.  An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.  A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [UpdateIncidentAlertsRequest] :update_incident_alerts_request 
    # @return [Array<(ListIncidentAlerts200Response, Integer, Hash)>] ListIncidentAlerts200Response data, response status code and response headers
    def update_incident_alerts_with_http_info(accept, content_type, id, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.update_incident_alerts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.update_incident_alerts"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.update_incident_alerts"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IncidentsApi.update_incident_alerts"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.update_incident_alerts"
      end
      # resource path
      local_var_path = '/incidents/{id}/alerts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_incident_alerts_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidentAlerts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.update_incident_alerts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#update_incident_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage incidents
    # Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: `incidents.write`  This API operation has operation specific rate limits. See the [Rate Limits](https://developer.pagerduty.com/docs/72d3b724589e3-rest-api-rate-limits) page for more information. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [UpdateIncidentsRequest] :update_incidents_request 
    # @return [ListIncidents200Response]
    def update_incidents(accept, content_type, from, opts = {})
      data, _status_code, _headers = update_incidents_with_http_info(accept, content_type, from, opts)
      data
    end

    # Manage incidents
    # Acknowledge, resolve, escalate or reassign one or more incidents.  An incident represents a problem or an issue that needs to be addressed and resolved.  A maximum of 250 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#incidents)  Scoped OAuth requires: &#x60;incidents.write&#x60;  This API operation has operation specific rate limits. See the [Rate Limits](https://developer.pagerduty.com/docs/72d3b724589e3-rest-api-rate-limits) page for more information. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [UpdateIncidentsRequest] :update_incidents_request 
    # @return [Array<(ListIncidents200Response, Integer, Hash)>] ListIncidents200Response data, response status code and response headers
    def update_incidents_with_http_info(accept, content_type, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.update_incidents ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling IncidentsApi.update_incidents"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling IncidentsApi.update_incidents"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling IncidentsApi.update_incidents"
      end
      # resource path
      local_var_path = '/incidents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_incidents_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ListIncidents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IncidentsApi.update_incidents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#update_incidents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
