=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a user
    # Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The user to be created.
    # @return [CreateUser201Response]
    def create_user(accept, content_type, from, opts = {})
      data, _status_code, _headers = create_user_with_http_info(accept, content_type, from, opts)
      data
    end

    # Create a user
    # Create a new user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param from [String] The email address of a valid user associated with the account making the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The user to be created.
    # @return [Array<(CreateUser201Response, Integer, Hash)>] CreateUser201Response data, response status code and response headers
    def create_user_with_http_info(accept, content_type, from, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.create_user"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling UsersApi.create_user"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'From'] = from

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user contact method
    # Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserContactMethodRequest] :create_user_contact_method_request The contact method to be created.
    # @return [CreateUserContactMethod201Response]
    def create_user_contact_method(accept, content_type, id, opts = {})
      data, _status_code, _headers = create_user_contact_method_with_http_info(accept, content_type, id, opts)
      data
    end

    # Create a user contact method
    # Create a new contact method for the User.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserContactMethodRequest] :create_user_contact_method_request The contact method to be created.
    # @return [Array<(CreateUserContactMethod201Response, Integer, Hash)>] CreateUserContactMethod201Response data, response status code and response headers
    def create_user_contact_method_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_contact_method ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user_contact_method"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.create_user_contact_method"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.create_user_contact_method"
      end
      # resource path
      local_var_path = '/users/{id}/contact_methods'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_contact_method_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserContactMethod201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_contact_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_contact_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a User Handoff Notification Rule
    # Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserHandoffNotificationRuleRequest] :create_user_handoff_notification_rule_request The Handoff Notification Rule to be created.
    # @return [CreateUserHandoffNotificationRuleRequest]
    def create_user_handoff_notification_rule(accept, content_type, id, opts = {})
      data, _status_code, _headers = create_user_handoff_notification_rule_with_http_info(accept, content_type, id, opts)
      data
    end

    # Create a User Handoff Notification Rule
    # Create a new Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserHandoffNotificationRuleRequest] :create_user_handoff_notification_rule_request The Handoff Notification Rule to be created.
    # @return [Array<(CreateUserHandoffNotificationRuleRequest, Integer, Hash)>] CreateUserHandoffNotificationRuleRequest data, response status code and response headers
    def create_user_handoff_notification_rule_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_handoff_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user_handoff_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.create_user_handoff_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.create_user_handoff_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/oncall_handoff_notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_handoff_notification_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserHandoffNotificationRuleRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_handoff_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_handoff_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user notification rule
    # Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserNotificationRuleRequest] :create_user_notification_rule_request The notification rule to be created.
    # @return [CreateUserNotificationRuleRequest]
    def create_user_notification_rule(accept, content_type, id, opts = {})
      data, _status_code, _headers = create_user_notification_rule_with_http_info(accept, content_type, id, opts)
      data
    end

    # Create a user notification rule
    # Create a new notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserNotificationRuleRequest] :create_user_notification_rule_request The notification rule to be created.
    # @return [Array<(CreateUserNotificationRuleRequest, Integer, Hash)>] CreateUserNotificationRuleRequest data, response status code and response headers
    def create_user_notification_rule_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.create_user_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.create_user_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_notification_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserNotificationRuleRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Notification Subcriptions
    # Create new Notification Subscriptions for the given User.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to subscribe to.
    # @return [CreateBusinessServiceNotificationSubscribers200Response]
    def create_user_notification_subscriptions(accept, id, opts = {})
      data, _status_code, _headers = create_user_notification_subscriptions_with_http_info(accept, id, opts)
      data
    end

    # Create Notification Subcriptions
    # Create new Notification Subscriptions for the given User.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to subscribe to.
    # @return [Array<(CreateBusinessServiceNotificationSubscribers200Response, Integer, Hash)>] CreateBusinessServiceNotificationSubscribers200Response data, response status code and response headers
    def create_user_notification_subscriptions_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_notification_subscriptions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user_notification_subscriptions"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.create_user_notification_subscriptions"
      end
      # resource path
      local_var_path = '/users/{id}/notification_subscriptions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_team_notification_subscriptions_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBusinessServiceNotificationSubscribers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_notification_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_notification_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user status update notification rule
    # Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  <!-- theme: warning --> > ### Early Access > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserStatusUpdateNotificationRuleRequest] :create_user_status_update_notification_rule_request The status update notification rule to be created.
    # @return [CreateUserStatusUpdateNotificationRule201Response]
    def create_user_status_update_notification_rule(accept, content_type, x_early_access, id, opts = {})
      data, _status_code, _headers = create_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, opts)
      data
    end

    # Create a user status update notification rule
    # Create a new status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!-- theme: warning --&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserStatusUpdateNotificationRuleRequest] :create_user_status_update_notification_rule_request The status update notification rule to be created.
    # @return [Array<(CreateUserStatusUpdateNotificationRule201Response, Integer, Hash)>] CreateUserStatusUpdateNotificationRule201Response data, response status code and response headers
    def create_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_status_update_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.create_user_status_update_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.create_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling UsersApi.create_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["status-update-notification-rules"]
      if @api_client.config.client_side_validation && !allowable_values.include?(x_early_access)
        fail ArgumentError, "invalid value for \"x_early_access\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.create_user_status_update_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/status_update_notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_status_update_notification_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserStatusUpdateNotificationRule201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_status_update_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_status_update_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the `offboarding` feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about `offboarding` feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(accept, content_type, id, opts = {})
      delete_user_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete a user
    # Remove an existing user.  Returns 400 if the user has assigned incidents unless your [pricing plan](https://www.pagerduty.com/pricing) has the &#x60;offboarding&#x60; feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.  Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.  [*Learn more about &#x60;offboarding&#x60; feature*](https://support.pagerduty.com/docs/offboarding).  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user's contact method
    # Remove a user's contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_contact_method(accept, content_type, id, contact_method_id, opts = {})
      delete_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts)
      nil
    end

    # Delete a user&#39;s contact method
    # Remove a user&#39;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_contact_method ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_contact_method"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_contact_method"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_contact_method"
      end
      # verify the required parameter 'contact_method_id' is set
      if @api_client.config.client_side_validation && contact_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_method_id' when calling UsersApi.delete_user_contact_method"
      end
      # resource path
      local_var_path = '/users/{id}/contact_methods/{contact_method_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'contact_method_id' + '}', CGI.escape(contact_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_contact_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_contact_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a User's Handoff Notification rule
    # Remove a User's Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_handoff_notification_rule(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      delete_user_handoff_notification_rule_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts)
      nil
    end

    # Delete a User&#39;s Handoff Notification rule
    # Remove a User&#39;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_handoff_notification_rule_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_handoff_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_handoff_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_handoff_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_handoff_notification_rule"
      end
      # verify the required parameter 'oncall_handoff_notification_rule_id' is set
      if @api_client.config.client_side_validation && oncall_handoff_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'oncall_handoff_notification_rule_id' when calling UsersApi.delete_user_handoff_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'oncall_handoff_notification_rule_id' + '}', CGI.escape(oncall_handoff_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_handoff_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_handoff_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user's notification rule
    # Remove a user's notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_notification_rule(accept, content_type, id, notification_rule_id, opts = {})
      delete_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts)
      nil
    end

    # Delete a user&#39;s notification rule
    # Remove a user&#39;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_notification_rule"
      end
      # verify the required parameter 'notification_rule_id' is set
      if @api_client.config.client_side_validation && notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_rule_id' when calling UsersApi.delete_user_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/notification_rules/{notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'notification_rule_id' + '}', CGI.escape(notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user's session
    # Delete a user's session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:sessions.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param type [String] The session type for the user session ID.
    # @param session_id [String] The session ID for the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_session(accept, content_type, id, type, session_id, opts = {})
      delete_user_session_with_http_info(accept, content_type, id, type, session_id, opts)
      nil
    end

    # Delete a user&#39;s session
    # Delete a user&#39;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param type [String] The session type for the user session ID.
    # @param session_id [String] The session ID for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_session_with_http_info(accept, content_type, id, type, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_session ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_session"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_session"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_session"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling UsersApi.delete_user_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling UsersApi.delete_user_session"
      end
      # resource path
      local_var_path = '/users/{id}/sessions/{type}/{session_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'session_id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all user sessions
    # Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:sessions.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_sessions(accept, content_type, id, opts = {})
      delete_user_sessions_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete all user sessions
    # Delete all user sessions.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_sessions_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_sessions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_sessions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_sessions"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_sessions"
      end
      # resource path
      local_var_path = '/users/{id}/sessions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user's status update notification rule
    # Remove a user's status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  <!-- theme: warning --> > ### Early Access > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_status_update_notification_rule(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      delete_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts)
      nil
    end

    # Delete a user&#39;s status update notification rule
    # Remove a user&#39;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!-- theme: warning --&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_status_update_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.delete_user_status_update_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.delete_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling UsersApi.delete_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["status-update-notification-rules"]
      if @api_client.config.client_side_validation && !allowable_values.include?(x_early_access)
        fail ArgumentError, "invalid value for \"x_early_access\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user_status_update_notification_rule"
      end
      # verify the required parameter 'status_update_notification_rule_id' is set
      if @api_client.config.client_side_validation && status_update_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'status_update_notification_rule_id' when calling UsersApi.delete_user_status_update_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'status_update_notification_rule_id' + '}', CGI.escape(status_update_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_status_update_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_status_update_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current user
    # Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [CreateUser201Response]
    def get_current_user(accept, content_type, opts = {})
      data, _status_code, _headers = get_current_user_with_http_info(accept, content_type, opts)
      data
    end

    # Get the current user
    # Get details about the current user.  This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users) 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [Array<(CreateUser201Response, Integer, Hash)>] CreateUser201Response data, response status code and response headers
    def get_current_user_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_current_user ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_current_user"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_current_user"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["contact_methods", "notification_rules", "teams", "subdomains"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_current_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user
    # Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [CreateUser201Response]
    def get_user(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get a user
    # Get details about an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [Array<(CreateUser201Response, Integer, Hash)>] CreateUser201Response data, response status code and response headers
    def get_user_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user"
      end
      allowable_values = ["contact_methods", "notification_rules", "teams", "subdomains"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's contact method
    # Get details about a User's contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [CreateUserContactMethod201Response]
    def get_user_contact_method(accept, content_type, id, contact_method_id, opts = {})
      data, _status_code, _headers = get_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts)
      data
    end

    # Get a user&#39;s contact method
    # Get details about a User&#39;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateUserContactMethod201Response, Integer, Hash)>] CreateUserContactMethod201Response data, response status code and response headers
    def get_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_contact_method ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_contact_method"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_contact_method"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_contact_method"
      end
      # verify the required parameter 'contact_method_id' is set
      if @api_client.config.client_side_validation && contact_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_method_id' when calling UsersApi.get_user_contact_method"
      end
      # resource path
      local_var_path = '/users/{id}/contact_methods/{contact_method_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'contact_method_id' + '}', CGI.escape(contact_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserContactMethod201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_contact_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_contact_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a user's contact methods
    # List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetUserContactMethods200Response]
    def get_user_contact_methods(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_contact_methods_with_http_info(accept, content_type, id, opts)
      data
    end

    # List a user&#39;s contact methods
    # List contact methods of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserContactMethods200Response, Integer, Hash)>] GetUserContactMethods200Response data, response status code and response headers
    def get_user_contact_methods_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_contact_methods ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_contact_methods"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_contact_methods"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_contact_methods"
      end
      # resource path
      local_var_path = '/users/{id}/contact_methods'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserContactMethods200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_contact_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_contact_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's handoff notification rule
    # Get details about a User's Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [CreateUserHandoffNotificationRuleRequest]
    def get_user_handoff_notifiaction_rule(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      data, _status_code, _headers = get_user_handoff_notifiaction_rule_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts)
      data
    end

    # Get a user&#39;s handoff notification rule
    # Get details about a User&#39;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateUserHandoffNotificationRuleRequest, Integer, Hash)>] CreateUserHandoffNotificationRuleRequest data, response status code and response headers
    def get_user_handoff_notifiaction_rule_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_handoff_notifiaction_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_handoff_notifiaction_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_handoff_notifiaction_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_handoff_notifiaction_rule"
      end
      # verify the required parameter 'oncall_handoff_notification_rule_id' is set
      if @api_client.config.client_side_validation && oncall_handoff_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'oncall_handoff_notification_rule_id' when calling UsersApi.get_user_handoff_notifiaction_rule"
      end
      # resource path
      local_var_path = '/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'oncall_handoff_notification_rule_id' + '}', CGI.escape(oncall_handoff_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserHandoffNotificationRuleRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_handoff_notifiaction_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_handoff_notifiaction_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a User's Handoff Notification Rules
    # List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetUserHandoffNotificationRules200Response]
    def get_user_handoff_notification_rules(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_handoff_notification_rules_with_http_info(accept, content_type, id, opts)
      data
    end

    # List a User&#39;s Handoff Notification Rules
    # List Handoff Notification Rules of your PagerDuty User. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserHandoffNotificationRules200Response, Integer, Hash)>] GetUserHandoffNotificationRules200Response data, response status code and response headers
    def get_user_handoff_notification_rules_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_handoff_notification_rules ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_handoff_notification_rules"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_handoff_notification_rules"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_handoff_notification_rules"
      end
      # resource path
      local_var_path = '/users/{id}/oncall_handoff_notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserHandoffNotificationRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_handoff_notification_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_handoff_notification_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the License allocated to a User
    # Get the License allocated to a User  Scoped OAuth requires: `licenses.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetUserLicense200Response]
    def get_user_license(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_license_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get the License allocated to a User
    # Get the License allocated to a User  Scoped OAuth requires: &#x60;licenses.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserLicense200Response, Integer, Hash)>] GetUserLicense200Response data, response status code and response headers
    def get_user_license_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_license ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_license"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_license"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_license"
      end
      # resource path
      local_var_path = '/users/{id}/license'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserLicense200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_license",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's notification rule
    # Get details about a user's notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [CreateUserNotificationRuleRequest]
    def get_user_notification_rule(accept, content_type, id, notification_rule_id, opts = {})
      data, _status_code, _headers = get_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts)
      data
    end

    # Get a user&#39;s notification rule
    # Get details about a user&#39;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(CreateUserNotificationRuleRequest, Integer, Hash)>] CreateUserNotificationRuleRequest data, response status code and response headers
    def get_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_notification_rule"
      end
      # verify the required parameter 'notification_rule_id' is set
      if @api_client.config.client_side_validation && notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_rule_id' when calling UsersApi.get_user_notification_rule"
      end
      allowable_values = ["contact_methods"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{id}/notification_rules/{notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'notification_rule_id' + '}', CGI.escape(notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserNotificationRuleRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a user's notification rules
    # List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @option opts [String] :urgency The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;.
    # @return [GetUserNotificationRules200Response]
    def get_user_notification_rules(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_notification_rules_with_http_info(accept, content_type, id, opts)
      data
    end

    # List a user&#39;s notification rules
    # List notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @option opts [String] :urgency The incident urgency for which the notification rules are applied. If not specified, defaults to &#x60;high&#x60;.
    # @return [Array<(GetUserNotificationRules200Response, Integer, Hash)>] GetUserNotificationRules200Response data, response status code and response headers
    def get_user_notification_rules_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_notification_rules ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_notification_rules"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_notification_rules"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_notification_rules"
      end
      allowable_values = ["contact_methods"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      allowable_values = ["high", "low", "all"]
      if @api_client.config.client_side_validation && opts[:'urgency'] && !allowable_values.include?(opts[:'urgency'])
        fail ArgumentError, "invalid value for \"urgency\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{id}/notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'urgency'] = opts[:'urgency'] if !opts[:'urgency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserNotificationRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_notification_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_notification_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Notification Subscriptions
    # Retrieve a list of Notification Subscriptions the given User has.  <!-- theme: warning --> > Users must be added through `POST /users/{id}/notification_subscriptions` to be returned from this endpoint.  Scoped OAuth requires: `subscribers.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetTeamNotificationSubscriptions200Response]
    def get_user_notification_subscriptions(accept, id, opts = {})
      data, _status_code, _headers = get_user_notification_subscriptions_with_http_info(accept, id, opts)
      data
    end

    # List Notification Subscriptions
    # Retrieve a list of Notification Subscriptions the given User has.  &lt;!-- theme: warning --&gt; &gt; Users must be added through &#x60;POST /users/{id}/notification_subscriptions&#x60; to be returned from this endpoint.  Scoped OAuth requires: &#x60;subscribers.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTeamNotificationSubscriptions200Response, Integer, Hash)>] GetTeamNotificationSubscriptions200Response data, response status code and response headers
    def get_user_notification_subscriptions_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_notification_subscriptions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_notification_subscriptions"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_notification_subscriptions"
      end
      # resource path
      local_var_path = '/users/{id}/notification_subscriptions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTeamNotificationSubscriptions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_notification_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_notification_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's session
    # Get details about a user's session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:sessions.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param type [String] The session type for the user session ID.
    # @param session_id [String] The session ID for the user.
    # @param [Hash] opts the optional parameters
    # @return [GetUserSession200Response]
    def get_user_session(accept, content_type, id, type, session_id, opts = {})
      data, _status_code, _headers = get_user_session_with_http_info(accept, content_type, id, type, session_id, opts)
      data
    end

    # Get a user&#39;s session
    # Get details about a user&#39;s session.  Beginning November 2021, user sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param type [String] The session type for the user session ID.
    # @param session_id [String] The session ID for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserSession200Response, Integer, Hash)>] GetUserSession200Response data, response status code and response headers
    def get_user_session_with_http_info(accept, content_type, id, type, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_session ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_session"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_session"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_session"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling UsersApi.get_user_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling UsersApi.get_user_session"
      end
      # resource path
      local_var_path = '/users/{id}/sessions/{type}/{session_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'session_id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserSession200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a user's active sessions
    # List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:sessions.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetUserSessions200Response]
    def get_user_sessions(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_user_sessions_with_http_info(accept, content_type, id, opts)
      data
    end

    # List a user&#39;s active sessions
    # List active sessions of a PagerDuty user.  Beginning November 2021, active sessions no longer includes newly issued OAuth tokens.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:sessions.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserSessions200Response, Integer, Hash)>] GetUserSessions200Response data, response status code and response headers
    def get_user_sessions_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_sessions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_sessions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_sessions"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_sessions"
      end
      # resource path
      local_var_path = '/users/{id}/sessions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserSessions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's status update notification rule
    # Get details about a user's status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  <!-- theme: warning --> > ### Early Access > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [GetUserStatusUpdateNotificationRule200Response]
    def get_user_status_update_notification_rule(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      data, _status_code, _headers = get_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts)
      data
    end

    # Get a user&#39;s status update notification rule
    # Get details about a user&#39;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!-- theme: warning --&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(GetUserStatusUpdateNotificationRule200Response, Integer, Hash)>] GetUserStatusUpdateNotificationRule200Response data, response status code and response headers
    def get_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_status_update_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_status_update_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling UsersApi.get_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["status-update-notification-rules"]
      if @api_client.config.client_side_validation && !allowable_values.include?(x_early_access)
        fail ArgumentError, "invalid value for \"x_early_access\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_status_update_notification_rule"
      end
      # verify the required parameter 'status_update_notification_rule_id' is set
      if @api_client.config.client_side_validation && status_update_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'status_update_notification_rule_id' when calling UsersApi.get_user_status_update_notification_rule"
      end
      allowable_values = ["contact_methods"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'status_update_notification_rule_id' + '}', CGI.escape(status_update_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserStatusUpdateNotificationRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_status_update_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_status_update_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a user's status update notification rules
    # List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  <!-- theme: warning --> > ### Early Access > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [GetUserStatusUpdateNotificationRules200Response]
    def get_user_status_update_notification_rules(accept, content_type, id, x_early_access, opts = {})
      data, _status_code, _headers = get_user_status_update_notification_rules_with_http_info(accept, content_type, id, x_early_access, opts)
      data
    end

    # List a user&#39;s status update notification rules
    # List status update notification rules of your PagerDuty user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!-- theme: warning --&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional details to include.
    # @return [Array<(GetUserStatusUpdateNotificationRules200Response, Integer, Hash)>] GetUserStatusUpdateNotificationRules200Response data, response status code and response headers
    def get_user_status_update_notification_rules_with_http_info(accept, content_type, id, x_early_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_status_update_notification_rules ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.get_user_status_update_notification_rules"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.get_user_status_update_notification_rules"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_status_update_notification_rules"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling UsersApi.get_user_status_update_notification_rules"
      end
      # verify enum value
      allowable_values = ["status-update-notification-rules"]
      if @api_client.config.client_side_validation && !allowable_values.include?(x_early_access)
        fail ArgumentError, "invalid value for \"x_early_access\", must be one of #{allowable_values}"
      end
      allowable_values = ["contact_methods"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{id}/status_update_notification_rules'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserStatusUpdateNotificationRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_status_update_notification_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_status_update_notification_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users
    # List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Filters the result, showing only the records whose name matches the query.
    # @option opts [Array<String>] :team_ids An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter.
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [ListUsers200Response]
    def list_users(accept, content_type, opts = {})
      data, _status_code, _headers = list_users_with_http_info(accept, content_type, opts)
      data
    end

    # List users
    # List users of your PagerDuty account, optionally filtered by a search query.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Filters the result, showing only the records whose name matches the query.
    # @option opts [Array<String>] :team_ids An array of team IDs. Only results related to these teams will be returned. Account must have the &#x60;teams&#x60; ability to use this parameter.
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [Boolean] :total By default the &#x60;total&#x60; field in pagination responses is set to &#x60;null&#x60; to provide the fastest possible response times. Set &#x60;total&#x60; to &#x60;true&#x60; for this field to be populated.  See our [Pagination Docs](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for more information.  (default to false)
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [Array<(ListUsers200Response, Integer, Hash)>] ListUsers200Response data, response status code and response headers
    def list_users_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.list_users ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.list_users"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.list_users"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["contact_methods", "notification_rules", "teams", "subdomains"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'team_ids[]'] = @api_client.build_collection_param(opts[:'team_ids'], :multi) if !opts[:'team_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'total'] = opts[:'total'] if !opts[:'total'].nil?
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListUsers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.list_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List audit records for a user
    # The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the `execution_time` from newest to oldest.  See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: `audit_records.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [Time] :since The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours)
    # @option opts [Time] :_until The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;.
    # @return [AuditRecordResponseSchema]
    def list_users_audit_records(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_users_audit_records_with_http_info(accept, content_type, id, opts)
      data
    end

    # List audit records for a user
    # The response will include audit records with changes that are made to the identified user not changes made by the identified user.   The returned records are sorted by the &#x60;execution_time&#x60; from newest to oldest.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.  For more information see the [Audit API Document](https://developer.pagerduty.com/docs/rest-api-v2/audit-records-api/).  Scoped OAuth requires: &#x60;audit_records.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [Time] :since The start of the date range over which you want to search. If not specified, defaults to &#x60;now() - 24 hours&#x60; (past 24 hours)
    # @option opts [Time] :_until The end of the date range over which you want to search. If not specified, defaults to &#x60;now()&#x60;. May not be more than 31 days after &#x60;since&#x60;.
    # @return [Array<(AuditRecordResponseSchema, Integer, Hash)>] AuditRecordResponseSchema data, response status code and response headers
    def list_users_audit_records_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.list_users_audit_records ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.list_users_audit_records"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.list_users_audit_records"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.list_users_audit_records"
      end
      # resource path
      local_var_path = '/users/{id}/audit/records'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuditRecordResponseSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.list_users_audit_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#list_users_audit_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Notification Subscriptions
    # Unsubscribe the given User from Notifications on the matching Subscribable entities.  Scoped OAuth requires: `subscribers.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to unsubscribe from.
    # @return [RemoveBusinessServiceNotificationSubscriber200Response]
    def unsubscribe_user_notification_subscriptions(accept, id, opts = {})
      data, _status_code, _headers = unsubscribe_user_notification_subscriptions_with_http_info(accept, id, opts)
      data
    end

    # Remove Notification Subscriptions
    # Unsubscribe the given User from Notifications on the matching Subscribable entities.  Scoped OAuth requires: &#x60;subscribers.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamNotificationSubscriptionsRequest] :create_team_notification_subscriptions_request The entities to unsubscribe from.
    # @return [Array<(RemoveBusinessServiceNotificationSubscriber200Response, Integer, Hash)>] RemoveBusinessServiceNotificationSubscriber200Response data, response status code and response headers
    def unsubscribe_user_notification_subscriptions_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.unsubscribe_user_notification_subscriptions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.unsubscribe_user_notification_subscriptions"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.unsubscribe_user_notification_subscriptions"
      end
      # resource path
      local_var_path = '/users/{id}/notification_subscriptions/unsubscribe'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_team_notification_subscriptions_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RemoveBusinessServiceNotificationSubscriber200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.unsubscribe_user_notification_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#unsubscribe_user_notification_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user
    # Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The user to be updated.
    # @return [CreateUser201Response]
    def update_user(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update a user
    # Update an existing user.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The user to be updated.
    # @return [Array<(CreateUser201Response, Integer, Hash)>] CreateUser201Response data, response status code and response headers
    def update_user_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.update_user"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.update_user"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUser201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user's contact method
    # Update a User's contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserContactMethodRequest] :create_user_contact_method_request The user&#39;s contact method to be updated.
    # @return [CreateUserContactMethod201Response]
    def update_user_contact_method(accept, content_type, id, contact_method_id, opts = {})
      data, _status_code, _headers = update_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts)
      data
    end

    # Update a user&#39;s contact method
    # Update a User&#39;s contact method.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param contact_method_id [String] The contact method ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserContactMethodRequest] :create_user_contact_method_request The user&#39;s contact method to be updated.
    # @return [Array<(CreateUserContactMethod201Response, Integer, Hash)>] CreateUserContactMethod201Response data, response status code and response headers
    def update_user_contact_method_with_http_info(accept, content_type, id, contact_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_contact_method ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.update_user_contact_method"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.update_user_contact_method"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user_contact_method"
      end
      # verify the required parameter 'contact_method_id' is set
      if @api_client.config.client_side_validation && contact_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_method_id' when calling UsersApi.update_user_contact_method"
      end
      # resource path
      local_var_path = '/users/{id}/contact_methods/{contact_method_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'contact_method_id' + '}', CGI.escape(contact_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_contact_method_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserContactMethod201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_contact_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_contact_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a User's Handoff Notification Rule
    # Update a User's Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserHandoffNotificationRuleRequest] :create_user_handoff_notification_rule_request The User&#39;s Handoff Notification Rule to be updated.
    # @return [UpdateUserHandoffNotification200Response]
    def update_user_handoff_notification(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      data, _status_code, _headers = update_user_handoff_notification_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts)
      data
    end

    # Update a User&#39;s Handoff Notification Rule
    # Update a User&#39;s Handoff Notification Rule. Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account. For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param oncall_handoff_notification_rule_id [String] The oncall handoff notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserHandoffNotificationRuleRequest] :create_user_handoff_notification_rule_request The User&#39;s Handoff Notification Rule to be updated.
    # @return [Array<(UpdateUserHandoffNotification200Response, Integer, Hash)>] UpdateUserHandoffNotification200Response data, response status code and response headers
    def update_user_handoff_notification_with_http_info(accept, content_type, id, oncall_handoff_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_handoff_notification ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.update_user_handoff_notification"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.update_user_handoff_notification"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user_handoff_notification"
      end
      # verify the required parameter 'oncall_handoff_notification_rule_id' is set
      if @api_client.config.client_side_validation && oncall_handoff_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'oncall_handoff_notification_rule_id' when calling UsersApi.update_user_handoff_notification"
      end
      # resource path
      local_var_path = '/users/{id}/oncall_handoff_notification_rules/{oncall_handoff_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'oncall_handoff_notification_rule_id' + '}', CGI.escape(oncall_handoff_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_handoff_notification_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateUserHandoffNotification200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_handoff_notification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_handoff_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user's notification rule
    # Update a user's notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users:contact_methods.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserNotificationRuleRequest] :create_user_notification_rule_request The user&#39;s notification rule to be updated.
    # @return [UpdateUserNotificationRule200Response]
    def update_user_notification_rule(accept, content_type, id, notification_rule_id, opts = {})
      data, _status_code, _headers = update_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts)
      data
    end

    # Update a user&#39;s notification rule
    # Update a user&#39;s notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users:contact_methods.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param notification_rule_id [String] The notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserNotificationRuleRequest] :create_user_notification_rule_request The user&#39;s notification rule to be updated.
    # @return [Array<(UpdateUserNotificationRule200Response, Integer, Hash)>] UpdateUserNotificationRule200Response data, response status code and response headers
    def update_user_notification_rule_with_http_info(accept, content_type, id, notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.update_user_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.update_user_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user_notification_rule"
      end
      # verify the required parameter 'notification_rule_id' is set
      if @api_client.config.client_side_validation && notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_rule_id' when calling UsersApi.update_user_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/notification_rules/{notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'notification_rule_id' + '}', CGI.escape(notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_notification_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateUserNotificationRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user's status update notification rule
    # Update a user's status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  <!-- theme: warning --> > ### Early Access > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: `users.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserStatusUpdateNotificationRule201Response] :create_user_status_update_notification_rule201_response The user&#39;s status update notification rule to be updated.
    # @return [UpdateUserStatusUpdateNotificationRule200Response]
    def update_user_status_update_notification_rule(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      data, _status_code, _headers = update_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts)
      data
    end

    # Update a user&#39;s status update notification rule
    # Update a user&#39;s status update notification rule.  Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.  &lt;!-- theme: warning --&gt; &gt; ### Early Access &gt; This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#users)  Scoped OAuth requires: &#x60;users.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param x_early_access [String] This header indicates that this API endpoint is __UNDER CONSTRUCTION__ and may change at any time. You __MUST__ pass in this header and the above value. Do not use this endpoint in production, as it may change! 
    # @param id [String] The ID of the resource.
    # @param status_update_notification_rule_id [String] The status update notification rule ID on the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserStatusUpdateNotificationRule201Response] :create_user_status_update_notification_rule201_response The user&#39;s status update notification rule to be updated.
    # @return [Array<(UpdateUserStatusUpdateNotificationRule200Response, Integer, Hash)>] UpdateUserStatusUpdateNotificationRule200Response data, response status code and response headers
    def update_user_status_update_notification_rule_with_http_info(accept, content_type, x_early_access, id, status_update_notification_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_status_update_notification_rule ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling UsersApi.update_user_status_update_notification_rule"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UsersApi.update_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_early_access' is set
      if @api_client.config.client_side_validation && x_early_access.nil?
        fail ArgumentError, "Missing the required parameter 'x_early_access' when calling UsersApi.update_user_status_update_notification_rule"
      end
      # verify enum value
      allowable_values = ["status-update-notification-rules"]
      if @api_client.config.client_side_validation && !allowable_values.include?(x_early_access)
        fail ArgumentError, "invalid value for \"x_early_access\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user_status_update_notification_rule"
      end
      # verify the required parameter 'status_update_notification_rule_id' is set
      if @api_client.config.client_side_validation && status_update_notification_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'status_update_notification_rule_id' when calling UsersApi.update_user_status_update_notification_rule"
      end
      # resource path
      local_var_path = '/users/{id}/status_update_notification_rules/{status_update_notification_rule_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'status_update_notification_rule_id' + '}', CGI.escape(status_update_notification_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'X-EARLY-ACCESS'] = x_early_access

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_status_update_notification_rule201_response'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateUserStatusUpdateNotificationRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_status_update_notification_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_status_update_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
