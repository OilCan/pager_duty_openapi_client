=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class EventOrchestrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Cache Variable for a Global Event Orchestration
    # Create a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def create_cache_var_on_global_orch(accept, content_type, id, opts = {})
      data, _status_code, _headers = create_cache_var_on_global_orch_with_http_info(accept, content_type, id, opts)
      data
    end

    # Create a Cache Variable for a Global Event Orchestration
    # Create a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def create_cache_var_on_global_orch_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.create_cache_var_on_global_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.create_cache_var_on_global_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.create_cache_var_on_global_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.create_cache_var_on_global_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/cache_variables'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_cache_var_on_global_orch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.create_cache_var_on_global_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#create_cache_var_on_global_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Cache Variable for a Service Event Orchestration
    # Create a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def create_cache_var_on_service_orch(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = create_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # Create a Cache Variable for a Service Event Orchestration
    # Create a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def create_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.create_cache_var_on_service_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.create_cache_var_on_service_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.create_cache_var_on_service_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.create_cache_var_on_service_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/cache_variables'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_cache_var_on_global_orch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.create_cache_var_on_service_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#create_cache_var_on_service_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Cache Variable for a Global Event Orchestration
    # Delete a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cache_var_on_global_orch(accept, content_type, id, cache_variable_id, opts = {})
      delete_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts)
      nil
    end

    # Delete a Cache Variable for a Global Event Orchestration
    # Delete a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.delete_cache_var_on_global_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.delete_cache_var_on_global_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.delete_cache_var_on_global_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.delete_cache_var_on_global_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.delete_cache_var_on_global_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/cache_variables/{cache_variable_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.delete_cache_var_on_global_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#delete_cache_var_on_global_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Cache Variable for a Service Event Orchestration
    # Delete a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cache_var_on_service_orch(accept, content_type, service_id, cache_variable_id, opts = {})
      delete_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts)
      nil
    end

    # Delete a Cache Variable for a Service Event Orchestration
    # Delete a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.delete_cache_var_on_service_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.delete_cache_var_on_service_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.delete_cache_var_on_service_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.delete_cache_var_on_service_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.delete_cache_var_on_service_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/cache_variables/{cache_variable_id}'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.delete_cache_var_on_service_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#delete_cache_var_on_service_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Orchestration
    # Delete a Global Event Orchestration.  Once deleted, you will no longer be able to ingest events into PagerDuty using this Orchestration's Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_orchestration(accept, content_type, id, opts = {})
      delete_orchestration_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete an Orchestration
    # Delete a Global Event Orchestration.  Once deleted, you will no longer be able to ingest events into PagerDuty using this Orchestration&#39;s Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orchestration_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.delete_orchestration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.delete_orchestration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.delete_orchestration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.delete_orchestration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.delete_orchestration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#delete_orchestration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Integration for an Event Orchestration
    # Delete an Integration and its associated Routing Key.  Once deleted, PagerDuty will drop all future events sent to PagerDuty using the Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_orchestration_integration(accept, content_type, id, integration_id, opts = {})
      delete_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts)
      nil
    end

    # Delete an Integration for an Event Orchestration
    # Delete an Integration and its associated Routing Key.  Once deleted, PagerDuty will drop all future events sent to PagerDuty using the Routing Key.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.delete_orchestration_integration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.delete_orchestration_integration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.delete_orchestration_integration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.delete_orchestration_integration"
      end
      # verify the required parameter 'integration_id' is set
      if @api_client.config.client_side_validation && integration_id.nil?
        fail ArgumentError, "Missing the required parameter 'integration_id' when calling EventOrchestrationsApi.delete_orchestration_integration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations/{integration_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'integration_id' + '}', CGI.escape(integration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.delete_orchestration_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#delete_orchestration_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Cache Variable for a Global Event Orchestration
    # Get a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def get_cache_var_on_global_orch(accept, content_type, id, cache_variable_id, opts = {})
      data, _status_code, _headers = get_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts)
      data
    end

    # Get a Cache Variable for a Global Event Orchestration
    # Get a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def get_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_cache_var_on_global_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_cache_var_on_global_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_cache_var_on_global_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_cache_var_on_global_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.get_cache_var_on_global_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/cache_variables/{cache_variable_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_cache_var_on_global_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_cache_var_on_global_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Cache Variable for a Service Event Orchestration
    # Get a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def get_cache_var_on_service_orch(accept, content_type, service_id, cache_variable_id, opts = {})
      data, _status_code, _headers = get_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts)
      data
    end

    # Get a Cache Variable for a Service Event Orchestration
    # Get a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def get_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_cache_var_on_service_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_cache_var_on_service_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_cache_var_on_service_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.get_cache_var_on_service_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.get_cache_var_on_service_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/cache_variables/{cache_variable_id}'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_cache_var_on_service_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_cache_var_on_service_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Service Orchestration active status for a Service
    # Get a Service Orchestration's active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [GetOrchActiveStatus200Response]
    def get_orch_active_status(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = get_orch_active_status_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # Get the Service Orchestration active status for a Service
    # Get a Service Orchestration&#39;s active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrchActiveStatus200Response, Integer, Hash)>] GetOrchActiveStatus200Response data, response status code and response headers
    def get_orch_active_status_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orch_active_status ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orch_active_status"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orch_active_status"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.get_orch_active_status"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/active'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrchActiveStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orch_active_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orch_active_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Global Orchestration for an Event Orchestration
    # Get the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [OrchestrationGlobal]
    def get_orch_path_global(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_orch_path_global_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get the Global Orchestration for an Event Orchestration
    # Get the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrchestrationGlobal, Integer, Hash)>] OrchestrationGlobal data, response status code and response headers
    def get_orch_path_global_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orch_path_global ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orch_path_global"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orch_path_global"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_orch_path_global"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/global'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrchestrationGlobal'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orch_path_global",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orch_path_global\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Router for an Event Orchestration
    # Get a Global Orchestration's Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn't match any rules, it'll be sent to service specified in as the `catch_all` or the \"Unrouted\" Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [OrchestrationRouter]
    def get_orch_path_router(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_orch_path_router_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get the Router for an Event Orchestration
    # Get a Global Orchestration&#39;s Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn&#39;t match any rules, it&#39;ll be sent to service specified in as the &#x60;catch_all&#x60; or the \&quot;Unrouted\&quot; Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrchestrationRouter, Integer, Hash)>] OrchestrationRouter data, response status code and response headers
    def get_orch_path_router_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orch_path_router ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orch_path_router"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orch_path_router"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_orch_path_router"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/router'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrchestrationRouter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orch_path_router",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orch_path_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Service Orchestration for a Service
    # Get a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [ServiceOrchestration]
    def get_orch_path_service(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = get_orch_path_service_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # Get the Service Orchestration for a Service
    # Get a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Array of additional Models to include in response.
    # @return [Array<(ServiceOrchestration, Integer, Hash)>] ServiceOrchestration data, response status code and response headers
    def get_orch_path_service_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orch_path_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orch_path_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orch_path_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.get_orch_path_service"
      end
      allowable_values = ["migrated_metadata"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceOrchestration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orch_path_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orch_path_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Unrouted Orchestration for an Event Orchestration
    # Get a Global Event Orchestration's Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don't match any rules in the Global Orchestration's Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [OrchestrationUnrouted]
    def get_orch_path_unrouted(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_orch_path_unrouted_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get the Unrouted Orchestration for an Event Orchestration
    # Get a Global Event Orchestration&#39;s Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don&#39;t match any rules in the Global Orchestration&#39;s Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrchestrationUnrouted, Integer, Hash)>] OrchestrationUnrouted data, response status code and response headers
    def get_orch_path_unrouted_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orch_path_unrouted ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orch_path_unrouted"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orch_path_unrouted"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_orch_path_unrouted"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/unrouted'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrchestrationUnrouted'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orch_path_unrouted",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orch_path_unrouted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Orchestration
    # Get a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration's Routing Key your events will have actions applied via the Global Rules & then routed to the correct Service by the Router Rules, based on the event's content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [PostOrchestration201Response]
    def get_orchestration(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_orchestration_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Orchestration
    # Get a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostOrchestration201Response, Integer, Hash)>] PostOrchestration201Response data, response status code and response headers
    def get_orchestration_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orchestration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orchestration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orchestration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_orchestration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrchestration201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orchestration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orchestration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Integration for an Event Orchestration
    # Get an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @return [GetOrchestrationIntegration200Response]
    def get_orchestration_integration(accept, content_type, id, integration_id, opts = {})
      data, _status_code, _headers = get_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts)
      data
    end

    # Get an Integration for an Event Orchestration
    # Get an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrchestrationIntegration200Response, Integer, Hash)>] GetOrchestrationIntegration200Response data, response status code and response headers
    def get_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.get_orchestration_integration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.get_orchestration_integration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.get_orchestration_integration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.get_orchestration_integration"
      end
      # verify the required parameter 'integration_id' is set
      if @api_client.config.client_side_validation && integration_id.nil?
        fail ArgumentError, "Missing the required parameter 'integration_id' when calling EventOrchestrationsApi.get_orchestration_integration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations/{integration_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'integration_id' + '}', CGI.escape(integration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrchestrationIntegration200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.get_orchestration_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#get_orchestration_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cache Variables for a Global Event Orchestration
    # List Cache Variables for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [ListCacheVarOnGlobalOrch200Response]
    def list_cache_var_on_global_orch(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_cache_var_on_global_orch_with_http_info(accept, content_type, id, opts)
      data
    end

    # List Cache Variables for a Global Event Orchestration
    # List Cache Variables for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCacheVarOnGlobalOrch200Response, Integer, Hash)>] ListCacheVarOnGlobalOrch200Response data, response status code and response headers
    def list_cache_var_on_global_orch_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.list_cache_var_on_global_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.list_cache_var_on_global_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.list_cache_var_on_global_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.list_cache_var_on_global_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/cache_variables'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.list_cache_var_on_global_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#list_cache_var_on_global_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cache Variables for a Service Event Orchestration
    # List Cache Variables for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [ListCacheVarOnGlobalOrch200Response]
    def list_cache_var_on_service_orch(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = list_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # List Cache Variables for a Service Event Orchestration
    # List Cache Variables for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCacheVarOnGlobalOrch200Response, Integer, Hash)>] ListCacheVarOnGlobalOrch200Response data, response status code and response headers
    def list_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.list_cache_var_on_service_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.list_cache_var_on_service_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.list_cache_var_on_service_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.list_cache_var_on_service_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/cache_variables'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.list_cache_var_on_service_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#list_cache_var_on_service_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Event Orchestrations
    # List all Global Event Orchestrations on an Account.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration's Routing Key your events will have actions applied via the Global Rules & then routed to the correct Service by the Router Rules, based on the event's content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [String] :sort_by Used to specify the field you wish to sort the results on. (default to 'name:asc')
    # @return [ListEventOrchestrations200Response]
    def list_event_orchestrations(accept, content_type, opts = {})
      data, _status_code, _headers = list_event_orchestrations_with_http_info(accept, content_type, opts)
      data
    end

    # List Event Orchestrations
    # List all Global Event Orchestrations on an Account.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results per page.
    # @option opts [Integer] :offset Offset to start pagination search results.
    # @option opts [String] :sort_by Used to specify the field you wish to sort the results on. (default to 'name:asc')
    # @return [Array<(ListEventOrchestrations200Response, Integer, Hash)>] ListEventOrchestrations200Response data, response status code and response headers
    def list_event_orchestrations_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.list_event_orchestrations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.list_event_orchestrations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.list_event_orchestrations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["name:asc", "name:desc", "routes:asc", "routes:desc", "created_at:asc", "created_at:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/event_orchestrations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListEventOrchestrations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.list_event_orchestrations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#list_event_orchestrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Integrations for an Event Orchestration
    # List the Integrations associated with this Event Orchestrations.  You can use a Routing Key from these Integrations to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [ListOrchestrationIntegrations200Response]
    def list_orchestration_integrations(accept, content_type, id, opts = {})
      data, _status_code, _headers = list_orchestration_integrations_with_http_info(accept, content_type, id, opts)
      data
    end

    # List Integrations for an Event Orchestration
    # List the Integrations associated with this Event Orchestrations.  You can use a Routing Key from these Integrations to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListOrchestrationIntegrations200Response, Integer, Hash)>] ListOrchestrationIntegrations200Response data, response status code and response headers
    def list_orchestration_integrations_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.list_orchestration_integrations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.list_orchestration_integrations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.list_orchestration_integrations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.list_orchestration_integrations"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListOrchestrationIntegrations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.list_orchestration_integrations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#list_orchestration_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate an Integration from one Event Orchestration to another
    # Move an Integration and its Routing Key from the Event Orchestration specified in the request payload, to the Event Orchestration specified in the request URL.  Any future events sent to this Integration's Routing Key will be processed by this Event Orchestration's Rules.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrateOrchestrationIntegrationRequest] :migrate_orchestration_integration_request 
    # @return [ListOrchestrationIntegrations200Response]
    def migrate_orchestration_integration(accept, content_type, id, opts = {})
      data, _status_code, _headers = migrate_orchestration_integration_with_http_info(accept, content_type, id, opts)
      data
    end

    # Migrate an Integration from one Event Orchestration to another
    # Move an Integration and its Routing Key from the Event Orchestration specified in the request payload, to the Event Orchestration specified in the request URL.  Any future events sent to this Integration&#39;s Routing Key will be processed by this Event Orchestration&#39;s Rules.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrateOrchestrationIntegrationRequest] :migrate_orchestration_integration_request 
    # @return [Array<(ListOrchestrationIntegrations200Response, Integer, Hash)>] ListOrchestrationIntegrations200Response data, response status code and response headers
    def migrate_orchestration_integration_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.migrate_orchestration_integration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.migrate_orchestration_integration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.migrate_orchestration_integration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.migrate_orchestration_integration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations/migration'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'migrate_orchestration_integration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ListOrchestrationIntegrations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.migrate_orchestration_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#migrate_orchestration_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Orchestration
    # Create a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration's Routing Key your events will have actions applied via the Global Rules & then routed to the correct Service by the Router Rules, based on the event's content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationRequest] :post_orchestration_request 
    # @return [PostOrchestration201Response]
    def post_orchestration(accept, content_type, opts = {})
      data, _status_code, _headers = post_orchestration_with_http_info(accept, content_type, opts)
      data
    end

    # Create an Orchestration
    # Create a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationRequest] :post_orchestration_request 
    # @return [Array<(PostOrchestration201Response, Integer, Hash)>] PostOrchestration201Response data, response status code and response headers
    def post_orchestration_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.post_orchestration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.post_orchestration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.post_orchestration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/event_orchestrations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_orchestration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrchestration201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.post_orchestration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#post_orchestration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Integration for an Event Orchestration
    # Create an Integration associated with this Event Orchestration.  You can then use the Routing Key from this new Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
    # @return [PostOrchestrationIntegration201Response]
    def post_orchestration_integration(accept, content_type, id, opts = {})
      data, _status_code, _headers = post_orchestration_integration_with_http_info(accept, content_type, id, opts)
      data
    end

    # Create an Integration for an Event Orchestration
    # Create an Integration associated with this Event Orchestration.  You can then use the Routing Key from this new Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
    # @return [Array<(PostOrchestrationIntegration201Response, Integer, Hash)>] PostOrchestrationIntegration201Response data, response status code and response headers
    def post_orchestration_integration_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.post_orchestration_integration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.post_orchestration_integration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.post_orchestration_integration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.post_orchestration_integration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_orchestration_integration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrchestrationIntegration201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.post_orchestration_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#post_orchestration_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Cache Variable for a Global Event Orchestration
    # Update a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def update_cache_var_on_global_orch(accept, content_type, id, cache_variable_id, opts = {})
      data, _status_code, _headers = update_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts)
      data
    end

    # Update a Cache Variable for a Global Event Orchestration
    # Update a Cache Variable for a Global Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def update_cache_var_on_global_orch_with_http_info(accept, content_type, id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_cache_var_on_global_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_cache_var_on_global_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_cache_var_on_global_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_cache_var_on_global_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.update_cache_var_on_global_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/cache_variables/{cache_variable_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_cache_var_on_global_orch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_cache_var_on_global_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_cache_var_on_global_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Cache Variable for a Service Event Orchestration
    # Update a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [CreateCacheVarOnGlobalOrch200Response]
    def update_cache_var_on_service_orch(accept, content_type, service_id, cache_variable_id, opts = {})
      data, _status_code, _headers = update_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts)
      data
    end

    # Update a Cache Variable for a Service Event Orchestration
    # Update a Cache Variable for a Service Event Orchestration.  Cache Variables allow you to store event data on an Event Orchestration, which can then be used in Event Orchestration rules as part of conditions or actions.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param cache_variable_id [String] The ID of a Cache Variable.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCacheVarOnGlobalOrchRequest] :create_cache_var_on_global_orch_request 
    # @return [Array<(CreateCacheVarOnGlobalOrch200Response, Integer, Hash)>] CreateCacheVarOnGlobalOrch200Response data, response status code and response headers
    def update_cache_var_on_service_orch_with_http_info(accept, content_type, service_id, cache_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_cache_var_on_service_orch ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_cache_var_on_service_orch"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_cache_var_on_service_orch"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.update_cache_var_on_service_orch"
      end
      # verify the required parameter 'cache_variable_id' is set
      if @api_client.config.client_side_validation && cache_variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_variable_id' when calling EventOrchestrationsApi.update_cache_var_on_service_orch"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/cache_variables/{cache_variable_id}'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s)).sub('{' + 'cache_variable_id' + '}', CGI.escape(cache_variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_cache_var_on_global_orch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCacheVarOnGlobalOrch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_cache_var_on_service_orch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_cache_var_on_service_orch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Service Orchestration active status for a Service
    # Update a Service Orchestration's active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [Schema] :body Update Service Orchestration&#39;s active status.
    # @return [GetOrchActiveStatus200Response]
    def update_orch_active_status(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = update_orch_active_status_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # Update the Service Orchestration active status for a Service
    # Update a Service Orchestration&#39;s active status.  A Service Orchestration allows you to set an active status based on whether an event will be evaluated against a service orchestration path (true) or service ruleset (false).  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [Schema] :body Update Service Orchestration&#39;s active status.
    # @return [Array<(GetOrchActiveStatus200Response, Integer, Hash)>] GetOrchActiveStatus200Response data, response status code and response headers
    def update_orch_active_status_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orch_active_status ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orch_active_status"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orch_active_status"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.update_orch_active_status"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}/active'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrchActiveStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orch_active_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orch_active_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Global Orchestration for an Event Orchestration
    # Update the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationGlobal] :orchestration_global Update Global Orchestration rules. Omitted rules and rule details are deleted.
    # @return [UpdateOrchPathGlobal200Response]
    def update_orch_path_global(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_orch_path_global_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update the Global Orchestration for an Event Orchestration
    # Update the Global Orchestration for an Event Orchestration.  Global Orchestration Rules allows you to create a set of Event Rules. These rules evaluate against all Events sent to an Event Orchestration. When a matching rule is found, it can modify and enhance the event and can route the event to another set of Global Rules within this Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationGlobal] :orchestration_global Update Global Orchestration rules. Omitted rules and rule details are deleted.
    # @return [Array<(UpdateOrchPathGlobal200Response, Integer, Hash)>] UpdateOrchPathGlobal200Response data, response status code and response headers
    def update_orch_path_global_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orch_path_global ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orch_path_global"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orch_path_global"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_orch_path_global"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/global'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orchestration_global'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrchPathGlobal200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orch_path_global",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orch_path_global\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Router for an Event Orchestration
    # Update a Global Orchestration's Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn't match any rules, it'll be sent to service specified in as the `catch_all` or the \"Unrouted\" Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationRouter] :orchestration_router Updates to Orchestration Router details. Omitted rules and rule details are deleted.
    # @return [UpdateOrchPathRouter200Response]
    def update_orch_path_router(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_orch_path_router_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update the Router for an Event Orchestration
    # Update a Global Orchestration&#39;s Routing Rules.  An Orchestration Router allows you to create a set of Event Rules. The Router evaluates Events you send to this Global Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn&#39;t match any rules, it&#39;ll be sent to service specified in as the &#x60;catch_all&#x60; or the \&quot;Unrouted\&quot; Orchestration if no service is specified.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationRouter] :orchestration_router Updates to Orchestration Router details. Omitted rules and rule details are deleted.
    # @return [Array<(UpdateOrchPathRouter200Response, Integer, Hash)>] UpdateOrchPathRouter200Response data, response status code and response headers
    def update_orch_path_router_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orch_path_router ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orch_path_router"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orch_path_router"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_orch_path_router"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/router'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orchestration_router'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrchPathRouter200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orch_path_router",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orch_path_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Service Orchestration for a Service
    # Update a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `services.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceOrchestration] :service_orchestration Update Service Orchestration rules. Omitted rules and rule details are deleted.
    # @return [UpdateOrchPathService200Response]
    def update_orch_path_service(accept, content_type, service_id, opts = {})
      data, _status_code, _headers = update_orch_path_service_with_http_info(accept, content_type, service_id, opts)
      data
    end

    # Update the Service Orchestration for a Service
    # Update a Service Orchestration.  A Service Orchestration allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;services.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceOrchestration] :service_orchestration Update Service Orchestration rules. Omitted rules and rule details are deleted.
    # @return [Array<(UpdateOrchPathService200Response, Integer, Hash)>] UpdateOrchPathService200Response data, response status code and response headers
    def update_orch_path_service_with_http_info(accept, content_type, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orch_path_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orch_path_service"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orch_path_service"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling EventOrchestrationsApi.update_orch_path_service"
      end
      # resource path
      local_var_path = '/event_orchestrations/services/{service_id}'.sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'service_orchestration'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrchPathService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orch_path_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orch_path_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Unrouted Orchestration for an Event Orchestration
    # Update a Global Event Orchestration's Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don't match any rules in the Global Orchestration's Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationUnrouted] :orchestration_unrouted Updates to Unrouted Orchestration rules. Omitted rules and rule details are deleted.
    # @return [UpdateOrchPathUnrouted200Response]
    def update_orch_path_unrouted(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_orch_path_unrouted_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update the Unrouted Orchestration for an Event Orchestration
    # Update a Global Event Orchestration&#39;s Rules for Unrouted events.  An Unrouted Orchestration allows you to create a set of Event Rules that will be evaluated against all events that don&#39;t match any rules in the Global Orchestration&#39;s Router. Events that reach the Unrouted Orchestration will never be routed to a specific Service.  The Unrouted Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \&quot;start\&quot; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [OrchestrationUnrouted] :orchestration_unrouted Updates to Unrouted Orchestration rules. Omitted rules and rule details are deleted.
    # @return [Array<(UpdateOrchPathUnrouted200Response, Integer, Hash)>] UpdateOrchPathUnrouted200Response data, response status code and response headers
    def update_orch_path_unrouted_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orch_path_unrouted ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orch_path_unrouted"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orch_path_unrouted"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_orch_path_unrouted"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/unrouted'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orchestration_unrouted'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrchPathUnrouted200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orch_path_unrouted",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orch_path_unrouted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Orchestration
    # Update a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration's Routing Key your events will have actions applied via the Global Rules & then routed to the correct Service by the Router Rules, based on the event's content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationRequest] :post_orchestration_request 
    # @return [PostOrchestration201Response]
    def update_orchestration(accept, content_type, id, opts = {})
      data, _status_code, _headers = update_orchestration_with_http_info(accept, content_type, id, opts)
      data
    end

    # Update an Orchestration
    # Update a Global Event Orchestration.  Global Event Orchestrations allow you define a set of Global Rules and Router Rules, so that when you ingest events using the Orchestration&#39;s Routing Key your events will have actions applied via the Global Rules &amp; then routed to the correct Service by the Router Rules, based on the event&#39;s content.  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationRequest] :post_orchestration_request 
    # @return [Array<(PostOrchestration201Response, Integer, Hash)>] PostOrchestration201Response data, response status code and response headers
    def update_orchestration_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orchestration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orchestration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orchestration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_orchestration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_orchestration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrchestration201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orchestration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orchestration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Integration for an Event Orchestration
    # Update an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: `event_orchestrations.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
    # @return [PostOrchestrationIntegration201Response]
    def update_orchestration_integration(accept, content_type, id, integration_id, opts = {})
      data, _status_code, _headers = update_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts)
      data
    end

    # Update an Integration for an Event Orchestration
    # Update an Integration associated with this Event Orchestrations.  You can use the Routing Key from this Integration to send events to PagerDuty!  For more information see the [API Concepts Document](../../api-reference/ZG9jOjI3NDc5Nzc-api-concepts#event-orchestrations)  Scoped OAuth requires: &#x60;event_orchestrations.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of an Event Orchestration.
    # @param integration_id [String] The ID of an Integration.
    # @param [Hash] opts the optional parameters
    # @option opts [PostOrchestrationIntegrationRequest] :post_orchestration_integration_request 
    # @return [Array<(PostOrchestrationIntegration201Response, Integer, Hash)>] PostOrchestrationIntegration201Response data, response status code and response headers
    def update_orchestration_integration_with_http_info(accept, content_type, id, integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventOrchestrationsApi.update_orchestration_integration ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling EventOrchestrationsApi.update_orchestration_integration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EventOrchestrationsApi.update_orchestration_integration"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventOrchestrationsApi.update_orchestration_integration"
      end
      # verify the required parameter 'integration_id' is set
      if @api_client.config.client_side_validation && integration_id.nil?
        fail ArgumentError, "Missing the required parameter 'integration_id' when calling EventOrchestrationsApi.update_orchestration_integration"
      end
      # resource path
      local_var_path = '/event_orchestrations/{id}/integrations/{integration_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'integration_id' + '}', CGI.escape(integration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_orchestration_integration_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrchestrationIntegration201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"EventOrchestrationsApi.update_orchestration_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventOrchestrationsApi#update_orchestration_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
