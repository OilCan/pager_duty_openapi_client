=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class StatusPagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Status Page Post
    # Create a Post for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostRequest] :create_status_page_post_request 
    # @return [CreateStatusPagePost201Response]
    def create_status_page_post(accept, id, opts = {})
      data, _status_code, _headers = create_status_page_post_with_http_info(accept, id, opts)
      data
    end

    # Create a Status Page Post
    # Create a Post for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostRequest] :create_status_page_post_request 
    # @return [Array<(CreateStatusPagePost201Response, Integer, Hash)>] CreateStatusPagePost201Response data, response status code and response headers
    def create_status_page_post_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.create_status_page_post ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.create_status_page_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.create_status_page_post"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_status_page_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.create_status_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#create_status_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Status Page Post Update
    # Create a Post Update for a Post by Post ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostUpdateRequest] :create_status_page_post_update_request 
    # @return [CreateStatusPagePostUpdate201Response]
    def create_status_page_post_update(accept, id, post_id, opts = {})
      data, _status_code, _headers = create_status_page_post_update_with_http_info(accept, id, post_id, opts)
      data
    end

    # Create a Status Page Post Update
    # Create a Post Update for a Post by Post ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostUpdateRequest] :create_status_page_post_update_request 
    # @return [Array<(CreateStatusPagePostUpdate201Response, Integer, Hash)>] CreateStatusPagePostUpdate201Response data, response status code and response headers
    def create_status_page_post_update_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.create_status_page_post_update ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.create_status_page_post_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.create_status_page_post_update"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.create_status_page_post_update"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/post_updates'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_status_page_post_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePostUpdate201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.create_status_page_post_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#create_status_page_post_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Post Postmortem
    # Create a Postmortem for a Post by Post ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostmortemRequest] :create_status_page_postmortem_request 
    # @return [GetPostmortem200Response]
    def create_status_page_postmortem(accept, id, post_id, opts = {})
      data, _status_code, _headers = create_status_page_postmortem_with_http_info(accept, id, post_id, opts)
      data
    end

    # Create a Post Postmortem
    # Create a Postmortem for a Post by Post ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostmortemRequest] :create_status_page_postmortem_request 
    # @return [Array<(GetPostmortem200Response, Integer, Hash)>] GetPostmortem200Response data, response status code and response headers
    def create_status_page_postmortem_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.create_status_page_postmortem ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.create_status_page_postmortem"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.create_status_page_postmortem"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.create_status_page_postmortem"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/postmortem'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_status_page_postmortem_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostmortem200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.create_status_page_postmortem",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#create_status_page_postmortem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Status Page Subscription
    # Create a Subscription for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPageSubscriptionRequest] :create_status_page_subscription_request 
    # @return [CreateStatusPageSubscription201Response]
    def create_status_page_subscription(accept, id, opts = {})
      data, _status_code, _headers = create_status_page_subscription_with_http_info(accept, id, opts)
      data
    end

    # Create a Status Page Subscription
    # Create a Subscription for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPageSubscriptionRequest] :create_status_page_subscription_request 
    # @return [Array<(CreateStatusPageSubscription201Response, Integer, Hash)>] CreateStatusPageSubscription201Response data, response status code and response headers
    def create_status_page_subscription_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.create_status_page_subscription ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.create_status_page_subscription"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.create_status_page_subscription"
      end
      # resource path
      local_var_path = '/status_pages/{id}/subscriptions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_status_page_subscription_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPageSubscription201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.create_status_page_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#create_status_page_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Status Page Post
    # Delete a Post for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_status_page_post(accept, id, post_id, opts = {})
      delete_status_page_post_with_http_info(accept, id, post_id, opts)
      nil
    end

    # Delete a Status Page Post
    # Delete a Post for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_status_page_post_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.delete_status_page_post ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.delete_status_page_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.delete_status_page_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.delete_status_page_post"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.delete_status_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#delete_status_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Status Page Post Update
    # Delete a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_status_page_post_update(accept, id, post_id, post_update_id, opts = {})
      delete_status_page_post_update_with_http_info(accept, id, post_id, post_update_id, opts)
      nil
    end

    # Delete a Status Page Post Update
    # Delete a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_status_page_post_update_with_http_info(accept, id, post_id, post_update_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.delete_status_page_post_update ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.delete_status_page_post_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.delete_status_page_post_update"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.delete_status_page_post_update"
      end
      # verify the required parameter 'post_update_id' is set
      if @api_client.config.client_side_validation && post_update_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_update_id' when calling StatusPagesApi.delete_status_page_post_update"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/post_updates/{post_update_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s)).sub('{' + 'post_update_id' + '}', CGI.escape(post_update_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.delete_status_page_post_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#delete_status_page_post_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Post Postmortem
    # Delete a Postmortem for a Post by Post ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_status_page_postmortem(accept, id, post_id, opts = {})
      delete_status_page_postmortem_with_http_info(accept, id, post_id, opts)
      nil
    end

    # Delete a Post Postmortem
    # Delete a Postmortem for a Post by Post ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_status_page_postmortem_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.delete_status_page_postmortem ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.delete_status_page_postmortem"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.delete_status_page_postmortem"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.delete_status_page_postmortem"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/postmortem'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.delete_status_page_postmortem",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#delete_status_page_postmortem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Status Page Subscription
    # Delete a Subscription for a Status Page by Status Page ID and Subscription ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param subscription_id [String] The ID of the Status Page subscription.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_status_page_subscription(accept, id, subscription_id, opts = {})
      delete_status_page_subscription_with_http_info(accept, id, subscription_id, opts)
      nil
    end

    # Delete a Status Page Subscription
    # Delete a Subscription for a Status Page by Status Page ID and Subscription ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param subscription_id [String] The ID of the Status Page subscription.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_status_page_subscription_with_http_info(accept, id, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.delete_status_page_subscription ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.delete_status_page_subscription"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.delete_status_page_subscription"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling StatusPagesApi.delete_status_page_subscription"
      end
      # resource path
      local_var_path = '/status_pages/{id}/subscriptions/{subscription_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'subscription_id' + '}', CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.delete_status_page_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#delete_status_page_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Post Update
    # Get a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @return [CreateStatusPagePostUpdate201Response]
    def get_post_update(accept, id, post_id, post_update_id, opts = {})
      data, _status_code, _headers = get_post_update_with_http_info(accept, id, post_id, post_update_id, opts)
      data
    end

    # Get a Status Page Post Update
    # Get a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateStatusPagePostUpdate201Response, Integer, Hash)>] CreateStatusPagePostUpdate201Response data, response status code and response headers
    def get_post_update_with_http_info(accept, id, post_id, post_update_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_post_update ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_post_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_post_update"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.get_post_update"
      end
      # verify the required parameter 'post_update_id' is set
      if @api_client.config.client_side_validation && post_update_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_update_id' when calling StatusPagesApi.get_post_update"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/post_updates/{post_update_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s)).sub('{' + 'post_update_id' + '}', CGI.escape(post_update_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePostUpdate201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_post_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_post_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Post Postmortem
    # Get a Postmortem for a Post by Post ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [GetPostmortem200Response]
    def get_postmortem(accept, id, post_id, opts = {})
      data, _status_code, _headers = get_postmortem_with_http_info(accept, id, post_id, opts)
      data
    end

    # Get a Post Postmortem
    # Get a Postmortem for a Post by Post ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostmortem200Response, Integer, Hash)>] GetPostmortem200Response data, response status code and response headers
    def get_postmortem_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_postmortem ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_postmortem"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_postmortem"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.get_postmortem"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/postmortem'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostmortem200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_postmortem",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_postmortem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Impact
    # Get an Impact for a Status Page by Status Page ID and Impact ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param impact_id [String] The ID of the Status Page Impact.
    # @param [Hash] opts the optional parameters
    # @return [GetStatusPageImpact200Response]
    def get_status_page_impact(accept, id, impact_id, opts = {})
      data, _status_code, _headers = get_status_page_impact_with_http_info(accept, id, impact_id, opts)
      data
    end

    # Get a Status Page Impact
    # Get an Impact for a Status Page by Status Page ID and Impact ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param impact_id [String] The ID of the Status Page Impact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatusPageImpact200Response, Integer, Hash)>] GetStatusPageImpact200Response data, response status code and response headers
    def get_status_page_impact_with_http_info(accept, id, impact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_impact ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_impact"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_impact"
      end
      # verify the required parameter 'impact_id' is set
      if @api_client.config.client_side_validation && impact_id.nil?
        fail ArgumentError, "Missing the required parameter 'impact_id' when calling StatusPagesApi.get_status_page_impact"
      end
      # resource path
      local_var_path = '/status_pages/{id}/impacts/{impact_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'impact_id' + '}', CGI.escape(impact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatusPageImpact200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_impact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_impact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Post
    # Get a Post for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Array of additional Models to include in response.
    # @return [CreateStatusPagePost201Response]
    def get_status_page_post(accept, id, post_id, opts = {})
      data, _status_code, _headers = get_status_page_post_with_http_info(accept, id, post_id, opts)
      data
    end

    # Get a Status Page Post
    # Get a Post for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Array of additional Models to include in response.
    # @return [Array<(CreateStatusPagePost201Response, Integer, Hash)>] CreateStatusPagePost201Response data, response status code and response headers
    def get_status_page_post_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_post ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.get_status_page_post"
      end
      allowable_values = ["status_page_post_update"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Service
    # Get a Service for a Status Page by Status Page ID and Service ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param service_id [String] The ID of the Status Page service.
    # @param [Hash] opts the optional parameters
    # @return [GetStatusPageService200Response]
    def get_status_page_service(accept, id, service_id, opts = {})
      data, _status_code, _headers = get_status_page_service_with_http_info(accept, id, service_id, opts)
      data
    end

    # Get a Status Page Service
    # Get a Service for a Status Page by Status Page ID and Service ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param service_id [String] The ID of the Status Page service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatusPageService200Response, Integer, Hash)>] GetStatusPageService200Response data, response status code and response headers
    def get_status_page_service_with_http_info(accept, id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_service ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_service"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling StatusPagesApi.get_status_page_service"
      end
      # resource path
      local_var_path = '/status_pages/{id}/services/{service_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatusPageService200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Severity
    # Get a Severity for a Status Page by Status Page ID and Severity ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param severity_id [String] The ID of the Status Page severity.
    # @param [Hash] opts the optional parameters
    # @return [GetStatusPageSeverity200Response]
    def get_status_page_severity(accept, id, severity_id, opts = {})
      data, _status_code, _headers = get_status_page_severity_with_http_info(accept, id, severity_id, opts)
      data
    end

    # Get a Status Page Severity
    # Get a Severity for a Status Page by Status Page ID and Severity ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param severity_id [String] The ID of the Status Page severity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatusPageSeverity200Response, Integer, Hash)>] GetStatusPageSeverity200Response data, response status code and response headers
    def get_status_page_severity_with_http_info(accept, id, severity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_severity ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_severity"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_severity"
      end
      # verify the required parameter 'severity_id' is set
      if @api_client.config.client_side_validation && severity_id.nil?
        fail ArgumentError, "Missing the required parameter 'severity_id' when calling StatusPagesApi.get_status_page_severity"
      end
      # resource path
      local_var_path = '/status_pages/{id}/severities/{severity_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'severity_id' + '}', CGI.escape(severity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatusPageSeverity200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_severity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_severity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Status
    # Get a Status for a Status Page by Status Page ID and Status ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param status_id [String] The ID of the Status Page status.
    # @param [Hash] opts the optional parameters
    # @return [GetStatusPageStatus200Response]
    def get_status_page_status(accept, id, status_id, opts = {})
      data, _status_code, _headers = get_status_page_status_with_http_info(accept, id, status_id, opts)
      data
    end

    # Get a Status Page Status
    # Get a Status for a Status Page by Status Page ID and Status ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param status_id [String] The ID of the Status Page status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatusPageStatus200Response, Integer, Hash)>] GetStatusPageStatus200Response data, response status code and response headers
    def get_status_page_status_with_http_info(accept, id, status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_status ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_status"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_status"
      end
      # verify the required parameter 'status_id' is set
      if @api_client.config.client_side_validation && status_id.nil?
        fail ArgumentError, "Missing the required parameter 'status_id' when calling StatusPagesApi.get_status_page_status"
      end
      # resource path
      local_var_path = '/status_pages/{id}/statuses/{status_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'status_id' + '}', CGI.escape(status_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatusPageStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Status Page Subscription
    # Get a Subscription for a Status Page by Status Page ID and Subscription ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param subscription_id [String] The ID of the Status Page subscription.
    # @param [Hash] opts the optional parameters
    # @return [CreateStatusPageSubscription201Response]
    def get_status_page_subscription(accept, id, subscription_id, opts = {})
      data, _status_code, _headers = get_status_page_subscription_with_http_info(accept, id, subscription_id, opts)
      data
    end

    # Get a Status Page Subscription
    # Get a Subscription for a Status Page by Status Page ID and Subscription ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param subscription_id [String] The ID of the Status Page subscription.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateStatusPageSubscription201Response, Integer, Hash)>] CreateStatusPageSubscription201Response data, response status code and response headers
    def get_status_page_subscription_with_http_info(accept, id, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.get_status_page_subscription ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.get_status_page_subscription"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.get_status_page_subscription"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling StatusPagesApi.get_status_page_subscription"
      end
      # resource path
      local_var_path = '/status_pages/{id}/subscriptions/{subscription_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'subscription_id' + '}', CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPageSubscription201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.get_status_page_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#get_status_page_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Impacts
    # List Impacts for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [ListStatusPageImpacts200Response]
    def list_status_page_impacts(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_impacts_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Impacts
    # List Impacts for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [Array<(ListStatusPageImpacts200Response, Integer, Hash)>] ListStatusPageImpacts200Response data, response status code and response headers
    def list_status_page_impacts_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_impacts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_impacts"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_impacts"
      end
      allowable_values = ["incident", "maintenance"]
      if @api_client.config.client_side_validation && opts[:'post_type'] && !allowable_values.include?(opts[:'post_type'])
        fail ArgumentError, "invalid value for \"post_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/impacts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post_type'] = opts[:'post_type'] if !opts[:'post_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPageImpacts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_impacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_impacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Post Updates
    # List Post Updates for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reviewed_status Filter by the reviewed status of the Post Update to retrieve.
    # @return [ListStatusPagePostUpdates200Response]
    def list_status_page_post_updates(accept, id, post_id, opts = {})
      data, _status_code, _headers = list_status_page_post_updates_with_http_info(accept, id, post_id, opts)
      data
    end

    # List Status Page Post Updates
    # List Post Updates for a Status Page by Status Page ID and Post ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reviewed_status Filter by the reviewed status of the Post Update to retrieve.
    # @return [Array<(ListStatusPagePostUpdates200Response, Integer, Hash)>] ListStatusPagePostUpdates200Response data, response status code and response headers
    def list_status_page_post_updates_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_post_updates ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_post_updates"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_post_updates"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.list_status_page_post_updates"
      end
      allowable_values = ["approved", "not_reviewed"]
      if @api_client.config.client_side_validation && opts[:'reviewed_status'] && !allowable_values.include?(opts[:'reviewed_status'])
        fail ArgumentError, "invalid value for \"reviewed_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/post_updates'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reviewed_status'] = opts[:'reviewed_status'] if !opts[:'reviewed_status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPagePostUpdates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_post_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_post_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Posts
    # List Posts for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @option opts [String] :reviewed_status Filter by the reviewed status of the Post to retrieve.
    # @option opts [Array<String>] :status Filter by an array of Status identifiers.
    # @return [ListStatusPagePosts200Response]
    def list_status_page_posts(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_posts_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Posts
    # List Posts for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @option opts [String] :reviewed_status Filter by the reviewed status of the Post to retrieve.
    # @option opts [Array<String>] :status Filter by an array of Status identifiers.
    # @return [Array<(ListStatusPagePosts200Response, Integer, Hash)>] ListStatusPagePosts200Response data, response status code and response headers
    def list_status_page_posts_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_posts ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_posts"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_posts"
      end
      allowable_values = ["incident", "maintenance"]
      if @api_client.config.client_side_validation && opts[:'post_type'] && !allowable_values.include?(opts[:'post_type'])
        fail ArgumentError, "invalid value for \"post_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["approved", "not_reviewed"]
      if @api_client.config.client_side_validation && opts[:'reviewed_status'] && !allowable_values.include?(opts[:'reviewed_status'])
        fail ArgumentError, "invalid value for \"reviewed_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post_type'] = opts[:'post_type'] if !opts[:'post_type'].nil?
      query_params[:'reviewed_status'] = opts[:'reviewed_status'] if !opts[:'reviewed_status'].nil?
      query_params[:'status[]'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPagePosts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_posts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_posts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Services
    # List Services for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [ListStatusPageServices200Response]
    def list_status_page_services(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_services_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Services
    # List Services for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListStatusPageServices200Response, Integer, Hash)>] ListStatusPageServices200Response data, response status code and response headers
    def list_status_page_services_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_services ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_services"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_services"
      end
      # resource path
      local_var_path = '/status_pages/{id}/services'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPageServices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Severities
    # List Severities for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [ListStatusPageSeverities200Response]
    def list_status_page_severities(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_severities_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Severities
    # List Severities for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [Array<(ListStatusPageSeverities200Response, Integer, Hash)>] ListStatusPageSeverities200Response data, response status code and response headers
    def list_status_page_severities_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_severities ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_severities"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_severities"
      end
      allowable_values = ["incident", "maintenance"]
      if @api_client.config.client_side_validation && opts[:'post_type'] && !allowable_values.include?(opts[:'post_type'])
        fail ArgumentError, "invalid value for \"post_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/severities'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post_type'] = opts[:'post_type'] if !opts[:'post_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPageSeverities200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_severities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_severities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Statuses
    # List Statuses for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [ListStatusPageStatuses200Response]
    def list_status_page_statuses(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_statuses_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Statuses
    # List Statuses for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_type Filter by Post type.
    # @return [Array<(ListStatusPageStatuses200Response, Integer, Hash)>] ListStatusPageStatuses200Response data, response status code and response headers
    def list_status_page_statuses_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_statuses ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_statuses"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_statuses"
      end
      allowable_values = ["incident", "maintenance"]
      if @api_client.config.client_side_validation && opts[:'post_type'] && !allowable_values.include?(opts[:'post_type'])
        fail ArgumentError, "invalid value for \"post_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/statuses'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post_type'] = opts[:'post_type'] if !opts[:'post_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPageStatuses200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Page Subscriptions
    # List Subscriptions for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by Subscription status.
    # @option opts [String] :channel Filter by Subscription channel.
    # @return [ListStatusPageSubscriptions200Response]
    def list_status_page_subscriptions(accept, id, opts = {})
      data, _status_code, _headers = list_status_page_subscriptions_with_http_info(accept, id, opts)
      data
    end

    # List Status Page Subscriptions
    # List Subscriptions for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by Subscription status.
    # @option opts [String] :channel Filter by Subscription channel.
    # @return [Array<(ListStatusPageSubscriptions200Response, Integer, Hash)>] ListStatusPageSubscriptions200Response data, response status code and response headers
    def list_status_page_subscriptions_with_http_info(accept, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_page_subscriptions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_page_subscriptions"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.list_status_page_subscriptions"
      end
      allowable_values = ["active", "pending"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["webhook", "email", "slack"]
      if @api_client.config.client_side_validation && opts[:'channel'] && !allowable_values.include?(opts[:'channel'])
        fail ArgumentError, "invalid value for \"channel\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages/{id}/subscriptions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPageSubscriptions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_page_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_page_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Status Pages
    # List Status Pages.  Scoped OAuth requires: `status_pages.read` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status_page_type The type of the Status Page.
    # @return [ListStatusPages200Response]
    def list_status_pages(accept, opts = {})
      data, _status_code, _headers = list_status_pages_with_http_info(accept, opts)
      data
    end

    # List Status Pages
    # List Status Pages.  Scoped OAuth requires: &#x60;status_pages.read&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status_page_type The type of the Status Page.
    # @return [Array<(ListStatusPages200Response, Integer, Hash)>] ListStatusPages200Response data, response status code and response headers
    def list_status_pages_with_http_info(accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.list_status_pages ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.list_status_pages"
      end
      allowable_values = ["public", "private"]
      if @api_client.config.client_side_validation && opts[:'status_page_type'] && !allowable_values.include?(opts[:'status_page_type'])
        fail ArgumentError, "invalid value for \"status_page_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/status_pages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status_page_type'] = opts[:'status_page_type'] if !opts[:'status_page_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusPages200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.list_status_pages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#list_status_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Status Page Post
    # Update a Post for a Status Page by Status Page ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStatusPagePostRequest] :update_status_page_post_request 
    # @return [CreateStatusPagePost201Response]
    def update_status_page_post(accept, id, post_id, opts = {})
      data, _status_code, _headers = update_status_page_post_with_http_info(accept, id, post_id, opts)
      data
    end

    # Update a Status Page Post
    # Update a Post for a Status Page by Status Page ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStatusPagePostRequest] :update_status_page_post_request 
    # @return [Array<(CreateStatusPagePost201Response, Integer, Hash)>] CreateStatusPagePost201Response data, response status code and response headers
    def update_status_page_post_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.update_status_page_post ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.update_status_page_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.update_status_page_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.update_status_page_post"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_status_page_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.update_status_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#update_status_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Status Page Post Update
    # Update a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostUpdateRequest] :create_status_page_post_update_request 
    # @return [CreateStatusPagePostUpdate201Response]
    def update_status_page_post_update(accept, id, post_id, post_update_id, opts = {})
      data, _status_code, _headers = update_status_page_post_update_with_http_info(accept, id, post_id, post_update_id, opts)
      data
    end

    # Update a Status Page Post Update
    # Update a Post Update for a Post by Post ID and Post Update ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param post_update_id [String] The ID of the Status Page Post Update.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateStatusPagePostUpdateRequest] :create_status_page_post_update_request 
    # @return [Array<(CreateStatusPagePostUpdate201Response, Integer, Hash)>] CreateStatusPagePostUpdate201Response data, response status code and response headers
    def update_status_page_post_update_with_http_info(accept, id, post_id, post_update_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.update_status_page_post_update ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.update_status_page_post_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.update_status_page_post_update"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.update_status_page_post_update"
      end
      # verify the required parameter 'post_update_id' is set
      if @api_client.config.client_side_validation && post_update_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_update_id' when calling StatusPagesApi.update_status_page_post_update"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/post_updates/{post_update_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s)).sub('{' + 'post_update_id' + '}', CGI.escape(post_update_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_status_page_post_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateStatusPagePostUpdate201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.update_status_page_post_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#update_status_page_post_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Post Postmortem
    # Update a Postmortem for a Post by Post ID.  Scoped OAuth requires: `status_pages.write` 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStatusPagePostmortemRequest] :update_status_page_postmortem_request 
    # @return [GetPostmortem200Response]
    def update_status_page_postmortem(accept, id, post_id, opts = {})
      data, _status_code, _headers = update_status_page_postmortem_with_http_info(accept, id, post_id, opts)
      data
    end

    # Update a Post Postmortem
    # Update a Postmortem for a Post by Post ID.  Scoped OAuth requires: &#x60;status_pages.write&#x60; 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param id [String] The ID of the resource.
    # @param post_id [String] The ID of the Status Page Post.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStatusPagePostmortemRequest] :update_status_page_postmortem_request 
    # @return [Array<(GetPostmortem200Response, Integer, Hash)>] GetPostmortem200Response data, response status code and response headers
    def update_status_page_postmortem_with_http_info(accept, id, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatusPagesApi.update_status_page_postmortem ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling StatusPagesApi.update_status_page_postmortem"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatusPagesApi.update_status_page_postmortem"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling StatusPagesApi.update_status_page_postmortem"
      end
      # resource path
      local_var_path = '/status_pages/{id}/posts/{post_id}/postmortem'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'post_id' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_status_page_postmortem_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostmortem200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"StatusPagesApi.update_status_page_postmortem",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatusPagesApi#update_status_page_postmortem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
