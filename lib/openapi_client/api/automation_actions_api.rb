=begin
#PagerDuty API

#This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema).  Note that properties in some schemas have fields not shown by default such as `readOnly`, `format`, and `default`. Hover your cursor over the right column that looks like `optional+1` to see the full list of fields. 

The version of the OpenAPI document: 2.0.0
Contact: support@pagerduty.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class AutomationActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an Automation Action
    # Create a Script, Process Automation, or Runbook Automation action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param create_automation_action_request [CreateAutomationActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationAction201Response]
    def create_automation_action(accept, content_type, create_automation_action_request, opts = {})
      data, _status_code, _headers = create_automation_action_with_http_info(accept, content_type, create_automation_action_request, opts)
      data
    end

    # Create an Automation Action
    # Create a Script, Process Automation, or Runbook Automation action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param create_automation_action_request [CreateAutomationActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationAction201Response, Integer, Hash)>] CreateAutomationAction201Response data, response status code and response headers
    def create_automation_action_with_http_info(accept, content_type, create_automation_action_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_action ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_action"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_action"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'create_automation_action_request' is set
      if @api_client.config.client_side_validation && create_automation_action_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_action_request' when calling AutomationActionsApi.create_automation_action"
      end
      # resource path
      local_var_path = '/automation_actions/actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_action_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationAction201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Invocation
    # Invokes an Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_invocation_request [CreateAutomationActionInvocationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationActionInvocation201Response]
    def create_automation_action_invocation(accept, content_type, id, create_automation_action_invocation_request, opts = {})
      data, _status_code, _headers = create_automation_action_invocation_with_http_info(accept, content_type, id, create_automation_action_invocation_request, opts)
      data
    end

    # Create an Invocation
    # Invokes an Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_invocation_request [CreateAutomationActionInvocationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationActionInvocation201Response, Integer, Hash)>] CreateAutomationActionInvocation201Response data, response status code and response headers
    def create_automation_action_invocation_with_http_info(accept, content_type, id, create_automation_action_invocation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_action_invocation ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_action_invocation"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_action_invocation"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.create_automation_action_invocation"
      end
      # verify the required parameter 'create_automation_action_invocation_request' is set
      if @api_client.config.client_side_validation && create_automation_action_invocation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_action_invocation_request' when calling AutomationActionsApi.create_automation_action_invocation"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/invocations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_action_invocation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationActionInvocation201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_action_invocation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_action_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate an Automation Action with a service
    # Associate an Automation Action with a service 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_service_assocation_request [CreateAutomationActionServiceAssocationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationActionServiceAssocationRequest]
    def create_automation_action_service_assocation(accept, content_type, id, create_automation_action_service_assocation_request, opts = {})
      data, _status_code, _headers = create_automation_action_service_assocation_with_http_info(accept, content_type, id, create_automation_action_service_assocation_request, opts)
      data
    end

    # Associate an Automation Action with a service
    # Associate an Automation Action with a service 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_service_assocation_request [CreateAutomationActionServiceAssocationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationActionServiceAssocationRequest, Integer, Hash)>] CreateAutomationActionServiceAssocationRequest data, response status code and response headers
    def create_automation_action_service_assocation_with_http_info(accept, content_type, id, create_automation_action_service_assocation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_action_service_assocation ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_action_service_assocation"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_action_service_assocation"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.create_automation_action_service_assocation"
      end
      # verify the required parameter 'create_automation_action_service_assocation_request' is set
      if @api_client.config.client_side_validation && create_automation_action_service_assocation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_action_service_assocation_request' when calling AutomationActionsApi.create_automation_action_service_assocation"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/services'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_action_service_assocation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationActionServiceAssocationRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_action_service_assocation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_action_service_assocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate an Automation Action with a team
    # Associate an Automation Action with a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_team_association_request [CreateAutomationActionTeamAssociationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationActionTeamAssociationRequest]
    def create_automation_action_team_association(accept, content_type, id, create_automation_action_team_association_request, opts = {})
      data, _status_code, _headers = create_automation_action_team_association_with_http_info(accept, content_type, id, create_automation_action_team_association_request, opts)
      data
    end

    # Associate an Automation Action with a team
    # Associate an Automation Action with a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_team_association_request [CreateAutomationActionTeamAssociationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationActionTeamAssociationRequest, Integer, Hash)>] CreateAutomationActionTeamAssociationRequest data, response status code and response headers
    def create_automation_action_team_association_with_http_info(accept, content_type, id, create_automation_action_team_association_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_action_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_action_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_action_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.create_automation_action_team_association"
      end
      # verify the required parameter 'create_automation_action_team_association_request' is set
      if @api_client.config.client_side_validation && create_automation_action_team_association_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_action_team_association_request' when calling AutomationActionsApi.create_automation_action_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/teams'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_action_team_association_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationActionTeamAssociationRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_action_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_action_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Automation Action runner.
    # Create a Process Automation or a Runbook Automation runner. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param create_automation_actions_runner_request [CreateAutomationActionsRunnerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationActionsRunner201Response]
    def create_automation_actions_runner(accept, content_type, create_automation_actions_runner_request, opts = {})
      data, _status_code, _headers = create_automation_actions_runner_with_http_info(accept, content_type, create_automation_actions_runner_request, opts)
      data
    end

    # Create an Automation Action runner.
    # Create a Process Automation or a Runbook Automation runner. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param create_automation_actions_runner_request [CreateAutomationActionsRunnerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationActionsRunner201Response, Integer, Hash)>] CreateAutomationActionsRunner201Response data, response status code and response headers
    def create_automation_actions_runner_with_http_info(accept, content_type, create_automation_actions_runner_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_actions_runner ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_actions_runner"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_actions_runner"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'create_automation_actions_runner_request' is set
      if @api_client.config.client_side_validation && create_automation_actions_runner_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_actions_runner_request' when calling AutomationActionsApi.create_automation_actions_runner"
      end
      # resource path
      local_var_path = '/automation_actions/runners'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_actions_runner_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationActionsRunner201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_actions_runner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_actions_runner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a runner with a team
    # Associate a runner with a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_team_association_request [CreateAutomationActionTeamAssociationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationActionTeamAssociationRequest]
    def create_automation_actions_runner_team_association(accept, content_type, id, create_automation_action_team_association_request, opts = {})
      data, _status_code, _headers = create_automation_actions_runner_team_association_with_http_info(accept, content_type, id, create_automation_action_team_association_request, opts)
      data
    end

    # Associate a runner with a team
    # Associate a runner with a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param create_automation_action_team_association_request [CreateAutomationActionTeamAssociationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationActionTeamAssociationRequest, Integer, Hash)>] CreateAutomationActionTeamAssociationRequest data, response status code and response headers
    def create_automation_actions_runner_team_association_with_http_info(accept, content_type, id, create_automation_action_team_association_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.create_automation_actions_runner_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.create_automation_actions_runner_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.create_automation_actions_runner_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.create_automation_actions_runner_team_association"
      end
      # verify the required parameter 'create_automation_action_team_association_request' is set
      if @api_client.config.client_side_validation && create_automation_action_team_association_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_automation_action_team_association_request' when calling AutomationActionsApi.create_automation_actions_runner_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}/teams'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_automation_action_team_association_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationActionTeamAssociationRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.create_automation_actions_runner_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#create_automation_actions_runner_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Automation Action
    # Delete an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_automation_action(accept, content_type, id, opts = {})
      delete_automation_action_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete an Automation Action
    # Delete an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_automation_action_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.delete_automation_action ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.delete_automation_action"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.delete_automation_action"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.delete_automation_action"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.delete_automation_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#delete_automation_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate an Automation Action from a service
    # Disassociate an Automation Action from a service 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_automation_action_service_association(accept, content_type, id, service_id, opts = {})
      delete_automation_action_service_association_with_http_info(accept, content_type, id, service_id, opts)
      nil
    end

    # Disassociate an Automation Action from a service
    # Disassociate an Automation Action from a service 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_automation_action_service_association_with_http_info(accept, content_type, id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.delete_automation_action_service_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.delete_automation_action_service_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.delete_automation_action_service_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.delete_automation_action_service_association"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AutomationActionsApi.delete_automation_action_service_association"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/services/{service_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.delete_automation_action_service_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#delete_automation_action_service_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate an Automation Action from a team
    # Disassociate an Automation Action from a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_automation_action_team_association(accept, content_type, id, team_id, opts = {})
      delete_automation_action_team_association_with_http_info(accept, content_type, id, team_id, opts)
      nil
    end

    # Disassociate an Automation Action from a team
    # Disassociate an Automation Action from a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_automation_action_team_association_with_http_info(accept, content_type, id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.delete_automation_action_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.delete_automation_action_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.delete_automation_action_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.delete_automation_action_team_association"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AutomationActionsApi.delete_automation_action_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/teams/{team_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.delete_automation_action_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#delete_automation_action_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Automation Action runner
    # Delete an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_automation_actions_runner(accept, content_type, id, opts = {})
      delete_automation_actions_runner_with_http_info(accept, content_type, id, opts)
      nil
    end

    # Delete an Automation Action runner
    # Delete an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_automation_actions_runner_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.delete_automation_actions_runner ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.delete_automation_actions_runner"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.delete_automation_actions_runner"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.delete_automation_actions_runner"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.delete_automation_actions_runner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#delete_automation_actions_runner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate a runner from a team
    # Disassociates a runner from a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_automation_actions_runner_team_association(accept, content_type, id, team_id, opts = {})
      delete_automation_actions_runner_team_association_with_http_info(accept, content_type, id, team_id, opts)
      nil
    end

    # Disassociate a runner from a team
    # Disassociates a runner from a team 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_automation_actions_runner_team_association_with_http_info(accept, content_type, id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.delete_automation_actions_runner_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.delete_automation_actions_runner_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.delete_automation_actions_runner_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.delete_automation_actions_runner_team_association"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AutomationActionsApi.delete_automation_actions_runner_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}/teams/{team_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.delete_automation_actions_runner_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#delete_automation_actions_runner_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Automation Actions
    # Lists Automation Actions matching provided query params.  The returned records are sorted by action name in alphabetical order.  See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :name Filters results to include the ones matching the name (case insensitive substring matching)
    # @option opts [String] :runner_id Filters results to include the ones linked to the specified runner. Specifying the value &#x60;any&#x60; filters results to include the ones linked to runners only, thus omitting the results not linked to runners. 
    # @option opts [AutomationActionsActionClassificationEnum] :classification Filters results to include the ones matching the specified classification (aka category)
    # @option opts [String] :team_id Filters results to include the ones associated with the specified team.
    # @option opts [String] :service_id Filters results to include the ones associated with the specified service
    # @option opts [String] :action_type Filters results to include the ones matching the specified action type
    # @return [GetAllAutomationActions200Response]
    def get_all_automation_actions(accept, content_type, opts = {})
      data, _status_code, _headers = get_all_automation_actions_with_http_info(accept, content_type, opts)
      data
    end

    # List Automation Actions
    # Lists Automation Actions matching provided query params.  The returned records are sorted by action name in alphabetical order.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :name Filters results to include the ones matching the name (case insensitive substring matching)
    # @option opts [String] :runner_id Filters results to include the ones linked to the specified runner. Specifying the value &#x60;any&#x60; filters results to include the ones linked to runners only, thus omitting the results not linked to runners. 
    # @option opts [AutomationActionsActionClassificationEnum] :classification Filters results to include the ones matching the specified classification (aka category)
    # @option opts [String] :team_id Filters results to include the ones associated with the specified team.
    # @option opts [String] :service_id Filters results to include the ones associated with the specified service
    # @option opts [String] :action_type Filters results to include the ones matching the specified action type
    # @return [Array<(GetAllAutomationActions200Response, Integer, Hash)>] GetAllAutomationActions200Response data, response status code and response headers
    def get_all_automation_actions_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_all_automation_actions ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_all_automation_actions"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_all_automation_actions"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["script", "process_automation"]
      if @api_client.config.client_side_validation && opts[:'action_type'] && !allowable_values.include?(opts[:'action_type'])
        fail ArgumentError, "invalid value for \"action_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/automation_actions/actions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'runner_id'] = opts[:'runner_id'] if !opts[:'runner_id'].nil?
      query_params[:'classification'] = opts[:'classification'] if !opts[:'classification'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'service_id'] = opts[:'service_id'] if !opts[:'service_id'].nil?
      query_params[:'action_type'] = opts[:'action_type'] if !opts[:'action_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllAutomationActions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_all_automation_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_all_automation_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Automation Action
    # Get an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationAction201Response]
    def get_automation_action(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_action_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Automation Action
    # Get an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationAction201Response, Integer, Hash)>] CreateAutomationAction201Response data, response status code and response headers
    def get_automation_action_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_action ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_action"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_action"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_action"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationAction201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of an Automation Action / service relation
    # Gets the details of a Automation Action / service relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionServiceAssociation200Response]
    def get_automation_actions_action_service_association(accept, content_type, id, service_id, opts = {})
      data, _status_code, _headers = get_automation_actions_action_service_association_with_http_info(accept, content_type, id, service_id, opts)
      data
    end

    # Get the details of an Automation Action / service relation
    # Gets the details of a Automation Action / service relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param service_id [String] The service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionServiceAssociation200Response, Integer, Hash)>] GetAutomationActionsActionServiceAssociation200Response data, response status code and response headers
    def get_automation_actions_action_service_association_with_http_info(accept, content_type, id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_action_service_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_action_service_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_action_service_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_action_service_association"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AutomationActionsApi.get_automation_actions_action_service_association"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/services/{service_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'service_id' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionServiceAssociation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_action_service_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_action_service_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all service references associated with an Automation Action
    # Gets all service references associated with an Automation Action
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionServiceAssociations200Response]
    def get_automation_actions_action_service_associations(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_actions_action_service_associations_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get all service references associated with an Automation Action
    # Gets all service references associated with an Automation Action
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionServiceAssociations200Response, Integer, Hash)>] GetAutomationActionsActionServiceAssociations200Response data, response status code and response headers
    def get_automation_actions_action_service_associations_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_action_service_associations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_action_service_associations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_action_service_associations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_action_service_associations"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/services'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionServiceAssociations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_action_service_associations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_action_service_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of an Automation Action / team relation
    # Gets the details of an Automation Action / team relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionTeamAssociation200Response]
    def get_automation_actions_action_team_association(accept, content_type, id, team_id, opts = {})
      data, _status_code, _headers = get_automation_actions_action_team_association_with_http_info(accept, content_type, id, team_id, opts)
      data
    end

    # Get the details of an Automation Action / team relation
    # Gets the details of an Automation Action / team relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionTeamAssociation200Response, Integer, Hash)>] GetAutomationActionsActionTeamAssociation200Response data, response status code and response headers
    def get_automation_actions_action_team_association_with_http_info(accept, content_type, id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_action_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_action_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_action_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_action_team_association"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AutomationActionsApi.get_automation_actions_action_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/teams/{team_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionTeamAssociation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_action_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_action_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all team references associated with an Automation Action
    # Gets all team references associated with an Automation Action
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionTeamAssociations200Response]
    def get_automation_actions_action_team_associations(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_actions_action_team_associations_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get all team references associated with an Automation Action
    # Gets all team references associated with an Automation Action
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionTeamAssociations200Response, Integer, Hash)>] GetAutomationActionsActionTeamAssociations200Response data, response status code and response headers
    def get_automation_actions_action_team_associations_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_action_team_associations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_action_team_associations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_action_team_associations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_action_team_associations"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}/teams'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionTeamAssociations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_action_team_associations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_action_team_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Invocation
    # Get an Automation Action Invocation 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsInvocation200Response]
    def get_automation_actions_invocation(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_actions_invocation_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Invocation
    # Get an Automation Action Invocation 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsInvocation200Response, Integer, Hash)>] GetAutomationActionsInvocation200Response data, response status code and response headers
    def get_automation_actions_invocation_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_invocation ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_invocation"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_invocation"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_invocation"
      end
      # resource path
      local_var_path = '/automation_actions/invocations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsInvocation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_invocation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Automation Action runner
    # Get an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsRunner200Response]
    def get_automation_actions_runner(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_actions_runner_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get an Automation Action runner
    # Get an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsRunner200Response, Integer, Hash)>] GetAutomationActionsRunner200Response data, response status code and response headers
    def get_automation_actions_runner_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_runner ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_runner"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_runner"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_runner"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsRunner200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_runner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_runner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of a runner / team relation
    # Gets the details of a runner / team relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionTeamAssociation200Response]
    def get_automation_actions_runner_team_association(accept, content_type, id, team_id, opts = {})
      data, _status_code, _headers = get_automation_actions_runner_team_association_with_http_info(accept, content_type, id, team_id, opts)
      data
    end

    # Get the details of a runner / team relation
    # Gets the details of a runner / team relation
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionTeamAssociation200Response, Integer, Hash)>] GetAutomationActionsActionTeamAssociation200Response data, response status code and response headers
    def get_automation_actions_runner_team_association_with_http_info(accept, content_type, id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_runner_team_association ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_runner_team_association"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_runner_team_association"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_runner_team_association"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AutomationActionsApi.get_automation_actions_runner_team_association"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}/teams/{team_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionTeamAssociation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_runner_team_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_runner_team_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all team references associated with a runner
    # Gets all team references associated with a runner
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsActionTeamAssociations200Response]
    def get_automation_actions_runner_team_associations(accept, content_type, id, opts = {})
      data, _status_code, _headers = get_automation_actions_runner_team_associations_with_http_info(accept, content_type, id, opts)
      data
    end

    # Get all team references associated with a runner
    # Gets all team references associated with a runner
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsActionTeamAssociations200Response, Integer, Hash)>] GetAutomationActionsActionTeamAssociations200Response data, response status code and response headers
    def get_automation_actions_runner_team_associations_with_http_info(accept, content_type, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_runner_team_associations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_runner_team_associations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_runner_team_associations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.get_automation_actions_runner_team_associations"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}/teams'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsActionTeamAssociations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_runner_team_associations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_runner_team_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Automation Action runners
    # Lists Automation Action runners matching provided query params. The returned records are sorted by runner name in alphabetical order.  See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :name Filters results to include the ones matching the name (case insensitive substring matching)
    # @option opts [Array<String>] :include Includes additional data elements into the response
    # @return [GetAutomationActionsRunners200Response]
    def get_automation_actions_runners(accept, content_type, opts = {})
      data, _status_code, _headers = get_automation_actions_runners_with_http_info(accept, content_type, opts)
      data
    end

    # List Automation Action runners
    # Lists Automation Action runners matching provided query params. The returned records are sorted by runner name in alphabetical order.  See [&#x60;Cursor-based pagination&#x60;](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set. 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The minimum of the &#x60;limit&#x60; parameter used in the request or the maximum request size of the API.
    # @option opts [String] :cursor Optional parameter used to request the \&quot;next\&quot; set of results from an API.  The value provided here is most commonly obtained from the &#x60;next_cursor&#x60; field of the previous request.  When no value is provided, the request starts at the beginning of the result set. 
    # @option opts [String] :name Filters results to include the ones matching the name (case insensitive substring matching)
    # @option opts [Array<String>] :include Includes additional data elements into the response
    # @return [Array<(GetAutomationActionsRunners200Response, Integer, Hash)>] GetAutomationActionsRunners200Response data, response status code and response headers
    def get_automation_actions_runners_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.get_automation_actions_runners ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.get_automation_actions_runners"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.get_automation_actions_runners"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["associated_actions"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/automation_actions/runners'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsRunners200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.get_automation_actions_runners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#get_automation_actions_runners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Invocations
    # List Invocations 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invocation_state Invocation state
    # @option opts [Schema] :not_invocation_state Invocation state inverse filter (matches invocations NOT in the specified state)
    # @option opts [String] :incident_id Incident ID
    # @option opts [String] :action_id Action ID
    # @return [ListAutomationActionInvocations200Response]
    def list_automation_action_invocations(accept, content_type, opts = {})
      data, _status_code, _headers = list_automation_action_invocations_with_http_info(accept, content_type, opts)
      data
    end

    # List Invocations
    # List Invocations 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invocation_state Invocation state
    # @option opts [Schema] :not_invocation_state Invocation state inverse filter (matches invocations NOT in the specified state)
    # @option opts [String] :incident_id Incident ID
    # @option opts [String] :action_id Action ID
    # @return [Array<(ListAutomationActionInvocations200Response, Integer, Hash)>] ListAutomationActionInvocations200Response data, response status code and response headers
    def list_automation_action_invocations_with_http_info(accept, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.list_automation_action_invocations ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.list_automation_action_invocations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.list_automation_action_invocations"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["prepared", "created", "sent", "queued", "running", "aborted", "completed", "error"]
      if @api_client.config.client_side_validation && opts[:'invocation_state'] && !allowable_values.include?(opts[:'invocation_state'])
        fail ArgumentError, "invalid value for \"invocation_state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/automation_actions/invocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'invocation_state'] = opts[:'invocation_state'] if !opts[:'invocation_state'].nil?
      query_params[:'not_invocation_state'] = opts[:'not_invocation_state'] if !opts[:'not_invocation_state'].nil?
      query_params[:'incident_id'] = opts[:'incident_id'] if !opts[:'incident_id'].nil?
      query_params[:'action_id'] = opts[:'action_id'] if !opts[:'action_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAutomationActionInvocations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.list_automation_action_invocations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#list_automation_action_invocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Automation Action
    # Updates an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param update_automation_action_request [UpdateAutomationActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAutomationAction201Response]
    def update_automation_action(accept, content_type, id, update_automation_action_request, opts = {})
      data, _status_code, _headers = update_automation_action_with_http_info(accept, content_type, id, update_automation_action_request, opts)
      data
    end

    # Update an Automation Action
    # Updates an Automation Action 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param update_automation_action_request [UpdateAutomationActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAutomationAction201Response, Integer, Hash)>] CreateAutomationAction201Response data, response status code and response headers
    def update_automation_action_with_http_info(accept, content_type, id, update_automation_action_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.update_automation_action ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.update_automation_action"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.update_automation_action"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.update_automation_action"
      end
      # verify the required parameter 'update_automation_action_request' is set
      if @api_client.config.client_side_validation && update_automation_action_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_automation_action_request' when calling AutomationActionsApi.update_automation_action"
      end
      # resource path
      local_var_path = '/automation_actions/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_automation_action_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAutomationAction201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.update_automation_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#update_automation_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Automation Action runner
    # Update an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param update_automation_actions_runner_request [UpdateAutomationActionsRunnerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetAutomationActionsRunner200Response]
    def update_automation_actions_runner(accept, content_type, id, update_automation_actions_runner_request, opts = {})
      data, _status_code, _headers = update_automation_actions_runner_with_http_info(accept, content_type, id, update_automation_actions_runner_request, opts)
      data
    end

    # Update an Automation Action runner
    # Update an Automation Action runner 
    # @param accept [String] The &#x60;Accept&#x60; header is used as a versioning header.
    # @param content_type [String] 
    # @param id [String] The ID of the resource.
    # @param update_automation_actions_runner_request [UpdateAutomationActionsRunnerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAutomationActionsRunner200Response, Integer, Hash)>] GetAutomationActionsRunner200Response data, response status code and response headers
    def update_automation_actions_runner_with_http_info(accept, content_type, id, update_automation_actions_runner_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutomationActionsApi.update_automation_actions_runner ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling AutomationActionsApi.update_automation_actions_runner"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AutomationActionsApi.update_automation_actions_runner"
      end
      # verify enum value
      allowable_values = ["application/json"]
      if @api_client.config.client_side_validation && !allowable_values.include?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AutomationActionsApi.update_automation_actions_runner"
      end
      # verify the required parameter 'update_automation_actions_runner_request' is set
      if @api_client.config.client_side_validation && update_automation_actions_runner_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_automation_actions_runner_request' when calling AutomationActionsApi.update_automation_actions_runner"
      end
      # resource path
      local_var_path = '/automation_actions/runners/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_automation_actions_runner_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetAutomationActionsRunner200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AutomationActionsApi.update_automation_actions_runner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutomationActionsApi#update_automation_actions_runner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
